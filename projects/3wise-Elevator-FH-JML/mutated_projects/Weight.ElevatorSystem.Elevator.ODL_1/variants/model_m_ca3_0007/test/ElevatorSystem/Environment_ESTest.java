/*
 * This file was automatically generated by EvoSuite
 * Mon May 04 18:23:37 GMT 2020
 */

package ElevatorSystem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Elevator;
import ElevatorSystem.Environment;
import ElevatorSystem.Floor;
import ElevatorSystem.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Environment_ESTest extends Environment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[6];
      Floor floor0 = new Floor((Environment) null, 0);
      floorArray0[1] = floor0;
      Floor[] floorArray1 = new Floor[7];
      floorArray1[1] = floor0;
      floorArray1[2] = floor0;
      floorArray1[4] = floor0;
      floorArray1[5] = floor0;
      environment0.floors = floorArray1;
      Floor floor1 = new Floor((Environment) null, 0);
      floorArray0[2] = floor1;
      environment0.getFloor(0);
      floorArray0[3] = null;
      int int0 = 0;
      Environment environment1 = new Environment(0);
      Floor floor2 = new Floor(environment1, (-1));
      floorArray0[4] = floor2;
      environment0.floors = floorArray1;
      // Undeclared exception!
      try { 
        environment1.getFloor(205);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 205
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Environment environment0 = new Environment(1568);
      Floor[] floorArray0 = new Floor[6];
      int int0 = 0;
      Floor floor0 = environment0.getFloor(0);
      floorArray0[0] = floor0;
      Floor floor1 = environment0.getFloor(0);
      floorArray0[1] = floor1;
      Floor floor2 = environment0.getFloor(0);
      floorArray0[2] = floor2;
      int int1 = 0;
      Floor floor3 = environment0.getFloor(0);
      floorArray0[3] = floor3;
      Floor floor4 = new Floor(environment0, 1568);
      environment0.floors = floorArray0;
      floor3.addWaitingPerson((Person) null);
      floorArray0[4] = floor4;
      Floor floor5 = environment0.getFloor(2);
      floor5.reset();
      floorArray0[5] = floor5;
      environment0.floors = floorArray0;
      floor5.addWaitingPerson((Person) null);
      // Undeclared exception!
      try { 
        environment0.getFloor(3846);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3846
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, 1);
      floorArray0[0] = floor0;
      Environment environment1 = new Environment(0);
      Floor floor1 = new Floor(environment1, (-1));
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment1, true, 0, false);
      floor0.processWaitingPersons(elevator0);
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      environment0.getFloor(1);
      environment0.getFloors();
      environment0.getFloors();
      // Undeclared exception!
      try { 
        environment1.getFloor(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Environment environment0 = new Environment(1791);
      Floor floor0 = environment0.getFloor(147);
      assertEquals(147, floor0.getFloorID());
      assertNotNull(floor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = null;
      environment0.getFloors();
      environment0.getFloors();
      // Undeclared exception!
      try { 
        environment0.isTopFloor(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1;
      Environment environment0 = new Environment(1);
      int int1 = 0;
      environment0.floors = null;
      environment0.floors = null;
      environment0.floors = null;
      // Undeclared exception!
      try { 
        environment0.getFloor(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 554;
      Environment environment0 = new Environment(554);
      Floor[] floorArray0 = new Floor[7];
      Floor floor0 = new Floor(environment0, 554);
      floorArray0[0] = floor0;
      Environment environment1 = new Environment(554);
      Floor floor1 = environment1.getFloor(0);
      floorArray0[1] = floor1;
      Floor floor2 = environment0.getFloor(0);
      floorArray0[2] = floor2;
      Floor floor3 = new Floor(environment0, 0);
      floorArray0[3] = floor3;
      Floor floor4 = new Floor(environment0, (-908));
      floorArray0[4] = floor4;
      Floor floor5 = environment0.getFloor(0);
      floorArray0[5] = floor5;
      Floor floor6 = environment0.getFloor(0);
      floorArray0[6] = floor6;
      environment0.floors = floorArray0;
      environment0.floors = null;
      // Undeclared exception!
      try { 
        environment0.isTopFloor(554);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Environment environment0 = new Environment(0);
      boolean boolean0 = environment0.isTopFloor(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = (-74);
      Environment environment0 = null;
      try {
        environment0 = new Environment((-74));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[2];
      Environment environment1 = new Environment(1);
      int int1 = (-208);
      // Undeclared exception!
      try { 
        environment1.getFloor((-208));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -208
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Floor[] floorArray0 = new Floor[9];
      Environment environment0 = null;
      try {
        environment0 = new Environment((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = environment0.getFloors();
      environment0.isTopFloor((-2277));
      boolean boolean0 = environment0.isTopFloor((-2277));
      environment0.floors = floorArray0;
      boolean boolean1 = environment0.isTopFloor(0);
      assertFalse(boolean1 == boolean0);
      
      Floor floor0 = environment0.getFloor(0);
      assertNotNull(floor0);
      assertEquals(0, floor0.getFloorID());
      
      Floor[] floorArray1 = environment0.getFloors();
      assertEquals(1, floorArray1.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, 1);
      floorArray0[0] = floor0;
      // Undeclared exception!
      try { 
        environment0.getFloor(1799);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1799
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 0;
      Environment environment0 = new Environment(0);
      environment0.getFloors();
      Floor[] floorArray0 = new Floor[4];
      // Undeclared exception!
      try { 
        environment0.getFloor((-1497));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1497
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }
}
