/*
 * This file was automatically generated by EvoSuite
 * Mon May 04 18:38:17 GMT 2020
 */

package ElevatorSystem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Elevator;
import ElevatorSystem.Environment;
import ElevatorSystem.Floor;
import ElevatorSystem.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elevator_ESTest extends Elevator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      floorArray0[1] = floor0;
      floorArray0[2] = floorArray0[0];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.timeShift();
      elevator0.timeShift();
      elevator0.timeShift();
      assertFalse(elevator0.areDoorsOpen());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true);
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, true, (-3188), true);
      int int0 = elevator0.getCurrentFloorID();
      assertEquals((-3188), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      boolean boolean0 = elevator0.buttonForFloorIsPressed(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Environment environment0 = new Environment(988);
      Elevator elevator0 = new Elevator(environment0, false, 988, false);
      // Undeclared exception!
      try { 
        elevator0.pressInLiftFloorButton(988);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 988
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      // Undeclared exception!
      try { 
        elevator0.isIdle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Environment environment0 = new Environment(1386);
      Elevator elevator0 = new Elevator(environment0, true);
      boolean[] booleanArray0 = new boolean[0];
      elevator0.floorButtons = booleanArray0;
      // Undeclared exception!
      try { 
        elevator0.isIdle();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      // Undeclared exception!
      try { 
        elevator0.enterElevator((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Environment environment0 = new Environment(5998);
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = new Person("", 5998, 1276, (-2306), environment0);
      // Undeclared exception!
      try { 
        elevator0.enterElevator(person0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2306
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator((Environment) null, false, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Environment environment0 = new Environment(2306);
      environment0.floors = null;
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator(environment0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, false, 2, true);
      elevator0.pressInLiftFloorButton(0);
      assertFalse(elevator0.isBlocked());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = new Person("U+^@gbbF#-.", 0, 0, 1, elevator0.env);
      elevator0.timeShift();
      boolean boolean0 = elevator0.leaveElevator(person0);
      assertTrue(person0.isDestinationReached());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      elevator0.currentFloorID = 0;
      elevator0.timeShift();
      assertFalse(elevator0.areDoorsOpen());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Environment environment0 = new Environment(71);
      Elevator elevator0 = new Elevator(environment0, true);
      Person person0 = new Person("L]", 71, 0, 0, environment0);
      elevator0.enterElevator(person0);
      elevator0.timeShift();
      assertEquals(0, elevator0.getCurrentFloorID());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Environment environment0 = new Environment(71);
      Elevator elevator0 = new Elevator(environment0, true);
      Person person0 = new Person("L]", 71, 0, 0, environment0);
      elevator0.enterElevator(person0);
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
      assertEquals(0, elevator0.getCurrentFloorID());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Person person0 = new Person("", 100, 0, 0, environment0);
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      boolean boolean0 = elevator0.isIdle();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false);
      String string0 = elevator0.toString();
      assertEquals("Elevator [_] at 0 heading up", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      floorArray0[1] = floor0;
      floorArray0[2] = floorArray0[1];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      elevator0.timeShift();
      elevator0.toString();
      assertFalse(elevator0.areDoorsOpen());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Environment environment0 = new Environment(1386);
      Elevator elevator0 = new Elevator(environment0, true);
      boolean boolean0 = elevator0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Person person0 = new Person("", 73, 0, 0, environment0);
      Elevator elevator0 = new Elevator(environment0, false);
      assertTrue(elevator0.isEmpty());
      
      elevator0.timeShift();
      boolean boolean0 = elevator0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      floorArray0[1] = floorArray0[0];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = new Person("U+^@gbbF#-.", 1, 1, 1, environment0);
      floor0.addWaitingPerson(person0);
      elevator0.timeShift();
      boolean boolean0 = elevator0.leaveElevator(person0);
      assertTrue(person0.isDestinationReached());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[1] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      Person person0 = new Person((String) null, 1, 1, 1, elevator0.env);
      boolean boolean0 = elevator0.leaveElevator(person0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = new Person("]3", 0, 1, 0, environment0);
      elevator0.enterElevator(person0);
      elevator0.timeShift();
      assertTrue(elevator0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Person person0 = new Person("", 73, 0, 0, environment0);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.timeShift();
      elevator0.timeShift();
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      boolean boolean0 = elevator0.areDoorsOpen();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      floorArray0[1] = floor0;
      floorArray0[2] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      elevator0.timeShift();
      boolean boolean0 = elevator0.areDoorsOpen();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      floor0.callElevator();
      elevator0.timeShift();
      assertFalse(elevator0.areDoorsOpen());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      floorArray0[1] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[1] = true;
      elevator0.floorButtons = booleanArray0;
      elevator0.currentFloorID = 0;
      elevator0.timeShift();
      assertFalse(elevator0.areDoorsOpen());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1432));
      Person person0 = new Person("", 100, 0, 0, environment0);
      floor0.addWaitingPerson(person0);
      floorArray0[1] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      elevator0.timeShift();
      elevator0.timeShift();
      assertFalse(elevator0.areDoorsOpen());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      floorArray0[1] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[2] = floor1;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      Person person0 = new Person((String) null, 1, 1, 1, environment0);
      floor1.addWaitingPerson(person0);
      elevator0.timeShift();
      elevator0.timeShift();
      assertFalse(elevator0.areDoorsOpen());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1432));
      Person person0 = new Person("", 100, 0, 0, environment0);
      floor0.addWaitingPerson(person0);
      floorArray0[1] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      elevator0.timeShift();
      elevator0.timeShift();
      assertFalse(elevator0.areDoorsOpen());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[1] = floor0;
      floorArray0[2] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      Person person0 = new Person("Og9|~e/]WLh2m#O[#3", (-1337), 2, 0, elevator0.env);
      elevator0.enterElevator(person0);
      elevator0.timeShift();
      assertEquals(1, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      boolean boolean0 = elevator0.isBlocked();
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(boolean0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(1, int0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      elevator0.getCurrentDirection();
      assertEquals(1, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.getEnv();
      assertEquals(0, elevator0.getCurrentFloorID());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      floorArray0[1] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = new Person("U+^@gbbF#-.", 1, 1, 1, environment0);
      elevator0.timeShift();
      boolean boolean0 = elevator0.buttonForFloorIsPressed(1);
      assertFalse(elevator0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      Elevator.Direction elevator_Direction2 = elevator_Direction1.reverse();
      assertSame(elevator_Direction0, elevator_Direction2);
  }
}
