/*
 * This file was automatically generated by EvoSuite
 * Mon May 04 18:06:53 GMT 2020
 */

package ElevatorSystem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Elevator;
import ElevatorSystem.Environment;
import ElevatorSystem.Floor;
import ElevatorSystem.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elevator_ESTest extends Elevator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Elevator.DoorState.values();
      Elevator.Direction.values();
      Environment environment0 = new Environment(299);
      Elevator elevator0 = new Elevator(environment0, false, 299, true);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      elevator0.weight = 299;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = false;
      booleanArray0[7] = false;
      elevator0.timeShift();
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      elevator0.floorButtons = booleanArray0;
      elevator0.toString();
      elevator0.isIdle();
      elevator0.isBlocked();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      floor0.callElevator();
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, false);
      elevator0.isIdle();
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      elevator0.floorButtons = booleanArray0;
      elevator0.timeShift();
      environment0.floors = floorArray0;
      elevator0.isExecutiveFloorCalling();
      elevator0.isEmpty();
      elevator0.getCurrentDirection();
      elevator0.areDoorsOpen();
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Elevator.Direction.values();
      Environment environment0 = new Environment(280);
      Elevator elevator0 = new Elevator(environment0, false, 2, false);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      elevator0.toString();
      booleanArray0[5] = false;
      elevator0.floorButtons = booleanArray0;
      elevator0.toString();
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      elevator0.floorButtons = booleanArray0;
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      elevator0.getEnv();
      elevator0.isIdle();
      elevator0.isBlocked();
      Elevator.DoorState.values();
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, false);
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      elevator0.timeShift();
      environment0.floors = floorArray0;
      elevator0.isExecutiveFloorCalling();
      elevator0.isEmpty();
      elevator0.getCurrentDirection();
      elevator0.areDoorsOpen();
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1393;
      Environment environment0 = new Environment(1393);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.isExecutiveFloorCalling();
      int int1 = 1384;
      elevator0.pressInLiftFloorButton(1384);
      Floor[] floorArray0 = new Floor[8];
      int int2 = 1395;
      // Undeclared exception!
      try { 
        environment0.getFloor(1395);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1395
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Environment environment0 = new Environment(1403);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 1403);
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      assertNotNull(elevator0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      
      Elevator.Direction elevator_Direction1 = elevator0.getCurrentDirection();
      assertSame(elevator_Direction1, elevator_Direction0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      
      elevator0.weight = 1403;
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      
      boolean boolean0 = elevator0.isExecutiveFloorCalling();
      assertFalse(boolean0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      
      elevator0.timeShift();
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertNotNull(environment1);
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      elevator0.isIdle();
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      elevator0.floorButtons = booleanArray0;
      elevator0.timeShift();
      environment0.floors = floorArray0;
      elevator0.isExecutiveFloorCalling();
      elevator0.isEmpty();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("MS%;=y%$twk^NZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.MS%;=y%$twk^NZ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Environment environment0 = new Environment(1403);
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 1403);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      floor0.callElevator();
      floor0.hasCall();
      Elevator elevator0 = new Elevator(environment0, false);
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.getCurrentDirection();
      elevator0.isExecutiveFloorCalling();
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Elevator.Direction.values();
      Elevator.Direction.values();
      Environment environment0 = new Environment(100);
      Floor[] floorArray0 = new Floor[5];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, (-1), false);
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      Elevator.DoorState elevator_DoorState1 = Elevator.DoorState.open;
      elevator0.doors = elevator_DoorState1;
      elevator0.doors = elevator_DoorState0;
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Environment environment0 = new Environment(321);
      Elevator elevator0 = new Elevator(environment0, true, 1, false);
      Floor[] floorArray0 = new Floor[8];
      Floor floor0 = environment0.getFloor(186);
      floorArray0[0] = floor0;
      Floor floor1 = environment0.getFloor(1);
      floorArray0[1] = floor1;
      Floor floor2 = new Floor(environment0, 1);
      floorArray0[2] = floor2;
      Floor floor3 = new Floor(environment0, 0);
      floorArray0[3] = floor3;
      floor1.getFloorID();
      Floor floor4 = new Floor(environment0, 0);
      floorArray0[4] = floor4;
      environment0.floors = floorArray0;
      // Undeclared exception!
      try { 
        elevator0.isExecutiveFloorCalling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Environment environment0 = new Environment(299);
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      Person person0 = new Person("Ga", 299, 4, 4, environment0);
      elevator0.enterElevator(person0);
      elevator0.buttonForFloorIsPressed(4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 3487;
      Environment environment0 = new Environment(3487);
      Elevator elevator0 = new Elevator(environment0, true);
      // Undeclared exception!
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Environment environment0 = new Environment(845);
      Elevator elevator0 = new Elevator(environment0, false, 845, false);
      elevator0.buttonForFloorIsPressed(695);
      Elevator.DoorState.values();
      String string0 = "";
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = environment0.getFloor(0);
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 695);
      floorArray0[1] = floor1;
      // Undeclared exception!
      try { 
        environment0.getFloor(845);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 845
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Environment environment0 = new Environment(785);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true);
      assertNotNull(elevator0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      
      elevator0.timeShift();
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(785);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 785
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1127;
      Environment environment0 = new Environment(1127);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      assertNotNull(elevator0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      
      Elevator.DoorState elevator_DoorState1 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState1;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      
      Elevator.DoorState elevator_DoorState2 = Elevator.DoorState.open;
      String string0 = elevator0.toString();
      assertNotNull(string0);
      assertEquals("Elevator []  at 0 heading up", string0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      
      elevator0.doors = elevator_DoorState2;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("Elevator []  at 0 heading up");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.Elevator []  at 0 heading up
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      Elevator.Direction[] elevator_DirectionArray1 = Elevator.Direction.values();
      assertFalse(elevator_DirectionArray1.equals((Object)elevator_DirectionArray0));
      assertEquals(2, elevator_DirectionArray1.length);
      assertNotSame(elevator_DirectionArray1, elevator_DirectionArray0);
      assertNotNull(elevator_DirectionArray1);
      
      Environment environment0 = new Environment(100);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, (-1), false);
      assertNotNull(elevator0);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals((-1), elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals((-1), elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Environment environment0 = new Environment(559);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      assertNotNull(elevator0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Person person0 = new Person("", 722, 1, 2728, environment0);
      assertNotNull(person0);
      assertEquals(722, person0.getWeight());
      assertFalse(person0.isDestinationReached());
      assertEquals("", person0.getName());
      assertEquals(2728, person0.getDestination());
      assertEquals(1, person0.getOrigin());
      
      // Undeclared exception!
      try { 
        elevator0.enterElevator(person0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2728
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      int int0 = 0;
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      assertNotNull(elevator0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, 0);
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      floor0.reset();
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      boolean boolean0 = elevator0.areDoorsOpen();
      assertTrue(boolean0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      elevator0.floorButtons = null;
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      
      boolean boolean2 = elevator0.areDoorsOpen();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      
      // Undeclared exception!
      try { 
        elevator0.isIdle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      Environment environment0 = new Environment(1862);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      assertNotNull(elevator0);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      String string0 = elevator0.toString();
      assertNotNull(string0);
      assertEquals("Elevator [_] at 0 heading up", string0);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      elevator0.floorButtons = booleanArray0;
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      // Undeclared exception!
      try { 
        elevator0.enterElevator((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertNotNull(elevator0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Environment environment0 = new Environment(176);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertNotNull(elevator0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      elevator0.floorButtons = booleanArray0;
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean0 = elevator0.isExecutiveFloorCalling();
      assertFalse(boolean0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      // Undeclared exception!
      try { 
        elevator0.pressInLiftFloorButton(176);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 176
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      assertNotNull(elevator0);
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      boolean boolean0 = elevator0.isIdle();
      assertTrue(boolean0);
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      elevator0.timeShift();
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals((-1), elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      
      environment0.floors = floorArray0;
      boolean boolean1 = elevator0.isExecutiveFloorCalling();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals((-1), elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      
      boolean boolean2 = elevator0.isEmpty();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals((-1), elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("MS%;=y%$twk^NZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.MS%;=y%$twk^NZ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Environment environment0 = new Environment(2);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true);
      assertNotNull(elevator0);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      boolean boolean0 = elevator0.isEmpty();
      assertTrue(boolean0);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Environment environment0 = new Environment(1403);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 1403);
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      assertNotNull(elevator0);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Elevator.Direction elevator_Direction1 = elevator0.getCurrentDirection();
      assertSame(elevator_Direction1, elevator_Direction0);
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean0 = elevator0.isExecutiveFloorCalling();
      assertFalse(boolean0);
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      elevator0.timeShift();
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 3391;
      Environment environment0 = new Environment(3391);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true, 3391, false);
      assertNotNull(elevator0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(3391, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      // Undeclared exception!
      try { 
        elevator0.pressInLiftFloorButton(3391);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3391
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Environment environment0 = new Environment(2580);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      assertNotNull(elevator0);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      
      elevator0.timeShift();
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      int int1 = 995;
      Elevator elevator0 = new Elevator(environment0, true, 995, false);
      assertNotNull(elevator0);
      assertFalse(elevator0.isBlocked());
      assertEquals(995, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      assertFalse(elevator0.isBlocked());
      assertEquals(995, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      
      boolean boolean0 = elevator0.isIdle();
      assertTrue(boolean0);
      assertFalse(elevator0.isBlocked());
      assertEquals(995, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      
      int int2 = elevator0.getCurrentFloorID();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(995, int2);
      assertFalse(elevator0.isBlocked());
      assertEquals(995, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("e/3r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.e/3r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      assertNotNull(elevator0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      
      boolean boolean0 = elevator0.isIdle();
      assertTrue(boolean0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Environment environment0 = new Environment(513);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true, 513, false);
      assertNotNull(elevator0);
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(513, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertNotNull(environment1);
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(513, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Environment environment0 = new Environment(2);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertNotNull(elevator0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 2);
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertNotNull(floor2);
      
      boolean boolean0 = floor2.hasCall();
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertNotSame(floor2, floor0);
      assertNotSame(floor2, floor1);
      assertFalse(boolean0);
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      String string0 = elevator0.toString();
      assertNotNull(string0);
      assertEquals("Elevator [_] at 0 heading up", string0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean1 = elevator0.isExecutiveFloor(2);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean2 = elevator0.isBlocked();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      
      elevator0.getCurrentDirection();
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean3 = elevator0.isBlocked();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertNotNull(elevator0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      elevator0.weight = 0;
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      elevator0.executiveFloor = (-706);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean0 = elevator0.isExecutiveFloor(0);
      assertFalse(boolean0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      boolean boolean1 = elevator0.leaveElevator((Person) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      String string0 = elevator0.toString();
      assertNotNull(string0);
      assertEquals("Elevator [_] at 0 heading up", string0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(0, int0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction1.equals((Object)elevator_Direction0));
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean2 = elevator0.isIdle();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertNotNull(environment1);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean3 = elevator0.isEmpty();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertSame(environment0, environment1);
      assertTrue(boolean3);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false, (-52), false);
      assertNotNull(elevator0);
      assertEquals((-52), elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean0 = elevator0.isIdle();
      assertTrue(boolean0);
      assertEquals((-52), elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Environment environment0 = null;
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator((Environment) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Environment environment0 = null;
      int int0 = 0;
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator((Environment) null, true, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertNotNull(elevator0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      boolean boolean0 = elevator0.isExecutiveFloorCalling();
      assertFalse(boolean0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, false);
      assertNotNull(elevator0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      
      elevator0.env = environment0;
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      assertNotNull(elevator0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean0 = elevator0.isExecutiveFloorCalling();
      assertFalse(boolean0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      elevator0.executiveFloor = 0;
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      Person person0 = new Person((String) null, 952, 0, (-1902), environment0);
      assertNotNull(person0);
      assertEquals(952, person0.getWeight());
      assertNull(person0.getName());
      assertEquals(0, person0.getOrigin());
      assertEquals((-1902), person0.getDestination());
      assertFalse(person0.isDestinationReached());
      
      floor0.addWaitingPerson(person0);
      assertEquals(952, person0.getWeight());
      assertNull(person0.getName());
      assertEquals(0, person0.getOrigin());
      assertEquals((-1902), person0.getDestination());
      assertFalse(person0.isDestinationReached());
      
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1902
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("2&T8zQjr}SqA@C^M");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.2&T8zQjr}SqA@C^M
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      assertNotNull(elevator0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      String string0 = elevator0.toString();
      assertNotNull(string0);
      assertEquals("Elevator [_] at 1 heading down", string0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      assertNotNull(elevator0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      
      boolean boolean0 = elevator0.isExecutiveFloorCalling();
      assertFalse(boolean0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      
      elevator0.timeShift();
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      
      String string0 = elevator0.toString();
      assertNotNull(string0);
      assertEquals("Elevator []  at 1 heading up", string0);
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertNotNull(elevator0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      elevator0.weight = 0;
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      elevator0.executiveFloor = 0;
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      boolean boolean0 = elevator0.isExecutiveFloor(0);
      assertTrue(boolean0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      boolean boolean1 = elevator0.leaveElevator((Person) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      String string0 = elevator0.toString();
      assertNotNull(string0);
      assertEquals("Elevator [_] at 0 heading up", string0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(0, int0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction1.equals((Object)elevator_Direction0));
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      boolean boolean2 = elevator0.isIdle();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertNotNull(environment1);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      assertNotNull(elevator0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[5] = true;
      elevator0.floorButtons = booleanArray0;
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertNotNull(environment1);
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      boolean boolean0 = elevator0.isIdle();
      assertSame(environment0, environment1);
      assertFalse(boolean0);
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      boolean boolean1 = elevator0.isBlocked();
      assertTrue(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean1);
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, false);
      assertNotNull(elevator0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean0 = elevator0.isIdle();
      assertTrue(boolean0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      elevator0.floorButtons = booleanArray0;
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      elevator0.timeShift();
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      environment0.floors = floorArray0;
      boolean boolean1 = elevator0.isExecutiveFloorCalling();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean2 = elevator0.isEmpty();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      elevator0.getCurrentDirection();
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean3 = elevator0.areDoorsOpen();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      elevator0.timeShift();
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      assertNotNull(floor0);
      
      floor0.addWaitingPerson((Person) null);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      assertNotNull(elevator0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      Environment environment0 = new Environment(299);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true, 299, true);
      assertNotNull(elevator0);
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(299, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      elevator0.weight = 299;
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(299, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[7] = true;
      elevator0.timeShift();
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(299, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      elevator0.floorButtons = booleanArray0;
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(299, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      String string0 = elevator0.toString();
      assertNotNull(string0);
      assertEquals("Elevator [_] at 299 heading up", string0);
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(299, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(299, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      Environment environment0 = new Environment(1365);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true, 1365, true);
      assertNotNull(elevator0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(1365, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      
      boolean boolean0 = elevator0.isExecutiveFloorCalling();
      assertFalse(boolean0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(1365, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 654;
      Environment environment0 = new Environment(654);
      assertNotNull(environment0);
      
      boolean boolean0 = true;
      int int1 = (-966);
      Elevator elevator0 = new Elevator(environment0, true, (-966), true);
      assertNotNull(elevator0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals((-966), elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      
      // Undeclared exception!
      try { 
        elevator0.pressInLiftFloorButton(654);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 654
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Environment environment0 = new Environment(785);
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, 271);
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 271);
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.timeShift();
      elevator0.getCurrentDirection();
      elevator0.timeShift();
      String string0 = null;
      Floor[] floorArray1 = new Floor[5];
      // Undeclared exception!
      try { 
        environment0.getFloor(1739);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1739
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Floor[] floorArray0 = new Floor[2];
      Environment environment0 = new Environment(0);
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[1] = floor0;
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.isExecutiveFloor(100);
      elevator0.toString();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("Elevator [_] at 0 heading up");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.Elevator [_] at 0 heading up
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
