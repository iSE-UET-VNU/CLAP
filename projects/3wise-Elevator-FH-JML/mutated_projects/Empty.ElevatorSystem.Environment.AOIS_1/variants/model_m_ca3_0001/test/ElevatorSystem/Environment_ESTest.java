/*
 * This file was automatically generated by EvoSuite
 * Mon May 04 17:56:39 GMT 2020
 */

package ElevatorSystem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Environment;
import ElevatorSystem.Floor;
import ElevatorSystem.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Environment_ESTest extends Environment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[2];
      environment0.floors = floorArray0;
      boolean boolean0 = environment0.isTopFloor(0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = null;
      Floor[] floorArray1 = environment0.getFloors();
      assertNull(floorArray1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = environment0.getFloors();
      assertEquals(1, floorArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Floor[] floorArray0 = new Floor[4];
      environment0.floors = floorArray0;
      Floor floor0 = environment0.getFloor(2);
      assertNull(floor0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Environment environment0 = new Environment(1568);
      Floor[] floorArray0 = new Floor[6];
      Floor floor0 = environment0.getFloor(0);
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      floorArray0[2] = floorArray0[0];
      environment0.floors = floorArray0;
      floorArray0[2].addWaitingPerson((Person) null);
      Floor floor1 = environment0.getFloor(2);
      assertEquals(0, floor1.getFloorID());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Environment environment0 = new Environment(1791);
      Floor floor0 = environment0.getFloor(147);
      assertNotNull(floor0);
      assertEquals(147, floor0.getFloorID());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, (-1));
      environment0.floors = floorArray0;
      floorArray0[1] = floor0;
      Floor floor1 = environment0.getFloor(1);
      assertSame(floor1, floor0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Environment environment0 = new Environment(554);
      Floor[] floorArray0 = new Floor[7];
      environment0.floors = floorArray0;
      environment0.floors = null;
      // Undeclared exception!
      try { 
        environment0.isTopFloor(554);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Environment environment0 = new Environment(1);
      environment0.floors = null;
      // Undeclared exception!
      try { 
        environment0.getFloor(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Environment environment0 = null;
      try {
        environment0 = new Environment((-74));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[2];
      environment0.floors = floorArray0;
      boolean boolean0 = environment0.isTopFloor(1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Environment environment0 = new Environment(1);
      boolean boolean0 = environment0.isTopFloor(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Environment environment0 = new Environment(1);
      // Undeclared exception!
      try { 
        environment0.getFloor(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = environment0.getFloors();
      assertEquals(0, floorArray0.length);
  }
}
