/*
 * This file was automatically generated by EvoSuite
 * Sun May 24 16:27:18 GMT 2020
 */

package main;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Environment;
import java.util.List;
import main.PL_Interface_impl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PL_Interface_impl_ESTest extends PL_Interface_impl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[18];
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(18, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax((-5), (-5));
      assertEquals((-5), int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(13, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-5));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(370, 13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(29, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains("~K!2d8>P"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(29, list0.size());
      assertEquals(29, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS", string1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(10, (-1));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string2 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS", string2);
      assertNotNull(string2);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertTrue(boolean0);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(13, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(370, 13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(29, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("no Exception"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(29, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(29, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(14, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string2);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      Environment environment0 = pL_Interface_impl0.env;
      assertNull(environment0);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "no Exception";
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.start(13, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(370, 13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(29, list0.size());
      assertNotNull(list0);
      assertFalse(list0.contains("no Exception"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(29, PL_Interface_impl.actionHistory.size());
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(29, list0.size());
      
      pL_Interface_impl0.test((-1), 2708);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS", string1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      // Undeclared exception!
      pL_Interface_impl0.test(3, (-1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = 13;
      String[] stringArray0 = new String[3];
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      PL_Interface_impl.executedUnimplementedAction = true;
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int1 = PL_Interface_impl.getIntegerMinMax(13, 13);
      assertTrue(int1 == int0);
      assertEquals(13, int1);
      
      int int2 = (-1);
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-111), (-613566757));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(13, (-1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[3];
      stringArray0[2] = "";
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      Environment environment0 = pL_Interface_impl0.env;
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop StartFromTop aliceCall angelinaCall chuckCall monicaCall", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), (-1));
      assertEquals((-1), int0);
      
      pL_Interface_impl0.test(3, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertTrue(boolean0);
      
      boolean boolean1 = PL_Interface_impl.getBoolean();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals("", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-4));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(3, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-1818), 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-620), 2183);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(1, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = null;
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNull(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      Random.setNextRandom(3476);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(13, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(370, 13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(29, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(29, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(29, PL_Interface_impl.actionHistory.size());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(13, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string2);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-3487));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-3487), (-3487));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 1120);
      assertEquals(336, int0);
      
      boolean boolean2 = PL_Interface_impl.getBoolean();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax((-3487), 0);
      assertFalse(int1 == int0);
      assertEquals((-1743), int1);
      
      pL_Interface_impl0.start(6, 159);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-3487));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int2 = PL_Interface_impl.getIntegerMinMax((-1743), 6);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1568), int2);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-1568));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop StartFromTop StartFromBottom bigMacCall 1TS 3TS StartFromTop StartFromTop StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(6, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" StartFromTop StartFromTop StartFromBottom bigMacCall 1TS 3TS StartFromTop StartFromTop StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS", string1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "5";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(6, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall", string1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(370, 6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(23, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("~K!2d8>P"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(23, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(23, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS", string2);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(6, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string3 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS", string3);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string3);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string4 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertTrue(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertTrue(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS", string4);
      assertNotNull(string4);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G%?n#MD^rM7";
      stringArray0[1] = "V.plLXhuo>1a";
      stringArray0[2] = "g!@`eOh]vP*XKJi;F&";
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(5, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-1), 5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(3449);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(757);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      stringArray1[0] = "BigMac";
      stringArray1[1] = "";
      stringArray1[2] = "oR&Xh;D";
      stringArray1[3] = "close";
      PL_Interface_impl.main(stringArray1);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromBottom bobCall bobCall aliceCall angelinaCall StartFromTop bobCall aliceCall angelinaCall chuckCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertNotNull(pL_Interface_impl0);
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertEquals(23, list0.size());
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertNotNull(list0);
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(list0);
      //  // Unstable assertion: assertEquals(" StartFromTop StartFromTop StartFromBottom bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall", string0);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertEquals(23, list0.size());
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(list0.contains(string0));
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = 6;
      pL_Interface_impl0.randomSequenceOfActions(6);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-193));
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(6, 456);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-193));
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list1 = null;
      // Undeclared exception!
      try { 
        PL_Interface_impl.listToString((List<String>) null);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-2218));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax((-2989), 6);
      assertEquals((-2690), int0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax(1913, 1549);
      assertFalse(int1 == int0);
      assertEquals(1805, int1);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(25);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(878, 1);
      assertEquals(878, int0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(878);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.start(0, 1782);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      // Undeclared exception!
      pL_Interface_impl0.Specification3();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.start((-1), 6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-651), (-651));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax((-4185), (-4185));
      assertEquals((-4185), int0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1743);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-246), (-246));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(731);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(1638, 1638);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(20, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      // Undeclared exception!
      pL_Interface_impl0.Specification13();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(967);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(U%5HL|";
      PL_Interface_impl.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertEquals("", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(string0);
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.test(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(1, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      pL_Interface_impl0.checkOnlySpecification(364);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-1150), 5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop bobCall aliceCall angelinaCall chuckCall StartFromBottom bobCall aliceCall angelinaCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax(3, 3);
      assertEquals(3, int0);
      
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      Environment environment0 = pL_Interface_impl0.env;
      assertNull(environment0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(3, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(3);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop StartFromTop angelinaCall chuckCall monicaCall", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(1019);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(1, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      pL_Interface_impl0.randomSequenceOfActions(6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1560));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(4);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(1276);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      // Undeclared exception!
      pL_Interface_impl0.Specification3();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[0];
      PL_Interface_impl.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      pL_Interface_impl0.start(1868, 1868);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-3));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax(1970, 1156);
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-4676), 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertEquals(" StartFromTop StartFromTop StartFromTop", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(string0);
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-1603));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-1704));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(3550, 3550);
      assertEquals(3550, int0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-3546));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.executedUnimplementedAction = true;
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-257), 1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop bobCall", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), 1);
      assertEquals((-1), int0);
      
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-1), (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      List<String> list0 = PL_Interface_impl.actionHistory;
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertEquals("", string0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(string0);
      assertFalse(list0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-4676), 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(1, 1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = PL_Interface_impl.getBoolean();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(139, 139);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-611), (-611));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-2152));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main((String[]) null);
      int int0 = PL_Interface_impl.getIntegerMinMax(24, 24);
      assertEquals(24, int0);
      
      pL_Interface_impl0.randomSequenceOfActions((-2370));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G%?n#MD^rM7";
      stringArray0[1] = "V.plLXhuo>1a";
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(5, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      Environment environment0 = new Environment(1793);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(3449);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(757);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      stringArray1[0] = "BigMac";
      stringArray1[1] = "";
      stringArray1[2] = "oR&Xh;D";
      PL_Interface_impl.actionHistory = null;
      stringArray1[3] = "close";
      PL_Interface_impl.main(stringArray1);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      // Undeclared exception!
      try { 
        PL_Interface_impl.listToString((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[3];
      int int0 = PL_Interface_impl.getIntegerMinMax(400, (-1));
      assertEquals(40, int0);
      
      stringArray0[0] = "G%?n#MD^rM7";
      stringArray0[1] = "V.plLXhuo>1a";
      stringArray0[2] = "g!@`eOh]vP*XKJi;F&";
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(5, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(3449);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(757);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      stringArray1[0] = "BigMac";
      stringArray1[1] = "";
      stringArray1[2] = "BigMac";
      stringArray1[3] = "close";
      PL_Interface_impl.main(stringArray1);
      assertEquals(4, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromTop bobCall aliceCall angelinaCall chuckCall StartFromBottom bobCall aliceCall angelinaCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS StartFromBottom 3TS bobCall bobCall aliceCall", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[18];
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(18, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(13, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(370, 13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(29, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("no Exception"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(29, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(29, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(13);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(string1.equals((Object)string0));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS", string1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(3, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string2 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS", string2);
      assertNotNull(string2);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      Environment environment0 = pL_Interface_impl0.env;
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-828));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-828), (-828));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(571);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-828));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop StartFromTop StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS StartFromTop", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" StartFromTop StartFromTop StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS StartFromTop", string1);
      assertNotNull(string1);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean2 = PL_Interface_impl.executedUnimplementedAction;
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-828), (-42));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals("", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-4));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-4));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(3, (-4));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-4), 2183);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(10, (-1));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification3();
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-4));
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.start(3, 0);
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.test((-4), 2183);
      pL_Interface_impl0.test(1, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.checkOnlySpecification((-1));
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      pL_Interface_impl0.Specification1();
      Environment environment0 = pL_Interface_impl0.env;
      pL_Interface_impl0.env = environment0;
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification13();
      PL_Interface_impl.getIntegerMinMax((-1), (-1));
      pL_Interface_impl0.test(0, (-1));
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.randomSequenceOfActions(0);
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PL_Interface_impl.getIntegerMinMax(0, 0);
      Environment environment0 = new Environment(0);
      Random.setNextRandom(0);
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }
}
