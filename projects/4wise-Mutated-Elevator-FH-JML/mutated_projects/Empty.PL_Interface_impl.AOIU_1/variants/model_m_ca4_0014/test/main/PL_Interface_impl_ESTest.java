/*
 * This file was automatically generated by EvoSuite
 * Sun May 24 17:11:56 GMT 2020
 */

package main;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Environment;
import java.util.List;
import main.PL_Interface_impl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PL_Interface_impl_ESTest extends PL_Interface_impl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      PL_Interface_impl.actionHistory = null;
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      // Undeclared exception!
      try { 
        pL_Interface_impl0.randomSequenceOfActions(1296);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      
      PL_Interface_impl.executedUnimplementedAction = false;
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals("", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(12, 12);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(12, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(12, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(13, list0.size());
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop bobCall", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(string1.equals((Object)string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop bobCall", string1);
      assertNotNull(string1);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(1, 1);
      assertEquals(1, int0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(3, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax(1, 1);
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      pL_Interface_impl0.start((-1818), (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-620), 2183);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(3);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      
      Random.setNextRandom(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Random.setNextRandom(3062);
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(3062, 1);
      assertEquals(2144, int0);
      
      int int1 = PL_Interface_impl.getIntegerMinMax(1, 5);
      assertFalse(int1 == int0);
      assertEquals(3, int1);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      pL_Interface_impl0.randomSequenceOfActions(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-945));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      Environment environment0 = new Environment(3062);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(3, list1.size());
      assertFalse(list1.isEmpty());
      assertSame(list1, list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list1);
      
      pL_Interface_impl0.test(10, (-1));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-945));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      Random.setNextRandom(2144);
      pL_Interface_impl0.test(3, 1);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "StartFromBottom";
      stringArray0[3] = "|#w~vM3{S]Q@";
      stringArray0[4] = " j";
      stringArray0[5] = "ph$Yns^^ij]@a";
      stringArray0[3] = "";
      PL_Interface_impl.actionHistory = null;
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      stringArray0[7] = ";tyCne%";
      stringArray0[8] = "ElevatorSystem.Environment";
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = 0;
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean1);
      
      int int1 = 21;
      try { 
        pL_Interface_impl0.start(21, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "StartFromBottom";
      stringArray0[3] = "|#w~vM3{S]Q@";
      stringArray0[4] = " j";
      stringArray0[5] = "ph$Yns^^ij]@a";
      stringArray0[3] = "";
      PL_Interface_impl.actionHistory = null;
      stringArray0[7] = ";tyCne%";
      stringArray0[8] = "ElevatorSystem.Environment";
      // Undeclared exception!
      try { 
        pL_Interface_impl0.test(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[1] = "StartFromBottom";
      stringArray0[3] = "{B*~?o+B$;Gl@@;";
      stringArray0[4] = " j";
      stringArray0[5] = "ph$Yns^^_j]@a";
      stringArray0[3] = "";
      PL_Interface_impl.actionHistory = null;
      stringArray0[7] = ";tyCne%";
      stringArray0[8] = "ElevatorSystem.Environment";
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      // Undeclared exception!
      try { 
        PL_Interface_impl.listToString((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "StartFromBottom";
      stringArray0[3] = "|#w~vM3{S]Q@";
      PL_Interface_impl.executedUnimplementedAction = false;
      stringArray0[4] = " j";
      stringArray0[5] = "ph$Yns^^ij]@a";
      stringArray0[3] = "";
      PL_Interface_impl.actionHistory = null;
      stringArray0[7] = ";tyCne%";
      stringArray0[8] = "ElevatorSystem.Environment";
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = 0;
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean1);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNull(list0);
      
      // Undeclared exception!
      try { 
        pL_Interface_impl0.modifiedrandomSequenceOfActions(21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5";
      stringArray0[1] = "5";
      stringArray0[2] = "~K!2d8 P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(8, (-1));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(boolean0);
      
      pL_Interface_impl0.Specification13();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax((-1), (-7));
      assertFalse(int1 == int0);
      assertEquals((-2), int1);
      
      pL_Interface_impl0.start(370, 8);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int2 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertEquals(28, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      PL_Interface_impl.actionHistory = list0;
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertEquals(28, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(28, PL_Interface_impl.actionHistory.size());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(boolean1);
      
      pL_Interface_impl0.Specification14();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(string1.equals((Object)string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall", string1);
      assertNotNull(string1);
      
      pL_Interface_impl0.Specification2();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(8, (-1));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall", string2);
      assertNotNull(string2);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall", string3);
      assertNotNull(string3);
      
      pL_Interface_impl0.randomSequenceOfActions((-2));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start((-1), (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.executedUnimplementedAction = false;
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), (-1));
      assertEquals((-1), int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(1, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-2733));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main((String[]) null);
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean1);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax((-1), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean2 = PL_Interface_impl.getBoolean();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop StartFromTop StartFromTop monicaCall monicaCall bigMacCall 1TS", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "StartFromBottom";
      stringArray0[3] = "|#w~vM3{S]Q@";
      stringArray0[4] = " j";
      stringArray0[5] = "ph$Yns^^ij]@a";
      stringArray0[3] = "";
      PL_Interface_impl.actionHistory = null;
      stringArray0[7] = ";tyCne%";
      stringArray0[8] = "ElevatorSystem.Environment";
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = 0;
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      // Undeclared exception!
      try { 
        pL_Interface_impl0.randomSequenceOfActions(2414);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "StartFromBottom";
      stringArray0[3] = "|#w~vM3{S]Q@";
      stringArray0[4] = " j";
      stringArray0[5] = "ph$Yns^^ij]@a";
      stringArray0[3] = "";
      PL_Interface_impl.executedUnimplementedAction = false;
      PL_Interface_impl.actionHistory = null;
      stringArray0[7] = ";tyCne%";
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      stringArray0[8] = "ElevatorSystem.Environment";
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = 0;
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean1);
      
      int int1 = 21;
      // Undeclared exception!
      try { 
        pL_Interface_impl0.test(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start((-1), (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(185);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(185);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.executedUnimplementedAction = false;
      int int0 = PL_Interface_impl.getIntegerMinMax(185, 185);
      assertEquals(185, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(1, 185);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(23, list0.size());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.checkOnlySpecification(185);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-2733));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main((String[]) null);
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean1);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax((-1), (-1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean2 = PL_Interface_impl.getBoolean();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(29, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS StartFromBottom 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS StartFromTop StartFromTop angelinaCall chuckCall monicaCall monicaCall", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.test(5, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5";
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(6, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax((-1), (-7));
      assertFalse(int1 == int0);
      assertEquals((-2), int1);
      
      pL_Interface_impl0.start(370, 6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int2 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(23, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(23, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(23, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean1);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(string1.equals((Object)string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS bobCall StartFromTop aliceCall angelinaCall chuckCall monicaCall bigMacCall", string1);
      assertNotNull(string1);
      
      pL_Interface_impl0.test(6, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS bobCall StartFromTop aliceCall angelinaCall chuckCall monicaCall bigMacCall", string2);
      assertNotNull(string2);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS bobCall StartFromTop aliceCall angelinaCall chuckCall monicaCall bigMacCall", string3);
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.test((-823), 3454);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(6, 6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(6, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(27, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "StartFromBottom";
      stringArray0[2] = "{B*~?o+B$;Gl@@;";
      stringArray0[3] = "|#w~vM3{S]Q@";
      stringArray0[4] = " j";
      stringArray0[5] = "ph$Yns^^ij]@a";
      stringArray0[6] = "";
      PL_Interface_impl.actionHistory = null;
      stringArray0[7] = ";tyCne%";
      stringArray0[8] = "ElevatorSystem.Environment";
      PL_Interface_impl.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = 0;
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean1);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      // Undeclared exception!
      try { 
        pL_Interface_impl0.modifiedrandomSequenceOfActions(21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "StartFromBottom";
      stringArray0[2] = "{B*~?o+B$;Gl@@;";
      stringArray0[3] = "|#w~vM3{S]Q@";
      stringArray0[4] = " j";
      stringArray0[5] = "ph$Yns^^ij]@a";
      stringArray0[6] = "";
      PL_Interface_impl.actionHistory = null;
      stringArray0[7] = ";tyCne%";
      stringArray0[8] = "ElevatorSystem.Environment";
      PL_Interface_impl.main(stringArray0);
      assertEquals(9, stringArray0.length);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean1);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals("", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = 6;
      pL_Interface_impl0.randomSequenceOfActions(6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-193));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(6, 456);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-193));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list1 = null;
      // Undeclared exception!
      try { 
        PL_Interface_impl.listToString((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.start((-1), 6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-651), (-651));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax((-4185), (-4185));
      assertEquals((-4185), int0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1743);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-246), (-246));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(731);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(1638, 1638);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(20, list0.size());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      // Undeclared exception!
      pL_Interface_impl0.Specification3();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(967);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(U%5HL|";
      PL_Interface_impl.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals("", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(0, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(0, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), (-3057));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.test(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(1, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.checkOnlySpecification(364);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-1150), 5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop bobCall aliceCall angelinaCall chuckCall StartFromBottom bobCall aliceCall angelinaCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.test(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(1, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.checkOnlySpecification((-710));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-710));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax(3, 3);
      assertEquals(3, int0);
      
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      Environment environment0 = pL_Interface_impl0.env;
      assertNull(environment0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(3, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(3);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop StartFromTop angelinaCall chuckCall monicaCall", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.checkOnlySpecification(1019);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.checkOnlySpecification((-360));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-360), 2648);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(339);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-360), 3506);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(1, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      pL_Interface_impl0.randomSequenceOfActions(6);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[0];
      PL_Interface_impl.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      pL_Interface_impl0.start(1868, 1868);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-3));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax(1970, 1156);
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.randomSequenceOfActions((-1603));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-1704));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(3550, 3550);
      assertEquals(3550, int0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      
      pL_Interface_impl0.randomSequenceOfActions((-3546));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.executedUnimplementedAction = true;
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      
      PL_Interface_impl.executedUnimplementedAction = false;
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals("", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(0, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-4676), 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop StartFromTop StartFromTop", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(1, 1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = PL_Interface_impl.getBoolean();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(139, 139);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start((-611), (-611));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.checkOnlySpecification((-2152));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.main((String[]) null);
      int int0 = PL_Interface_impl.getIntegerMinMax(24, 24);
      assertEquals(24, int0);
      
      pL_Interface_impl0.randomSequenceOfActions((-2370));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(4, 4);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(4, 4);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list1.isEmpty());
      assertEquals(10, list1.size());
      assertSame(list1, list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list1);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(3291);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(15, 128);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(128);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list2 = PL_Interface_impl.actionHistory;
      assertFalse(list2.isEmpty());
      assertEquals(44, list2.size());
      assertSame(list2, list0);
      assertSame(list2, list1);
      assertNotNull(list2);
      
      pL_Interface_impl0.test(7, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-769), 7);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      Random.setNextRandom(1690);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start((-1), (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.executedUnimplementedAction = false;
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), (-1));
      assertEquals((-1), int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(14, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(1, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-2733));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main((String[]) null);
      boolean boolean1 = PL_Interface_impl.executedUnimplementedAction;
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax((-1), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean2 = PL_Interface_impl.getBoolean();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      pL_Interface_impl0.test(4, 4);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(4, 4);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list1.isEmpty());
      assertEquals(10, list1.size());
      assertSame(list1, list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list1);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(3291);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(15, 128);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(128);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list2 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(44, list2.size());
      assertFalse(list2.isEmpty());
      assertSame(list2, list0);
      assertSame(list2, list1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list2);
      
      pL_Interface_impl0.test(4, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-769), 4);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "StartFromBottom";
      stringArray0[3] = "|#w~vM3{S]Q@";
      stringArray0[4] = " j";
      stringArray0[5] = "ph$Yns^^ij]@a";
      stringArray0[3] = "";
      PL_Interface_impl.actionHistory = null;
      stringArray0[7] = ";tyCne%";
      stringArray0[3] = "ElevatorSystem.Environment";
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = 0;
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertEquals(0, stringArray1.length);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        pL_Interface_impl0.modifiedrandomSequenceOfActions(21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-1630));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      PL_Interface_impl pL_Interface_impl1 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl1.isAbortedRun());
      assertFalse(pL_Interface_impl1.equals((Object)pL_Interface_impl0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl1);
      
      List<String> list1 = pL_Interface_impl1.getExecutedActions();
      assertFalse(pL_Interface_impl1.isAbortedRun());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(pL_Interface_impl1, pL_Interface_impl0);
      assertSame(list1, list0);
      assertFalse(pL_Interface_impl1.equals((Object)pL_Interface_impl0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list1);
      
      String string0 = PL_Interface_impl.listToString(list1);
      assertFalse(pL_Interface_impl1.isAbortedRun());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotSame(pL_Interface_impl1, pL_Interface_impl0);
      assertSame(list1, list0);
      assertFalse(list1.contains(string0));
      assertFalse(pL_Interface_impl1.equals((Object)pL_Interface_impl0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[3];
      stringArray0[1] = "5";
      stringArray0[2] = "~K!2d8 P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(8, (-1));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(boolean0);
      
      pL_Interface_impl0.Specification13();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int1 = PL_Interface_impl.getIntegerMinMax((-1), (-7));
      assertFalse(int1 == int0);
      assertEquals((-2), int1);
      
      pL_Interface_impl0.start(11, (-1));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(370, 8);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int2 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertEquals(28, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list0.contains("~K!2d8 P"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      PL_Interface_impl.actionHistory = list0;
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertEquals(28, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(28, PL_Interface_impl.actionHistory.size());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(boolean1);
      
      pL_Interface_impl0.Specification14();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(string1.equals((Object)string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall", string1);
      assertNotNull(string1);
      
      pL_Interface_impl0.Specification2();
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(8, (-1));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall", string2);
      assertNotNull(string2);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall", string3);
      assertNotNull(string3);
      
      pL_Interface_impl0.randomSequenceOfActions((-2));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop bobCall", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(string1.equals((Object)string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop bobCall", string1);
      assertNotNull(string1);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(1, 1);
      assertEquals(1, int0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(1, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-1818), 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-620), 2183);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      PL_Interface_impl.getIntegerMinMax((-1), 1172);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-92));
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.test(1172, (-92));
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.randomSequenceOfActions(1172);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.start((-1), (-1));
      pL_Interface_impl0.modifiedrandomSequenceOfActions(185);
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.executedUnimplementedAction = false;
      PL_Interface_impl.getIntegerMinMax(185, 185);
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.checkOnlySpecification(185);
      pL_Interface_impl0.test((-1), 185);
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.env = null;
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.checkOnlySpecification(185);
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.randomSequenceOfActions((-2733));
      pL_Interface_impl0.Specification13();
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.getBoolean();
      PL_Interface_impl.listToString(list0);
      pL_Interface_impl0.test(5, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }
}
