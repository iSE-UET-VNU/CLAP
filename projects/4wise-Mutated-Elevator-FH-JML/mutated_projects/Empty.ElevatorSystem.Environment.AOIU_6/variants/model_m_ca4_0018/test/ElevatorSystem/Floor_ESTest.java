/*
 * This file was automatically generated by EvoSuite
 * Sun May 24 17:28:37 GMT 2020
 */

package ElevatorSystem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Elevator;
import ElevatorSystem.Environment;
import ElevatorSystem.Floor;
import ElevatorSystem.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Floor_ESTest extends Floor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Floor floor0 = new Floor(environment0, 0);
      assertFalse(floor0.hasCall());
      assertEquals(0, floor0.getFloorID());
      assertNotNull(floor0);
      
      floor0.reset();
      assertFalse(floor0.hasCall());
      assertEquals(0, floor0.getFloorID());
      
      floor0.addWaitingPerson((Person) null);
      assertTrue(floor0.hasCall());
      assertEquals(0, floor0.getFloorID());
      
      Elevator elevator0 = new Elevator(environment0, false, (-305), false);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals((-305), elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isIdle());
      assertNotNull(elevator0);
      
      // Undeclared exception!
      try { 
        floor0.processWaitingPersons(elevator0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Floor floor0 = new Floor(environment0, (-1008));
      assertFalse(floor0.hasCall());
      assertEquals((-1008), floor0.getFloorID());
      assertNotNull(floor0);
      
      floor0.callElevator();
      assertTrue(floor0.hasCall());
      assertEquals((-1008), floor0.getFloorID());
      
      floor0.reset();
      assertFalse(floor0.hasCall());
      assertEquals((-1008), floor0.getFloorID());
      
      int int0 = floor0.getFloorID();
      assertFalse(floor0.hasCall());
      assertEquals((-1008), floor0.getFloorID());
      assertEquals((-1008), int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Floor floor0 = new Floor(environment0, (-126));
      assertEquals((-126), floor0.getFloorID());
      assertFalse(floor0.hasCall());
      assertNotNull(floor0);
      
      boolean boolean0 = floor0.hasCall();
      assertEquals((-126), floor0.getFloorID());
      assertFalse(floor0.hasCall());
      assertFalse(boolean0);
      
      floor0.callElevator();
      assertEquals((-126), floor0.getFloorID());
      assertTrue(floor0.hasCall());
      
      boolean boolean1 = floor0.hasCall();
      assertEquals((-126), floor0.getFloorID());
      assertTrue(floor0.hasCall());
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      floor0.addWaitingPerson((Person) null);
      assertEquals((-126), floor0.getFloorID());
      assertTrue(floor0.hasCall());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Environment environment0 = new Environment(1356);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 1356);
      assertEquals(1356, floor0.getFloorID());
      assertFalse(floor0.hasCall());
      assertNotNull(floor0);
      
      floor0.reset();
      assertEquals(1356, floor0.getFloorID());
      assertFalse(floor0.hasCall());
      
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Floor floor1 = new Floor(environment0, 0);
      assertEquals(0, floor1.getFloorID());
      assertFalse(floor1.hasCall());
      assertFalse(floor1.equals((Object)floor0));
      assertNotNull(floor1);
      
      int int0 = floor1.getFloorID();
      assertEquals(0, floor1.getFloorID());
      assertFalse(floor1.hasCall());
      assertEquals(0, int0);
      assertNotSame(floor1, floor0);
      assertFalse(floor1.equals((Object)floor0));
      
      int int1 = floor0.getFloorID();
      assertEquals(1356, floor0.getFloorID());
      assertFalse(floor0.hasCall());
      assertEquals(1356, int1);
      assertNotSame(floor0, floor1);
      assertFalse(floor0.equals((Object)floor1));
      assertFalse(int1 == int0);
      
      int int2 = floor1.getFloorID();
      assertEquals(0, floor1.getFloorID());
      assertFalse(floor1.hasCall());
      assertEquals(0, int2);
      assertNotSame(floor1, floor0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean0 = floor1.hasCall();
      assertEquals(0, floor1.getFloorID());
      assertFalse(floor1.hasCall());
      assertFalse(boolean0);
      assertNotSame(floor1, floor0);
      assertFalse(floor1.equals((Object)floor0));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      environment0.floors = null;
      Floor floor0 = new Floor(environment0, 2618);
      assertEquals(2618, floor0.getFloorID());
      assertFalse(floor0.hasCall());
      assertNotNull(floor0);
      
      Person person0 = null;
      try {
        person0 = new Person("Elevator ", 0, 2618, 0, environment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Environment environment0 = null;
      try {
        environment0 = new Environment((-451));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 3535;
      Environment environment0 = new Environment(3535);
      Floor floor0 = environment0.getFloor(1);
      Floor[] floorArray0 = new Floor[9];
      floorArray0[0] = floor0;
      floorArray0[1] = floor0;
      floorArray0[2] = floor0;
      floorArray0[3] = floor0;
      floorArray0[4] = floor0;
      floorArray0[5] = floor0;
      floorArray0[6] = floor0;
      floor0.reset();
      floor0.callElevator();
      floorArray0[7] = floor0;
      floorArray0[8] = floor0;
      environment0.floors = floorArray0;
      floor0.getFloorID();
      floor0.reset();
      floor0.hasCall();
      Elevator elevator0 = new Elevator(environment0, false);
      floor0.processWaitingPersons(elevator0);
      floor0.callElevator();
      floor0.reset();
      Person person0 = new Person("up", 3535, 1, 1, environment0);
      floor0.addWaitingPerson(person0);
      // Undeclared exception!
      try { 
        floor0.processWaitingPersons((Elevator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Floor", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Environment environment0 = new Environment(1024);
      // Undeclared exception!
      try { 
        environment0.getFloor(1024);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1024
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Environment environment0 = new Environment(0);
      // Undeclared exception!
      try { 
        environment0.getFloor((-352));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -352
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 1;
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[2];
      Person person0 = null;
      try {
        person0 = new Person("", 1, 1, 1, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Environment environment0 = new Environment(0);
      int int0 = 0;
      Floor[] floorArray0 = new Floor[1];
      // Undeclared exception!
      try { 
        environment0.getFloor(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }
}
