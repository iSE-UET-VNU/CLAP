/*
 * This file was automatically generated by EvoSuite
 * Sun May 24 17:25:25 GMT 2020
 */

package ElevatorSystem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Elevator;
import ElevatorSystem.Environment;
import ElevatorSystem.Floor;
import ElevatorSystem.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elevator_ESTest extends Elevator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Elevator.Direction.values();
      Environment environment0 = new Environment(1862);
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator0.toString();
      boolean[] booleanArray0 = new boolean[9];
      Person person0 = new Person("Elevator [_] at 0 heading down", 1, 1733, 1, environment0);
      elevator0.leaveElevator(person0);
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[2] = true;
      elevator0.timeShift();
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      elevator0.floorButtons = booleanArray0;
      // Undeclared exception!
      try { 
        elevator0.enterElevator((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Environment environment0 = new Environment(4);
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      elevator0.floorButtons = booleanArray0;
      Person person0 = new Person((String) null, (-2252), 0, 4, environment0);
      person0.leaveElevator();
      elevator0.isIdle();
      person0.leaveElevator();
      elevator0.enterElevator(person0);
      elevator0.isExecutiveFloorCalling();
      elevator0.getEnv();
      elevator0.currentFloorID = (-2252);
      elevator0.getCurrentFloorID();
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("ElevatorSystem.Environment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.ElevatorSystem.Environment
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false);
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      elevator0.getCurrentFloorID();
      elevator0.areDoorsOpen();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Environment environment0 = new Environment(2580);
      Elevator elevator0 = new Elevator(environment0, false, 16, false);
      elevator0.timeShift();
      elevator0.getCurrentDirection();
      // Undeclared exception!
      elevator0.isExecutiveFloorCalling();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Environment environment0 = new Environment(786);
      Elevator elevator0 = new Elevator(environment0, true);
      Person person0 = new Person("", 38, 0, 767, environment0);
      elevator0.enterElevator(person0);
      Person person1 = new Person("wBmzlP", 786, 38, 1786, environment0);
      elevator0.leaveElevator(person1);
      elevator0.getEnv();
      elevator0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true);
      Floor[] floorArray0 = new Floor[7];
      Floor floor0 = new Floor(environment0, 2025);
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      Floor floor2 = new Floor(environment0, 4);
      floorArray0[2] = floor2;
      Floor floor3 = new Floor(environment0, 2025);
      floorArray0[3] = floor3;
      Floor floor4 = new Floor(environment0, 0);
      floorArray0[4] = floor4;
      Floor floor5 = new Floor(environment0, 2025);
      elevator0.toString();
      floorArray0[5] = floor5;
      Floor floor6 = new Floor(environment0, 0);
      floorArray0[6] = floor6;
      elevator0.verbose = true;
      environment0.floors = floorArray0;
      // Undeclared exception!
      try { 
        elevator0.isIdle();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Environment environment0 = new Environment(1403);
      Floor[] floorArray0 = new Floor[1];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.getCurrentDirection();
      // Undeclared exception!
      try { 
        elevator0.isExecutiveFloorCalling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[1];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, false);
      elevator0.env = environment0;
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Environment environment0 = new Environment(4);
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      elevator0.floorButtons = booleanArray0;
      Person person0 = new Person((String) null, (-2252), 0, 4, environment0);
      person0.leaveElevator();
      elevator0.isIdle();
      person0.leaveElevator();
      elevator0.enterElevator(person0);
      elevator0.isExecutiveFloorCalling();
      elevator0.getEnv();
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("ElevatorSystem.Environment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.ElevatorSystem.Environment
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Environment environment0 = new Environment(1737);
      Floor[] floorArray0 = new Floor[1];
      environment0.floors = floorArray0;
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      elevator0.isEmpty();
      Elevator.DoorState.values();
      environment0.floors = floorArray0;
      elevator0.getCurrentDirection();
      Person person0 = new Person("rZ@&kSv)jPYq", 1190, 0, 0, environment0);
      elevator0.enterElevator(person0);
      elevator0.isBlocked();
      elevator0.getCurrentFloorID();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Environment environment0 = new Environment(2558);
      Elevator elevator0 = new Elevator(environment0, true);
      Person person0 = new Person((String) null, 1, 4, 0, environment0);
      elevator0.enterElevator(person0);
      elevator0.getCurrentDirection();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Environment environment0 = new Environment(19);
      Elevator elevator0 = new Elevator(environment0, false, 19, false);
      environment0.floors = null;
      elevator0.executiveFloor = 19;
      elevator0.isEmpty();
      elevator0.weight = 19;
      environment0.floors = null;
      elevator0.pressInLiftFloorButton(0);
      elevator0.isExecutiveFloor(19);
      elevator0.getEnv();
      elevator0.isBlocked();
      environment0.floors = null;
      elevator0.isExecutiveFloor(0);
      elevator0.areDoorsOpen();
      elevator0.pressInLiftFloorButton(0);
      Elevator.Direction.values();
      elevator0.areDoorsOpen();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.weight = 0;
      Environment environment1 = new Environment(0);
      elevator0.env = environment1;
      elevator0.executiveFloor = 0;
      elevator0.isExecutiveFloor(0);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      elevator0.leaveElevator((Person) null);
      elevator0.toString();
      elevator0.getCurrentFloorID();
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator_Direction0.reverse();
      elevator0.getCurrentDirection();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 3487;
      Environment environment0 = new Environment(3487);
      Elevator elevator0 = new Elevator(environment0, true);
      // Undeclared exception!
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Environment environment0 = new Environment(845);
      Elevator elevator0 = new Elevator(environment0, false, 845, false);
      elevator0.buttonForFloorIsPressed(695);
      Elevator.DoorState.values();
      String string0 = "";
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = environment0.getFloor(0);
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 695);
      floorArray0[1] = floor1;
      // Undeclared exception!
      try { 
        environment0.getFloor(845);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 845
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Environment environment0 = new Environment(785);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(785);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 785
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 1127;
      Environment environment0 = new Environment(1127);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      Elevator.DoorState elevator_DoorState1 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState1;
      Elevator.DoorState elevator_DoorState2 = Elevator.DoorState.open;
      elevator0.toString();
      elevator0.doors = elevator_DoorState2;
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("Elevator []  at 0 heading up");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.Elevator []  at 0 heading up
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Environment environment0 = new Environment(559);
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      Person person0 = new Person("", 722, 1, 2728, environment0);
      // Undeclared exception!
      try { 
        elevator0.enterElevator(person0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2728
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Elevator.Direction.values();
      int int0 = 0;
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      floor0.reset();
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      elevator0.areDoorsOpen();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.areDoorsOpen();
      Elevator.DoorState.values();
      elevator0.floorButtons = null;
      elevator0.areDoorsOpen();
      // Undeclared exception!
      try { 
        elevator0.isIdle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Elevator.Direction.values();
      Environment environment0 = new Environment(1862);
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator0.toString();
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      elevator0.floorButtons = booleanArray0;
      // Undeclared exception!
      try { 
        elevator0.enterElevator((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Elevator.Direction.values();
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Environment environment0 = new Environment(1403);
      Elevator elevator0 = new Elevator(environment0, false);
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.getCurrentDirection();
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      elevator0.isExecutiveFloorCalling();
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 3391;
      Environment environment0 = new Environment(3391);
      Elevator elevator0 = new Elevator(environment0, true, 3391, false);
      // Undeclared exception!
      try { 
        elevator0.pressInLiftFloorButton(3391);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3391
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Environment environment0 = new Environment(2580);
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      Environment environment0 = new Environment(0);
      int int1 = 995;
      Elevator elevator0 = new Elevator(environment0, true, 995, false);
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.isIdle();
      elevator0.getCurrentFloorID();
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("e/3r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.e/3r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Environment environment0 = new Environment(513);
      Elevator elevator0 = new Elevator(environment0, true, 513, false);
      elevator0.getEnv();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.weight = 0;
      elevator0.executiveFloor = (-706);
      elevator0.isExecutiveFloor(0);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      elevator0.leaveElevator((Person) null);
      elevator0.toString();
      elevator0.getCurrentFloorID();
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator_Direction0.reverse();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Environment environment0 = null;
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator((Environment) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Environment environment0 = null;
      int int0 = 0;
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator((Environment) null, true, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, false);
      elevator0.env = environment0;
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Environment environment0 = new Environment(4);
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, (-1583));
      floorArray0[0] = floor0;
      floor0.callElevator();
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      floor1.callElevator();
      int int0 = 3774;
      Person person0 = new Person("u>*?I!n&QR=N", (-411), 0, 3774, environment0);
      floor1.addWaitingPerson(person0);
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.getCurrentFloorID();
      elevator0.toString();
      elevator0.timeShift();
      Elevator.Direction.values();
      elevator0.executiveFloor = (-411);
      elevator0.getEnv();
      elevator0.executiveFloor = (-1640);
      elevator0.leaveElevator(person0);
      elevator0.isBlocked();
      Elevator.DoorState.values();
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(2574);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2574
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Environment environment0 = new Environment(4);
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      booleanArray0[8] = false;
      elevator0.floorButtons = booleanArray0;
      Person person0 = new Person((String) null, (-2252), 0, 4, environment0);
      elevator0.isIdle();
      person0.leaveElevator();
      elevator0.enterElevator(person0);
      elevator0.isExecutiveFloorCalling();
      elevator0.getEnv();
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("ElevatorSystem.Environment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.ElevatorSystem.Environment
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Environment environment0 = new Environment(786);
      Elevator elevator0 = new Elevator(environment0, false);
      environment0.floors = null;
      Person person0 = null;
      try {
        person0 = new Person("wBmzlP", 786, 2, 1786, environment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Environment environment0 = new Environment(786);
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = new Person("wBmzlP", 786, 17, 1786, environment0);
      elevator0.leaveElevator(person0);
      elevator0.getEnv();
      elevator0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      elevator0.isIdle();
      elevator0.timeShift();
      environment0.floors = floorArray0;
      elevator0.isExecutiveFloorCalling();
      elevator0.isEmpty();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("MS%;=y%$twk^NZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.MS%;=y%$twk^NZ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[1];
      environment0.floors = floorArray0;
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      elevator0.isIdle();
      elevator0.timeShift();
      environment0.floors = floorArray0;
      elevator0.isExecutiveFloorCalling();
      elevator0.isEmpty();
      String string0 = "MS%;=y%$twk^NZ";
      Elevator.DoorState.values();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("MS%;=y%$twk^NZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.MS%;=y%$twk^NZ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, false);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 2);
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      Floor floor2 = new Floor(environment0, 0);
      floor2.hasCall();
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      elevator0.toString();
      elevator0.isExecutiveFloor(2);
      elevator0.isBlocked();
      elevator0.getCurrentDirection();
      elevator0.isBlocked();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      boolean boolean0 = false;
      int int0 = (-1);
      int int1 = 337;
      Environment environment0 = new Environment(1617);
      Floor[] floorArray0 = new Floor[7];
      // Undeclared exception!
      try { 
        environment0.getFloor((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Environment environment0 = new Environment(0);
      boolean boolean0 = false;
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = null;
      try {
        person0 = new Person("nS.]R4 bDLn]Wrw'pp+", 0, (-1), (-1940), environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Elevator.Direction.values();
      Environment environment0 = new Environment(1862);
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator0.toString();
      boolean[] booleanArray0 = new boolean[9];
      Person person0 = new Person("Elevator [_] at 0 heading up", 1, 1733, 1, environment0);
      elevator0.leaveElevator(person0);
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[2] = true;
      elevator0.timeShift();
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      elevator0.floorButtons = booleanArray0;
      // Undeclared exception!
      try { 
        elevator0.enterElevator((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false);
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(0, int0);
  }
}
