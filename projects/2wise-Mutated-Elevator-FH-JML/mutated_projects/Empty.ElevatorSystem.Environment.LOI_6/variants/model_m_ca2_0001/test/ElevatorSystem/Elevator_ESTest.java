/*
 * This file was automatically generated by EvoSuite
 * Wed May 13 19:23:34 GMT 2020
 */

package ElevatorSystem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Elevator;
import ElevatorSystem.Environment;
import ElevatorSystem.Floor;
import ElevatorSystem.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elevator_ESTest extends Elevator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Environment environment0 = new Environment(935);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.isBlocked();
      elevator0.currentFloorID = 771;
      Person person0 = new Person("", 3118, 771, 308, environment0);
      person0.leaveElevator();
      person0.leaveElevator();
      person0.leaveElevator();
      elevator0.isIdle();
      elevator0.leaveElevator(person0);
      elevator0.areDoorsOpen();
      elevator0.enterElevator(person0);
      elevator0.isEmpty();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Environment environment0 = new Environment(935);
      Elevator elevator0 = new Elevator(environment0, true, 935, true);
      elevator0.isBlocked();
      elevator0.currentFloorID = 771;
      Person person0 = new Person("", 3118, 771, 308, environment0);
      person0.leaveElevator();
      person0.leaveElevator();
      person0.leaveElevator();
      elevator0.isIdle();
      elevator0.leaveElevator(person0);
      elevator0.areDoorsOpen();
      elevator0.enterElevator(person0);
      elevator0.isEmpty();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      elevator0.timeShift();
      elevator0.getEnv();
      elevator0.getCurrentDirection();
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf(",o>|C}mJ4v~2?3tH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.,o>|C}mJ4v~2?3tH
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Environment environment0 = new Environment(352);
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = new Person("", 352, 0, 1, environment0);
      person0.leaveElevator();
      person0.leaveElevator();
      person0.leaveElevator();
      elevator0.leaveElevator(person0);
      elevator0.toString();
      elevator0.isIdle();
      elevator0.timeShift();
      elevator0.toString();
      elevator0.timeShift();
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("Ag:][EZ_;^bfn]2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.Ag:][EZ_;^bfn]2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.toString();
      elevator0.timeShift();
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      environment0.floors = null;
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, (-1));
      floorArray0[0] = floor0;
      Elevator.Direction.values();
      Floor floor1 = new Floor(environment0, 0);
      boolean[] booleanArray0 = new boolean[3];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      elevator0.floorButtons = booleanArray0;
      floorArray0[1] = floor1;
      elevator0.buttonForFloorIsPressed(1);
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed((-2436));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2436
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, true);
      Person person0 = new Person("p", 344, 0, 14, environment0);
      elevator0.enterElevator(person0);
      elevator0.toString();
      elevator0.isIdle();
      elevator0.timeShift();
      elevator0.toString();
      elevator0.timeShift();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator_Direction0.reverse();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      environment0.floors = floorArray0;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      elevator0.floorButtons = booleanArray0;
      elevator0.pressInLiftFloorButton(1);
      elevator0.pressInLiftFloorButton(1);
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator_Direction0.reverse();
      // Undeclared exception!
      try { 
        elevator0.isIdle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, true);
      Person person0 = new Person("p", 344, 0, 1, environment0);
      elevator0.enterElevator(person0);
      elevator0.leaveElevator(person0);
      elevator0.toString();
      elevator0.isIdle();
      elevator0.timeShift();
      elevator0.toString();
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.toString();
      elevator0.timeShift();
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      environment0.floors = null;
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, (-1));
      floor0.callElevator();
      floorArray0[0] = floor0;
      Elevator.Direction.values();
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      elevator0.doors = elevator_DoorState0;
      elevator0.toString();
      elevator0.timeShift();
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator0.timeShift();
      Elevator.Direction.values();
      elevator_Direction0.reverse();
      elevator0.isEmpty();
      elevator0.timeShift();
      elevator0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.toString();
      elevator0.timeShift();
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      elevator0.floorButtons = booleanArray0;
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      environment0.floors = null;
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, (-1));
      floorArray0[0] = floor0;
      Elevator.Direction.values();
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      elevator0.doors = elevator_DoorState0;
      elevator0.toString();
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, true);
      Person person0 = new Person("p", 344, 0, 1, environment0);
      elevator0.leaveElevator(person0);
      elevator0.toString();
      elevator0.isIdle();
      elevator0.timeShift();
      elevator0.toString();
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Environment environment0 = new Environment(935);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.isBlocked();
      elevator0.currentFloorID = 771;
      Person person0 = new Person("", 3118, 771, 308, environment0);
      person0.leaveElevator();
      person0.leaveElevator();
      person0.leaveElevator();
      elevator0.isIdle();
      elevator0.leaveElevator(person0);
      elevator0.areDoorsOpen();
      elevator0.enterElevator(person0);
      elevator0.isEmpty();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.toString();
      elevator0.timeShift();
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      environment0.floors = null;
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, 2147483645);
      floorArray0[0] = floor0;
      Elevator.Direction.values();
      Floor floor1 = new Floor(environment0, 0);
      floor1.callElevator();
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      elevator0.doors = elevator_DoorState0;
      elevator0.toString();
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 0;
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true);
      String string0 = "[Ei1S$WwE%5nRQU)";
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      // Undeclared exception!
      try { 
        elevator0.isIdle();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, true);
      Floor[] floorArray0 = new Floor[1];
      Environment environment1 = new Environment(344);
      Floor floor0 = new Floor(environment1, 344);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      elevator0.toString();
      elevator0.timeShift();
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      Elevator.Direction.values();
      elevator0.doors = elevator_DoorState0;
      elevator0.toString();
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 390;
      Environment environment0 = new Environment(390);
      int int1 = 0;
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      elevator0.timeShift();
      elevator0.toString();
      elevator0.getCurrentDirection();
      Floor[] floorArray0 = new Floor[9];
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[1] = floor0;
      // Undeclared exception!
      try { 
        environment0.getFloor((-3564));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3564
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 390;
      Environment environment0 = new Environment(390);
      int int1 = 25;
      Elevator elevator0 = new Elevator(environment0, true, 25, true);
      elevator0.timeShift();
      elevator0.toString();
      elevator0.getCurrentDirection();
      Floor[] floorArray0 = new Floor[9];
      int int2 = (-3551);
      // Undeclared exception!
      try { 
        environment0.getFloor((-3551));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3551
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Floor[] floorArray0 = new Floor[9];
      Environment environment0 = new Environment(1260);
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      // Undeclared exception!
      try { 
        elevator0.enterElevator((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, true);
      Floor[] floorArray0 = null;
      environment0.floors = null;
      elevator0.toString();
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Floor[] floorArray0 = new Floor[8];
      Environment environment0 = new Environment(444);
      Elevator elevator0 = new Elevator(environment0, false, (-1), false);
      elevator0.getCurrentFloorID();
      elevator0.getCurrentFloorID();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.toString();
      elevator0.timeShift();
      elevator0.toString();
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Environment environment0 = new Environment(1135);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.timeShift();
      Person person0 = new Person("*!mN#ZK0d^(&(93{R", 1, 1, 0, environment0);
      elevator0.leaveElevator(person0);
      elevator0.getCurrentFloorID();
      elevator0.getEnv();
      elevator0.getCurrentFloorID();
      elevator0.isBlocked();
      Person person1 = null;
      try {
        person1 = new Person("", 0, (-1), (-2483), environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Elevator.Direction.values();
      Environment environment0 = new Environment(2671);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.toString();
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      elevator0.verbose = false;
      elevator0.verbose = false;
      environment0.floors = floorArray0;
      elevator0.buttonForFloorIsPressed(0);
      elevator0.areDoorsOpen();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      elevator_Direction0.reverse();
      environment0.floors = floorArray0;
      elevator_Direction0.reverse();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("Elevator [_] at 0 heading up");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.Elevator [_] at 0 heading up
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, true);
      int int0 = 0;
      elevator0.toString();
      Person person0 = new Person("", 1, 0, 1, environment0);
      person0.leaveElevator();
      person0.leaveElevator();
      person0.leaveElevator();
      person0.leaveElevator();
      person0.leaveElevator();
      // Undeclared exception!
      try { 
        elevator0.enterElevator(person0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 390;
      Environment environment0 = new Environment(390);
      int int1 = 0;
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      elevator0.timeShift();
      elevator0.toString();
      elevator0.getCurrentDirection();
      Floor[] floorArray0 = new Floor[9];
      int int2 = (-3551);
      // Undeclared exception!
      try { 
        environment0.getFloor((-3551));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3551
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 1390;
      Environment environment0 = new Environment(1390);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.timeShift();
      elevator0.areDoorsOpen();
      String string0 = "_TBS{>";
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("_TBS{>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction._TBS{>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1995;
      Environment environment0 = new Environment(1995);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.isBlocked();
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1995);
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, (-3982));
      floorArray0[1] = floor1;
      Floor floor2 = environment0.getFloor(1);
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      Floor[] floorArray1 = new Floor[0];
      environment0.floors = floorArray1;
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("k?3{v6M3-bO'khr_H");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.k?3{v6M3-bO'khr_H
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Environment environment0 = new Environment(186);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.getCurrentFloorID();
      elevator0.timeShift();
      elevator0.buttonForFloorIsPressed(0);
      elevator0.areDoorsOpen();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Environment environment0 = new Environment(2868);
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 2868);
      floorArray0[0] = floor0;
      floor0.callElevator();
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      elevator0.isIdle();
      elevator0.doors = elevator_DoorState0;
      elevator0.getCurrentDirection();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("ElevatorSystem.Environment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.ElevatorSystem.Environment
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 4667;
      Environment environment0 = new Environment(4667);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.areDoorsOpen();
      elevator0.timeShift();
      int int1 = (-516);
      // Undeclared exception!
      try { 
        elevator0.pressInLiftFloorButton((-516));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -516
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      environment0.floors = null;
      elevator0.toString();
      elevator0.getCurrentDirection();
      Person person0 = null;
      try {
        person0 = new Person("a{rs]BI\"X=", 0, 0, 0, environment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.toString();
      Elevator.Direction.values();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator_Direction0.reverse();
      elevator_Direction0.reverse();
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      elevator_Direction1.reverse();
      elevator_Direction1.reverse();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      elevator0.floorButtons = booleanArray0;
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      elevator0.doors = elevator_DoorState0;
      elevator0.pressInLiftFloorButton(1);
      elevator0.pressInLiftFloorButton(1);
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator_Direction0.reverse();
      elevator0.isIdle();
      elevator0.areDoorsOpen();
      elevator0.getCurrentFloorID();
      elevator0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      elevator0.isIdle();
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false, 509, false);
      elevator0.isIdle();
      Environment environment1 = new Environment(3099);
      Person person0 = new Person("ElevatorSystem.Person", 509, 0, 353, environment1);
      elevator0.leaveElevator(person0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Environment environment0 = new Environment(4053);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.getCurrentFloorID();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      elevator0.floorButtons = booleanArray0;
      elevator0.pressInLiftFloorButton(0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Environment environment0 = new Environment(775);
      Elevator elevator0 = new Elevator(environment0, false);
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(775);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 775
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Environment environment0 = new Environment(2972);
      Floor[] floorArray0 = null;
      environment0.floors = null;
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator(environment0, true, 2972, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Environment environment0 = new Environment(1389);
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, false);
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator_Direction0.reverse();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.getEnv();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Environment environment0 = new Environment(1329);
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      elevator0.areDoorsOpen();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 2306;
      Environment environment0 = new Environment(2306);
      Floor[] floorArray0 = null;
      environment0.floors = null;
      environment0.floors = null;
      environment0.floors = null;
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator(environment0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Environment environment0 = new Environment(380);
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = new Person("", 380, 5, 1, environment0);
      person0.leaveElevator();
      person0.leaveElevator();
      elevator0.leaveElevator(person0);
      elevator0.toString();
      elevator0.isIdle();
      elevator0.timeShift();
      elevator0.toString();
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("<DRg7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.<DRg7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.toString();
      elevator0.timeShift();
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      environment0.floors = null;
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, (-1));
      floorArray0[0] = floor0;
      Elevator.Direction.values();
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      elevator0.doors = elevator_DoorState0;
      elevator0.toString();
      elevator0.timeShift();
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator0.timeShift();
      Elevator.Direction.values();
      elevator_Direction0.reverse();
      elevator0.isEmpty();
      elevator0.timeShift();
      elevator0.isEmpty();
      elevator0.isBlocked();
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      Floor[] floorArray1 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      floorArray1[0] = floor0;
      environment0.floors = floorArray1;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      elevator0.floorButtons = booleanArray0;
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      elevator0.pressInLiftFloorButton(1);
      elevator0.pressInLiftFloorButton(1);
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator0.isIdle();
      elevator0.areDoorsOpen();
      elevator0.getCurrentFloorID();
      elevator0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Environment environment0 = new Environment(352);
      Elevator elevator0 = new Elevator(environment0, true);
      Person person0 = new Person("", 352, 0, 1, environment0);
      person0.leaveElevator();
      person0.leaveElevator();
      person0.leaveElevator();
      elevator0.leaveElevator(person0);
      elevator0.toString();
      elevator0.isIdle();
      elevator0.timeShift();
      elevator0.toString();
      elevator0.timeShift();
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Environment environment0 = new Environment(344);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.timeShift();
      Person person0 = new Person("p", 344, 0, 1, environment0);
      person0.leaveElevator();
      elevator0.leaveElevator(person0);
      elevator0.toString();
      elevator0.isIdle();
      elevator0.timeShift();
      elevator0.toString();
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      elevator_Direction1.reverse();
      elevator_Direction1.reverse();
      int int0 = (-1935);
      Environment environment0 = null;
      try {
        environment0 = new Environment((-1935));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Elevator.Direction.values();
      Elevator.DoorState.values();
      Elevator.DoorState.values();
      Environment environment0 = new Environment(2001);
      Elevator elevator0 = new Elevator(environment0, true, (-113), false);
      String string0 = elevator0.toString();
      assertEquals("Elevator [_] at -113 heading down", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("_TBS{>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction._TBS{>
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Environment environment0 = new Environment(935);
      Elevator elevator0 = new Elevator(environment0, false, 935, false);
      elevator0.isBlocked();
      elevator0.currentFloorID = 771;
      Person person0 = new Person("", 3118, 771, 308, environment0);
      person0.leaveElevator();
      person0.leaveElevator();
      person0.leaveElevator();
      elevator0.isIdle();
      elevator0.leaveElevator(person0);
      elevator0.areDoorsOpen();
      person0.leaveElevator();
      elevator0.enterElevator(person0);
      elevator0.isEmpty();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      elevator0.timeShift();
      elevator0.getEnv();
      elevator0.getCurrentDirection();
      Elevator.Direction.values();
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf(",o>|C}mJ4v~2?3tH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.,o>|C}mJ4v~2?3tH
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
