/*
 * This file was automatically generated by EvoSuite
 * Tue May 05 20:00:39 GMT 2020
 */


import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Environment;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PL_Interface_impl_ESTest extends PL_Interface_impl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(24, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(370, 24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 8);
      assertEquals(0, int0);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list0.contains(string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(44, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(44, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(44, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall", string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(string1.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall", string2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string2);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(10, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list1.contains(string3));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(list1.isEmpty());
      assertEquals(64, list1.size());
      assertNotNull(list1);
      assertSame(list1, list0);
      
      List<String> list2 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list2.contains(string3));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(list2.isEmpty());
      assertEquals(64, list2.size());
      assertNotNull(list2);
      assertSame(list2, list0);
      assertSame(list2, list1);
      
      pL_Interface_impl0.test(2803, (-3496));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(8, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[3];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = PL_Interface_impl.listToString(linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(14);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(14, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(14);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall StartFromBottom bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall", string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(string1.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(370, 14);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(14);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall StartFromBottom bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall", string2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string2);
      
      String string3 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall StartFromBottom bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall StartFromTop chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall", string3);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string3);
      
      pL_Interface_impl0.test(0, 14);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list0.contains(string1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(65, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@WM60RB-q";
      stringArray0[1] = " entered the Elevator at Landing ";
      stringArray0[2] = "7|#aw%].r>:/";
      stringArray0[3] = "HAg";
      stringArray0[4] = "uR|)OFC\"eB&]j ";
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      stringArray0[5] = "";
      PL_Interface_impl.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      pL_Interface_impl0.randomSequenceOfActions((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-2499));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(6, stringArray0.length);
      
      pL_Interface_impl0.test(12, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5";
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(24, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(370, 24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 8);
      assertEquals(6, int0);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list0.contains("no Exception"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(70, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(list0);
      
      PL_Interface_impl.actionHistory = list0;
      assertEquals(70, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(70, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(string1.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string2);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string3);
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1325));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(6, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list1.contains("5"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(91, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      assertSame(list1, list0);
      
      List<String> list2 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list2.contains("5"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(91, list2.size());
      assertFalse(list2.isEmpty());
      assertNotNull(list2);
      assertSame(list2, list0);
      assertSame(list2, list1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5";
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(24, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(370, 24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 8);
      assertEquals(6, int0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(70, PL_Interface_impl.actionHistory.size());
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(string1.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string2);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string3);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1325));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(10, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list0.contains(string2));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertEquals(91, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list1.contains(string2));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(list1.isEmpty());
      assertEquals(91, list1.size());
      assertNotNull(list1);
      assertSame(list1, list0);
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertTrue(boolean1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean1 == boolean0);
      assertTrue(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[1];
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      stringArray0[0] = "7izA<&i*&yI% $";
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      int int0 = 22;
      pL_Interface_impl0.test(22, 22);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list0.contains("7izA<&i*&yI% $"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(10, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      PL_Interface_impl.executedUnimplementedAction = false;
      PL_Interface_impl.actionHistory = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = (-2462);
      // Undeclared exception!
      try { 
        pL_Interface_impl0.modifiedrandomSequenceOfActions((-2462));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.actionHistory = null;
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = 7;
      int int1 = (-1659);
      // Undeclared exception!
      try { 
        pL_Interface_impl0.test((-1659), 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      
      PL_Interface_impl.executedUnimplementedAction = false;
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals("", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(13, 13);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(13, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(199);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5";
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(24, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(370, 24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list0.contains("5"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(69, list0.size());
      assertNotNull(list0);
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(69, list0.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(69, PL_Interface_impl.actionHistory.size());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(boolean1 == boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(string1.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      
      pL_Interface_impl0.test(24, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string2);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertNotNull(string3);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1325));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(10, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list1.contains("5"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(list1.isEmpty());
      assertEquals(90, list1.size());
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5";
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(9);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(9, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(9);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(370, 9);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list0.contains("no Exception"));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(29, list0.size());
      assertNotNull(list0);
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(29, list0.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(29, PL_Interface_impl.actionHistory.size());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(boolean1 == boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(9);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall StartFromBottom 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall", string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(string1.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      
      pL_Interface_impl0.test(9, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall StartFromBottom 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall", string2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string2);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall StartFromBottom 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall", string3);
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start(544, 544);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = null;
      PL_Interface_impl.actionHistory = null;
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = null;
      int int0 = 535;
      // Undeclared exception!
      try { 
        pL_Interface_impl0.randomSequenceOfActions(535);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(list0.contains(string0));
      assertEquals("", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = 6;
      pL_Interface_impl0.randomSequenceOfActions(6);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-193));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(6, 456);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-193));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list1 = null;
      // Undeclared exception!
      try { 
        PL_Interface_impl.listToString((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.start((-1), 6);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-651), (-651));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax((-4185), (-4185));
      assertEquals((-4185), int0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1743);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-246), (-246));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(731);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(1638, 1638);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(20, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.Specification3();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(967);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(U%5HL|";
      PL_Interface_impl.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals("", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(0, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(0, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), (-3057));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(list0.contains(string0));
      assertEquals("", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.test(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(1, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.checkOnlySpecification(364);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start((-1150), 5);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop bobCall aliceCall angelinaCall chuckCall StartFromBottom bobCall aliceCall angelinaCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.test(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(1, PL_Interface_impl.actionHistory.size());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-710));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax(3, 3);
      assertEquals(3, int0);
      
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      Environment environment0 = pL_Interface_impl0.env;
      assertNull(environment0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(3, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(3);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop StartFromTop angelinaCall chuckCall monicaCall", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.checkOnlySpecification(1019);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.checkOnlySpecification((-360));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-360), 2648);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(339);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start((-360), 3506);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(1, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.randomSequenceOfActions(6);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[0];
      PL_Interface_impl.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      pL_Interface_impl0.start(1868, 1868);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-3));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax(1970, 1156);
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.randomSequenceOfActions((-2460));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-1704));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(3550, 3550);
      assertEquals(3550, int0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-3546));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.executedUnimplementedAction = true;
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertTrue(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      
      PL_Interface_impl.executedUnimplementedAction = false;
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals("", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(0, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start((-4676), 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(list0.contains(string0));
      assertEquals(" StartFromTop StartFromTop StartFromTop", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(1, 1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean1 = PL_Interface_impl.getBoolean();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(139, 139);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start((-611), (-611));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.checkOnlySpecification((-2152));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.main((String[]) null);
      int int0 = PL_Interface_impl.getIntegerMinMax(24, 24);
      assertEquals(24, int0);
      
      pL_Interface_impl0.randomSequenceOfActions((-2370));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      linkedList0.addLast("5bOJEDea");
      assertTrue(linkedList0.contains("5bOJEDea"));
      assertEquals(1, linkedList0.size());
      
      String string0 = PL_Interface_impl.listToString(linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertTrue(linkedList0.contains("5bOJEDea"));
      assertEquals(" 5bOJEDea", string0);
      assertEquals(1, linkedList0.size());
      assertNotNull(string0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(4);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(4, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(4);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[3];
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = PL_Interface_impl.listToString(linkedList0);
      assertFalse(linkedList0.contains(string0));
      assertEquals("", string0);
      assertEquals(0, linkedList0.size());
      assertNotNull(string0);
      
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(2, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall StartFromBottom monicaCall", string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(string1.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(370, 2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall StartFromBottom monicaCall StartFromBottom 3TS bobCall StartFromTop aliceCall", string2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string2);
      
      String string3 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall StartFromBottom monicaCall StartFromBottom 3TS bobCall StartFromTop aliceCall", string3);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string3);
      
      pL_Interface_impl0.test(0, 2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String[] stringArray0 = new String[0];
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(12, 502);
      assertEquals(12, int0);
      
      pL_Interface_impl0.start(12, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(483);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = PL_Interface_impl.executedUnimplementedAction;
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      String string1 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertEquals(" StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list0.contains(string1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(38, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(boolean1 == boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(12);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(12);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(483);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(483, 502);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list1.contains(string1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list1.isEmpty());
      assertEquals(128, list1.size());
      assertNotNull(list1);
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.executedUnimplementedAction = false;
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals("", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.start(1, 1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(1, 1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(1, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(199);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.executedUnimplementedAction = false;
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals("", string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(8, 8);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(8, 8);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(8, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(189);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      PL_Interface_impl.listToString(linkedList0);
      pL_Interface_impl0.modifiedrandomSequenceOfActions(9);
      pL_Interface_impl0.start(9, (-1));
      pL_Interface_impl0.modifiedrandomSequenceOfActions(9);
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.start(0, 9);
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.start(24, (-1));
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      pL_Interface_impl0.checkOnlySpecification((-1));
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.start(8, 24);
      PL_Interface_impl.getIntegerMinMax(8, 8);
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      PL_Interface_impl.actionHistory = list0;
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      pL_Interface_impl0.test(10, (-1));
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.getExecutedActions();
      assertTrue(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.randomSequenceOfActions(1);
      String[] stringArray0 = new String[5];
      pL_Interface_impl0.test(2453, (-1659));
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1659));
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1659));
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.test((-1659), (-1659));
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      PL_Interface_impl pL_Interface_impl1 = new PL_Interface_impl();
      pL_Interface_impl1.Specification2();
      pL_Interface_impl1.getExecutedActions();
      pL_Interface_impl0.start(0, (-7));
      pL_Interface_impl0.Specification14();
      pL_Interface_impl1.Specification2();
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
  }
}
