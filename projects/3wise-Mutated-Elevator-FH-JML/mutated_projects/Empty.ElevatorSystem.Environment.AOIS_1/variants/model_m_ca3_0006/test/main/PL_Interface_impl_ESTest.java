/*
 * This file was automatically generated by EvoSuite
 * Sat May 09 18:33:08 GMT 2020
 */

package main;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Environment;
import java.util.List;
import main.PL_Interface_impl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PL_Interface_impl_ESTest extends PL_Interface_impl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      Environment environment0 = pL_Interface_impl0.env;
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = 302;
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(302, 302);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.Specification1();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "M8H";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "main.PL_Interface_impl";
      PL_Interface_impl.main(stringArray0);
      assertEquals(4, stringArray0.length);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(4, stringArray0.length);
      
      // Undeclared exception!
      try { 
        PL_Interface_impl.listToString((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PL_Interface_impl.main((String[]) null);
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = 517;
      pL_Interface_impl0.test(517, 517);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = PL_Interface_impl.getIntegerMinMax(24, 24);
      assertEquals(24, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      pL_Interface_impl0.Specification2();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(24, 24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall", string0);
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.Specification13();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-3487));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-3487), (-3487));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertNotNull(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 1120);
      assertEquals(336, int0);
      
      boolean boolean2 = PL_Interface_impl.getBoolean();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = PL_Interface_impl.getIntegerMinMax((-3487), 0);
      assertEquals((-1743), int1);
      assertFalse(int1 == int0);
      
      int int2 = 1505;
      pL_Interface_impl0.start(1505, 159);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-3487));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.Specification14();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertNotNull(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-1), (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      
      PL_Interface_impl.executedUnimplementedAction = false;
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = 24;
      pL_Interface_impl0.start(0, 24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      assertNotNull(list1);
      assertSame(list1, list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(25, list1.size());
      assertFalse(list1.isEmpty());
      
      int int1 = 716;
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int2 = PL_Interface_impl.getIntegerMinMax(716, 716);
      assertEquals(716, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean1 = PL_Interface_impl.getBoolean();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int3 = PL_Interface_impl.getIntegerMinMax(0, 716);
      assertEquals(501, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      pL_Interface_impl0.test(0, 24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.Specification3();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      int int0 = 0;
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = (-987);
      pL_Interface_impl0.test(5, (-987));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int2 = 1;
      pL_Interface_impl0.test((-987), 1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(574);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      pL_Interface_impl0.test(0, 574);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-246), (-246));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(731);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      Environment environment0 = null;
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(1638, 1638);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      stringArray0[1] = "r_hD_gi|d8S";
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop", string0);
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      stringArray0[2] = "l':WdOLj#4c&_g,=";
      stringArray0[3] = "lSZ#0";
      stringArray0[4] = "";
      stringArray0[5] = "";
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      stringArray0[6] = "ElevatorSystem.Environment";
      stringArray0[7] = "jld%wIqW*MX";
      PL_Interface_impl.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.modifiedrandomSequenceOfActions(2395);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      Environment environment0 = new Environment(1780);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      
      pL_Interface_impl0.randomSequenceOfActions(170);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertFalse(PL_Interface_impl.actionHistory.contains(string0));
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(171, PL_Interface_impl.actionHistory.size());
      
      // Undeclared exception!
      pL_Interface_impl0.Specification9();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, (-370));
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertNotNull(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "";
      stringArray0[2] = "ElevatorSystem.Floor";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "F;;wTH";
      stringArray0[7] = "_GlAs}DId~^Dfu>";
      PL_Interface_impl.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      pL_Interface_impl0.randomSequenceOfActions(1505);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5";
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(24, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall", string0);
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(370, 24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list0.contains("~K!2d8>P"));
      assertNotNull(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(69, list0.size());
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(69, list0.size());
      assertEquals(69, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string1);
      assertNotNull(string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(string1.equals((Object)string0));
      
      pL_Interface_impl0.test(24, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string2);
      assertNotNull(string2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall StartFromTop chuckCall monicaCall monicaCall bigMacCall StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall StartFromTop angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall StartFromBottom bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall", string3);
      assertNotNull(string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = 0;
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = 666;
      Environment environment0 = pL_Interface_impl0.env;
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(0, 666);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.start((-1), 6);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-651), (-651));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax((-4185), (-4185));
      assertEquals((-4185), int0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1743);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = 0;
      pL_Interface_impl0.test(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = null;
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray0 = new String[1];
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      stringArray0[0] = ".Nn/n^Zec";
      PL_Interface_impl.main(stringArray0);
      assertEquals(1, stringArray0.length);
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      try { 
        pL_Interface_impl0.start(0, (-591));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertNotNull(pL_Interface_impl0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop bobCall", string0);
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop bobCall", string1);
      assertNotNull(string1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(string1.equals((Object)string0));
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-4));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax((-4), (-4));
      assertEquals((-4), int0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(3, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start((-1818), 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.test((-620), 2183);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      PL_Interface_impl.getIntegerMinMax((-1), (-148));
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), 1172);
      assertEquals(116, int0);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-92));
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.test(1172, (-92));
      boolean boolean0 = PL_Interface_impl.getBoolean();
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      boolean boolean1 = PL_Interface_impl.getBoolean();
      assertFalse(boolean1 == boolean0);
      
      pL_Interface_impl0.env = null;
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification3();
      String[] stringArray0 = new String[0];
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      PL_Interface_impl.main(stringArray0);
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.getExecutedActions();
      PL_Interface_impl.main(stringArray0);
      PL_Interface_impl.main(stringArray0);
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertEquals(18, list0.size());
      assertFalse(list0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.start((-1), (-1));
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      pL_Interface_impl0.checkOnlySpecification((-1));
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.executedUnimplementedAction = false;
      PL_Interface_impl.getIntegerMinMax((-1), (-1));
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.checkOnlySpecification(1);
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.test(1, (-1));
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.randomSequenceOfActions(30);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.env = null;
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.checkOnlySpecification((-1));
      // Undeclared exception!
      pL_Interface_impl0.Specification9();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification9();
      PL_Interface_impl.executedUnimplementedAction = true;
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.start(0, (-1444));
      PL_Interface_impl.getBoolean();
      PL_Interface_impl.getIntegerMinMax((-1444), (-1444));
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.Specification14();
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      Environment environment0 = pL_Interface_impl0.env;
      pL_Interface_impl0.env = environment0;
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.checkOnlySpecification(0);
      pL_Interface_impl0.checkOnlySpecification((-1413));
      pL_Interface_impl0.Specification3();
      PL_Interface_impl.getIntegerMinMax((-2624), 6);
      pL_Interface_impl0.Specification13();
      PL_Interface_impl.listToString(list0);
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertTrue(boolean0);
      
      pL_Interface_impl0.isAbortedRun();
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      String string0 = PL_Interface_impl.listToString(list1);
      assertEquals(" StartFromTop", string0);
      
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification3();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.Specification2();
      int int0 = PL_Interface_impl.getIntegerMinMax(1, 194);
      assertEquals(136, int0);
  }
}
