/*
 * This file was automatically generated by EvoSuite
 * Tue May 05 20:27:51 GMT 2020
 */

package ElevatorSystem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Elevator;
import ElevatorSystem.Environment;
import ElevatorSystem.Floor;
import ElevatorSystem.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elevator_ESTest extends Elevator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.env = environment0;
      elevator0.timeShift();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.timeShift();
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.weight = 100;
      elevator0.env = environment0;
      elevator0.timeShift();
      elevator0.timeShift();
      elevator0.timeShift();
      elevator0.toString();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      floor1.reset();
      Floor floor2 = new Floor(environment0, 0);
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.env = environment0;
      elevator0.isIdle();
      floor1.reset();
      Elevator.DoorState.values();
      floor1.processWaitingPersons(elevator0);
      elevator0.getEnv();
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      elevator0.getCurrentFloorID();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.weight = 0;
      Elevator.Direction.values();
      floor1.callElevator();
      elevator0.areDoorsOpen();
      floor0.callElevator();
      elevator0.isBlocked();
      elevator0.timeShift();
      elevator0.buttonForFloorIsPressed(2);
      Elevator.DoorState.values();
      elevator0.isBlocked();
      elevator0.timeShift();
      Person person0 = null;
      try {
        person0 = new Person("w]w/3h", (-1156), (-269), (-1435), environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(370);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.weight = 370;
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      elevator0.doors = elevator_DoorState0;
      elevator0.timeShift();
      environment0.floors = floorArray0;
      elevator0.isBlocked();
      Elevator.Direction elevator_Direction0 = elevator0.getCurrentDirection();
      elevator_Direction0.reverse();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, true);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      elevator0.floorButtons = booleanArray0;
      boolean[] booleanArray1 = new boolean[2];
      booleanArray1[0] = true;
      booleanArray1[1] = true;
      elevator0.floorButtons = booleanArray1;
      elevator0.timeShift();
      elevator0.timeShift();
      Elevator.Direction.values();
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, true);
      boolean[] booleanArray0 = new boolean[7];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      elevator0.floorButtons = booleanArray0;
      elevator0.timeShift();
      elevator0.timeShift();
      Elevator.Direction.values();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Environment environment0 = new Environment(337);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.timeShift();
      elevator0.getCurrentDirection();
      Person person0 = new Person((String) null, 337, 324, 324, environment0);
      person0.leaveElevator();
      elevator0.leaveElevator(person0);
      elevator0.isEmpty();
      elevator0.toString();
      int int0 = 364;
      Floor[] floorArray0 = new Floor[8];
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        environment0.getFloor(364);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 364
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Floor[] floorArray0 = new Floor[5];
      Environment environment0 = new Environment(2127);
      Elevator elevator0 = new Elevator(environment0, false, 14, false);
      elevator0.toString();
      Person person0 = new Person(", yL}GW;A<SU1", 14, 1654, 1467, environment0);
      elevator0.enterElevator(person0);
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed((-134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -134
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Floor[] floorArray0 = new Floor[5];
      Environment environment0 = new Environment(2127);
      Elevator elevator0 = new Elevator(environment0, true, 0, false);
      elevator0.toString();
      Person person0 = new Person(", yL}GW;A<SU1", 0, 1654, 1467, environment0);
      elevator0.enterElevator(person0);
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed((-134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -134
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(370);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.timeShift();
      elevator0.timeShift();
      elevator0.timeShift();
      Person person0 = null;
      try {
        person0 = new Person("ElevatorSystem.Floor", 2228, 370, 2228, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 370
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Floor[] floorArray0 = new Floor[5];
      Environment environment0 = new Environment(2127);
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      elevator0.toString();
      Person person0 = new Person(", yL}GW;A<SU1", 0, 1654, 1467, environment0);
      elevator0.enterElevator(person0);
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed((-134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -134
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.timeShift();
      elevator0.isEmpty();
      elevator0.getEnv();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(370);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.weight = 370;
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      elevator0.doors = elevator_DoorState0;
      elevator0.timeShift();
      elevator0.isBlocked();
      elevator0.getCurrentDirection();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Elevator.Direction.values();
      Elevator.DoorState.values();
      Environment environment0 = new Environment(465);
      Elevator elevator0 = new Elevator(environment0, false);
      // Undeclared exception!
      try { 
        elevator0.enterElevator((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Environment environment0 = new Environment(1678);
      Elevator elevator0 = new Elevator(environment0, false);
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.timeShift();
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator1 = new Elevator(environment0, false);
      elevator1.areDoorsOpen();
      Elevator.Direction.values();
      elevator1.getCurrentFloorID();
      // Undeclared exception!
      try { 
        elevator1.pressInLiftFloorButton(1678);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1678
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(395);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.timeShift();
      elevator0.toString();
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(370);
      Elevator elevator0 = new Elevator(environment0, true);
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(370);
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      elevator0.floorButtons = booleanArray0;
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Environment environment0 = new Environment(359);
      Elevator elevator0 = new Elevator(environment0, true, 100, true);
      elevator0.leaveElevator((Person) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      floor1.reset();
      Floor floor2 = new Floor(environment0, 0);
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.env = environment0;
      elevator0.isIdle();
      floor1.reset();
      Elevator.DoorState.values();
      floor1.processWaitingPersons(elevator0);
      elevator0.getEnv();
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      elevator0.getCurrentFloorID();
      Elevator.Direction.values();
      elevator0.areDoorsOpen();
      floor0.callElevator();
      elevator0.isBlocked();
      elevator0.timeShift();
      elevator0.buttonForFloorIsPressed(2);
      Elevator.DoorState.values();
      elevator0.isBlocked();
      Person person0 = null;
      try {
        person0 = new Person("w]w/3h", (-1156), (-269), (-1435), environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.getEnv();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Environment environment0 = new Environment(3196);
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, 3196);
      floorArray0[0] = floor0;
      int int0 = 2;
      Floor floor1 = new Floor(environment0, 2);
      floor0.hasCall();
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      Environment environment1 = new Environment(0);
      floor1.callElevator();
      environment0.floors = floorArray0;
      elevator0.env = environment1;
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      elevator0.isEmpty();
      elevator0.areDoorsOpen();
      elevator0.isEmpty();
      Person person0 = null;
      try {
        person0 = new Person("?o`75[}@n!X8W[Zq]", 0, (-2478), (-489), environment1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2478
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = environment0.getFloor(1);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      floor0.hasCall();
      Elevator elevator0 = new Elevator(environment0, false, 431, true);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      elevator0.toString();
      floor0.callElevator();
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      elevator0.floorButtons = booleanArray0;
      elevator0.isIdle();
      elevator0.toString();
      elevator0.toString();
      elevator0.toString();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      elevator_Direction0.reverse();
      elevator_Direction0.reverse();
      Elevator.DoorState.values();
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("(Zny;$IO?q$/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.(Zny;$IO?q$/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Elevator.Direction.values();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      elevator_Direction1.reverse();
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, false, 2, false);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      elevator0.floorButtons = booleanArray0;
      elevator0.areDoorsOpen();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 100;
      Environment environment0 = new Environment(100);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, (-793), false);
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -793
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Elevator elevator0 = new Elevator(environment0, true, (-3188), true);
      elevator0.getCurrentFloorID();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true);
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      elevator0.doors = elevator_DoorState0;
      Elevator.Direction elevator_Direction0 = elevator0.getCurrentDirection();
      elevator_Direction0.reverse();
      elevator_Direction0.reverse();
      elevator_Direction0.reverse();
      Person person0 = null;
      try {
        person0 = new Person("", (-1351), (-1), 0, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator_Direction0.reverse();
      Environment environment0 = null;
      try {
        environment0 = new Environment((-532));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Environment environment0 = new Environment(392);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.isIdle();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.toString();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, false);
      int int0 = 1237;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      elevator0.floorButtons = booleanArray0;
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      elevator0.doors = elevator_DoorState0;
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(1237);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1237
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Environment environment0 = new Environment(0);
      boolean boolean0 = false;
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      Floor[] floorArray0 = null;
      environment0.floors = null;
      elevator0.getCurrentFloorID();
      Elevator.Direction.values();
      elevator0.getCurrentFloorID();
      Elevator.Direction.valueOf("down");
      // Undeclared exception!
      try { 
        elevator0.isIdle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Elevator.Direction.values();
      Environment environment0 = new Environment(550);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.pressInLiftFloorButton(0);
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      elevator0.floorButtons = booleanArray0;
      elevator0.env = environment0;
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      elevator_Direction0.reverse();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, false, 2, true);
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator_Direction0.reverse();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Environment environment0 = new Environment(988);
      Elevator elevator0 = new Elevator(environment0, false, 988, false);
      // Undeclared exception!
      try { 
        elevator0.pressInLiftFloorButton(988);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 988
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, true, 2, true);
      elevator0.getCurrentFloorID();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator((Environment) null, false, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Environment environment0 = new Environment(100);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.isBlocked();
      elevator0.isEmpty();
      elevator0.buttonForFloorIsPressed(0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Environment environment0 = new Environment(5998);
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = new Person("", 5998, 1276, (-2306), environment0);
      Floor[] floorArray0 = new Floor[7];
      Floor floor0 = new Floor(environment0, 1276);
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 1276);
      floorArray0[1] = floor1;
      Floor floor2 = new Floor(environment0, 2870);
      floorArray0[2] = floor2;
      floor0.hasCall();
      Floor floor3 = environment0.getFloor(2870);
      floorArray0[3] = floor3;
      Floor floor4 = environment0.getFloor(0);
      floor2.processWaitingPersons(elevator0);
      floorArray0[4] = floor4;
      floor4.reset();
      Floor floor5 = new Floor(environment0, 2870);
      floorArray0[5] = floor5;
      Floor floor6 = environment0.getFloor(1);
      floor6.hasCall();
      person0.leaveElevator();
      floorArray0[6] = floor6;
      environment0.floors = floorArray0;
      // Undeclared exception!
      try { 
        elevator0.enterElevator(person0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2306
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Environment environment0 = new Environment(2306);
      Floor[] floorArray0 = null;
      environment0.floors = null;
      environment0.floors = null;
      environment0.floors = null;
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator(environment0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Environment environment0 = new Environment(969);
      Elevator elevator0 = new Elevator(environment0, true, 969, true);
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      Person person0 = new Person("R^k 7EG7pG]4P^8n}-", 969, 0, 0, environment0);
      elevator0.enterElevator(person0);
      elevator0.isEmpty();
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      Floor[] floorArray0 = new Floor[6];
      Floor floor0 = new Floor(environment0, (-325));
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, (-325));
      floorArray0[1] = floor1;
      // Undeclared exception!
      try { 
        environment0.getFloor((-325));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -325
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Floor[] floorArray0 = new Floor[19];
      Environment environment0 = new Environment(370);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.weight = 370;
      elevator0.timeShift();
      environment0.floors = floorArray0;
      elevator0.isBlocked();
      elevator0.getCurrentDirection();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      floor1.reset();
      Floor floor2 = new Floor(environment0, 0);
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.env = environment0;
      elevator0.isIdle();
      floor1.reset();
      Elevator.DoorState.values();
      floor1.processWaitingPersons(elevator0);
      elevator0.getEnv();
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      elevator0.getCurrentFloorID();
      elevator0.weight = 0;
      Elevator.Direction.values();
      floor1.callElevator();
      elevator0.areDoorsOpen();
      floor0.callElevator();
      elevator0.isBlocked();
      elevator0.timeShift();
      elevator0.buttonForFloorIsPressed(2);
      Elevator.DoorState.values();
      elevator0.isBlocked();
      elevator0.timeShift();
      Person person0 = null;
      try {
        person0 = new Person("w]w/3h", (-1156), (-269), (-1435), environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(370);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.weight = 370;
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      elevator0.doors = elevator_DoorState0;
      elevator0.timeShift();
      environment0.floors = floorArray0;
      elevator0.isBlocked();
      Elevator.Direction elevator_Direction0 = elevator0.getCurrentDirection();
      elevator_Direction0.reverse();
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      floor1.reset();
      Floor floor2 = new Floor(environment0, 0);
      floorArray0[2] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.env = environment0;
      elevator0.isIdle();
      floor1.reset();
      Elevator.DoorState.values();
      floor1.processWaitingPersons(elevator0);
      elevator0.getEnv();
      elevator0.getCurrentFloorID();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.weight = 0;
      Elevator.Direction.values();
      floor1.callElevator();
      elevator0.areDoorsOpen();
      floor0.callElevator();
      elevator0.isBlocked();
      elevator0.timeShift();
      elevator0.buttonForFloorIsPressed(2);
      Elevator.DoorState.values();
      elevator0.isBlocked();
      elevator0.timeShift();
      Person person0 = null;
      try {
        person0 = new Person("w]w/3h", (-1156), (-269), (-1435), environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Environment environment0 = new Environment(357);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.timeShift();
      elevator0.getCurrentDirection();
      Person person0 = new Person((String) null, 357, 296, 296, environment0);
      person0.leaveElevator();
      elevator0.leaveElevator(person0);
      elevator0.isEmpty();
      elevator0.toString();
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(364);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 364
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Environment environment0 = new Environment(337);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.timeShift();
      elevator0.timeShift();
      elevator0.getCurrentDirection();
      elevator0.isEmpty();
      elevator0.toString();
      elevator0.buttonForFloorIsPressed(324);
      assertEquals(2, elevator0.getCurrentFloorID());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Environment environment0 = new Environment(2771);
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, 1861);
      floorArray0[0] = floor0;
      floor0.reset();
      environment0.floors = floorArray0;
      floorArray0[1] = floor0;
      floor0.callElevator();
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.isIdle();
      floor0.processWaitingPersons(elevator0);
      elevator0.isIdle();
      elevator0.getCurrentFloorID();
      Elevator.Direction elevator_Direction0 = elevator0.getCurrentDirection();
      elevator_Direction0.reverse();
      elevator_Direction0.reverse();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Environment environment0 = new Environment(465);
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = new Person("", 465, 0, 0, environment0);
      person0.leaveElevator();
      elevator0.enterElevator(person0);
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      boolean boolean0 = elevator0.leaveElevator(person0);
      assertTrue(elevator0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Environment environment0 = new Environment(465);
      Elevator elevator0 = new Elevator(environment0, true);
      Person person0 = new Person("", 465, 0, 0, environment0);
      elevator0.enterElevator(person0);
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator0.leaveElevator(person0);
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(465);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 465
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Environment environment0 = new Environment(474);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Floor[] floorArray0 = new Floor[1];
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.env = environment0;
      elevator0.timeShift();
      elevator0.timeShift();
      elevator0.timeShift();
      assertEquals(1, elevator0.getCurrentFloorID());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Environment environment0 = new Environment(2127);
      Elevator elevator0 = new Elevator(environment0, true, 0, false);
      elevator0.toString();
      Person person0 = new Person("Elevator [_] at 0 heading down", 0, 1654, 1467, environment0);
      elevator0.enterElevator(person0);
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed((-134));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -134
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }
}
