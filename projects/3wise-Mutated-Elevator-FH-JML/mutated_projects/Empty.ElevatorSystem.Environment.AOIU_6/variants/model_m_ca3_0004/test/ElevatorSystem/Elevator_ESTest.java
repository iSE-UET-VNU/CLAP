/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 07:54:41 GMT 2020
 */

package ElevatorSystem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Elevator;
import ElevatorSystem.Environment;
import ElevatorSystem.Floor;
import ElevatorSystem.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elevator_ESTest extends Elevator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Environment environment0 = new Environment(5616);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertNotNull(elevator0);
      
      elevator0.weight = (-1122);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      
      elevator0.env = environment0;
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      
      elevator0.weight = 5616;
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[3] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      elevator0.floorButtons = booleanArray0;
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      
      environment0.floors = floorArray0;
      elevator0.timeShift();
      assertTrue(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertTrue(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertNotNull(environment1);
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertTrue(elevator0.isEmpty());
      assertEquals(2, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      
      Environment environment2 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment0, environment2);
      assertSame(environment2, environment0);
      assertSame(environment2, environment1);
      assertTrue(elevator0.isEmpty());
      assertEquals(2, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertNotNull(environment2);
      
      elevator0.getCurrentDirection();
      assertSame(environment0, environment1);
      assertSame(environment0, environment2);
      assertTrue(elevator0.isEmpty());
      assertEquals(2, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Environment environment0 = new Environment(27);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      elevator0.timeShift();
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      boolean boolean0 = elevator0.isBlocked();
      assertFalse(boolean0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      String string0 = elevator0.toString();
      assertEquals("Elevator []  at 1 heading up", string0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertNotNull(string0);
      
      Person person0 = new Person((String) null, 27, 0, 27, environment0);
      assertEquals(27, person0.getDestination());
      assertNull(person0.getName());
      assertEquals(0, person0.getOrigin());
      assertFalse(person0.isDestinationReached());
      assertEquals(27, person0.getWeight());
      assertNotNull(person0);
      
      person0.leaveElevator();
      assertTrue(person0.isDestinationReached());
      assertEquals(27, person0.getDestination());
      assertNull(person0.getName());
      assertEquals(0, person0.getOrigin());
      assertEquals(27, person0.getWeight());
      
      person0.leaveElevator();
      assertTrue(person0.isDestinationReached());
      assertEquals(27, person0.getDestination());
      assertNull(person0.getName());
      assertEquals(0, person0.getOrigin());
      assertEquals(27, person0.getWeight());
      
      boolean boolean1 = elevator0.leaveElevator(person0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(person0.isDestinationReached());
      assertEquals(27, person0.getDestination());
      assertNull(person0.getName());
      assertEquals(0, person0.getOrigin());
      assertEquals(27, person0.getWeight());
      
      Person person1 = new Person("Kke", 27, 25, 0, environment0);
      assertFalse(person1.equals((Object)person0));
      assertEquals(27, person1.getWeight());
      assertEquals(0, person1.getDestination());
      assertFalse(person1.isDestinationReached());
      assertEquals(25, person1.getOrigin());
      assertEquals("Kke", person1.getName());
      assertNotNull(person1);
      
      boolean boolean2 = elevator0.isEmpty();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertNotNull(environment1);
      
      elevator0.enterElevator(person1);
      assertFalse(person1.equals((Object)person0));
      assertSame(environment0, environment1);
      assertNotSame(person1, person0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isEmpty());
      assertEquals(27, person1.getWeight());
      assertEquals(0, person1.getDestination());
      assertFalse(person1.isDestinationReached());
      assertEquals(25, person1.getOrigin());
      assertEquals("Kke", person1.getName());
      
      boolean boolean3 = elevator0.isBlocked();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean3);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isEmpty());
      
      elevator0.weight = 66;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isEmpty());
      
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction1.equals((Object)elevator_Direction0));
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(2, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      
      String string1 = elevator0.toString();
      assertFalse(string1.equals((Object)string0));
      assertSame(environment0, environment1);
      assertEquals("Elevator []  at 2 heading up", string1);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(2, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Environment environment0 = new Environment(5998);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      Person person0 = new Person("", 5998, 1276, 376, environment0);
      assertFalse(person0.isDestinationReached());
      assertEquals(5998, person0.getWeight());
      assertEquals("", person0.getName());
      assertEquals(1276, person0.getOrigin());
      assertEquals(376, person0.getDestination());
      assertNotNull(person0);
      
      Floor floor0 = new Floor(environment0, 1276);
      assertEquals(1276, floor0.getFloorID());
      assertNotNull(floor0);
      
      Floor floor1 = new Floor(environment0, 1276);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(1276, floor1.getFloorID());
      assertNotNull(floor1);
      
      Floor floor2 = new Floor(environment0, 2870);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(2870, floor2.getFloorID());
      assertNotNull(floor2);
      
      floor1.callElevator();
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(1276, floor1.getFloorID());
      
      floor2.processWaitingPersons(elevator0);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertNotSame(floor2, floor0);
      assertNotSame(floor2, floor1);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(2870, floor2.getFloorID());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(1276, floor1.getFloorID());
      
      Floor floor3 = new Floor(environment0, 2870);
      assertFalse(floor3.equals((Object)floor1));
      assertFalse(floor3.equals((Object)floor2));
      assertFalse(floor3.equals((Object)floor0));
      assertEquals(2870, floor3.getFloorID());
      assertNotNull(floor3);
      
      Floor floor4 = environment0.getFloor(1);
      assertFalse(floor4.equals((Object)floor3));
      assertFalse(floor4.equals((Object)floor2));
      assertFalse(floor4.equals((Object)floor0));
      assertFalse(floor4.equals((Object)floor1));
      assertNotSame(floor4, floor3);
      assertNotSame(floor4, floor2);
      assertNotSame(floor4, floor0);
      assertNotSame(floor4, floor1);
      assertEquals(1, floor4.getFloorID());
      assertNotNull(floor4);
      
      floor4.callElevator();
      assertFalse(floor4.equals((Object)floor3));
      assertFalse(floor4.equals((Object)floor2));
      assertFalse(floor4.equals((Object)floor0));
      assertFalse(floor4.equals((Object)floor1));
      assertNotSame(floor4, floor3);
      assertNotSame(floor4, floor2);
      assertNotSame(floor4, floor0);
      assertNotSame(floor4, floor1);
      assertEquals(1, floor4.getFloorID());
      
      Person person1 = new Person("", (-1715), 376, 1901, environment0);
      assertFalse(person1.equals((Object)person0));
      assertEquals((-1715), person1.getWeight());
      assertEquals("", person1.getName());
      assertFalse(person1.isDestinationReached());
      assertEquals(376, person1.getOrigin());
      assertEquals(1901, person1.getDestination());
      assertNotNull(person1);
      
      elevator0.enterElevator(person1);
      assertFalse(person1.equals((Object)person0));
      assertNotSame(person1, person0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals((-1715), person1.getWeight());
      assertEquals("", person1.getName());
      assertFalse(person1.isDestinationReached());
      assertEquals(376, person1.getOrigin());
      assertEquals(1901, person1.getDestination());
      
      boolean boolean0 = floor4.hasCall();
      assertFalse(floor4.equals((Object)floor3));
      assertFalse(floor4.equals((Object)floor2));
      assertFalse(floor4.equals((Object)floor0));
      assertFalse(floor4.equals((Object)floor1));
      assertNotSame(floor4, floor3);
      assertNotSame(floor4, floor2);
      assertNotSame(floor4, floor0);
      assertNotSame(floor4, floor1);
      assertTrue(boolean0);
      assertEquals(1, floor4.getFloorID());
      
      person0.leaveElevator();
      assertFalse(person0.equals((Object)person1));
      assertNotSame(person0, person1);
      assertEquals(5998, person0.getWeight());
      assertEquals("", person0.getName());
      assertEquals(1276, person0.getOrigin());
      assertEquals(376, person0.getDestination());
      assertTrue(person0.isDestinationReached());
      
      elevator0.enterElevator(person0);
      assertFalse(person0.equals((Object)person1));
      assertNotSame(person0, person1);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(5998, person0.getWeight());
      assertEquals("", person0.getName());
      assertEquals(1276, person0.getOrigin());
      assertEquals(376, person0.getDestination());
      assertTrue(person0.isDestinationReached());
      
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(0, int0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean1 = elevator0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      int int1 = elevator0.getCurrentFloorID();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean3 = elevator0.leaveElevator(person0);
      assertFalse(person0.equals((Object)person1));
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNotSame(person0, person1);
      assertTrue(boolean3);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(5998, person0.getWeight());
      assertEquals("", person0.getName());
      assertEquals(1276, person0.getOrigin());
      assertEquals(376, person0.getDestination());
      assertTrue(person0.isDestinationReached());
      
      boolean boolean4 = elevator0.isEmpty();
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      elevator0.timeShift();
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      elevator0.timeShift();
      assertEquals(1, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      elevator0.getCurrentDirection();
      assertEquals(1, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      Person person0 = new Person("VsYw@R!r.;|K9*EW", 1, 0, 0, environment0);
      assertEquals(0, person0.getOrigin());
      assertEquals(0, person0.getDestination());
      assertEquals(1, person0.getWeight());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertFalse(person0.isDestinationReached());
      assertNotNull(person0);
      
      floor1.addWaitingPerson(person0);
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      assertEquals(0, person0.getOrigin());
      assertEquals(0, person0.getDestination());
      assertEquals(1, person0.getWeight());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertFalse(person0.isDestinationReached());
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isEmpty());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isEmpty());
      assertNotNull(environment1);
      
      int int0 = elevator0.getCurrentFloorID();
      assertSame(environment0, environment1);
      assertEquals(1, int0);
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isEmpty());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertFalse(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertTrue(boolean1);
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isEmpty());
      
      floor0.callElevator();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertEquals(1, floor0.getFloorID());
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertSame(environment0, environment1);
      assertFalse(boolean2);
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      boolean boolean3 = elevator0.isBlocked();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean3);
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      
      String string0 = elevator0.toString();
      assertSame(environment0, environment1);
      assertEquals("Elevator []  at 0 heading down", string0);
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertNotNull(string0);
      
      Person person1 = null;
      try {
        person1 = new Person("w]w/3h", (-1156), (-269), 1, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Environment environment0 = new Environment(5616);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      Elevator elevator0 = new Elevator(environment0, true);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      elevator0.weight = 5616;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      elevator0.env = environment0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      elevator0.weight = 5616;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      // Undeclared exception!
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Environment environment0 = new Environment(5616);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      elevator0.weight = (-1122);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      elevator0.env = environment0;
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      elevator0.weight = 5616;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      elevator0.floorButtons = booleanArray0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      elevator0.timeShift();
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(environment1);
      
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Environment environment0 = new Environment(5616);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      elevator0.weight = (-1122);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      elevator0.env = environment0;
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      elevator0.weight = 5616;
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      elevator0.floorButtons = booleanArray0;
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor0));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      Person person0 = new Person("VsYw@R!r.;|K9*EW", 1, 0, 0, environment0);
      assertFalse(person0.isDestinationReached());
      assertEquals(1, person0.getWeight());
      assertEquals(0, person0.getDestination());
      assertEquals(0, person0.getOrigin());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertNotNull(person0);
      
      floor1.addWaitingPerson(person0);
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      assertFalse(person0.isDestinationReached());
      assertEquals(1, person0.getWeight());
      assertEquals(0, person0.getDestination());
      assertEquals(0, person0.getOrigin());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertNotNull(environment1);
      
      floor1.callElevator();
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertSame(environment0, environment1);
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      int int0 = elevator0.getCurrentFloorID();
      assertSame(environment0, environment1);
      assertEquals(1, int0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertFalse(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertTrue(boolean1);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      floor0.callElevator();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertEquals(1, floor0.getFloorID());
      
      floor0.reset();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertEquals(1, floor0.getFloorID());
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertSame(environment0, environment1);
      assertFalse(boolean2);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      boolean boolean3 = elevator0.isBlocked();
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertSame(environment0, environment1);
      assertFalse(boolean3);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      String string0 = elevator0.toString();
      assertSame(environment0, environment1);
      assertEquals("Elevator [_] at 1 heading up", string0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertNotNull(string0);
      
      Person person1 = null;
      try {
        person1 = new Person("w]w/3h", (-1156), (-269), 1, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Environment environment0 = new Environment(5616);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      elevator0.weight = (-1121);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      elevator0.env = environment0;
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      elevator0.timeShift();
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertNotNull(environment1);
      
      // Undeclared exception!
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor0));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      Person person0 = new Person("VsYw@R!r.;|K9*EW", 1, 0, 0, environment0);
      assertEquals(0, person0.getOrigin());
      assertFalse(person0.isDestinationReached());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertEquals(1, person0.getWeight());
      assertEquals(0, person0.getDestination());
      assertNotNull(person0);
      
      floor1.addWaitingPerson(person0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertEquals(0, person0.getOrigin());
      assertFalse(person0.isDestinationReached());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertEquals(1, person0.getWeight());
      assertEquals(0, person0.getDestination());
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      elevator0.timeShift();
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertNotNull(environment1);
      
      int int0 = elevator0.getCurrentFloorID();
      assertSame(environment0, environment1);
      assertEquals(1, int0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertTrue(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean1);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      
      floor0.callElevator();
      assertFalse(floor0.equals((Object)floor1));
      assertFalse(floor0.equals((Object)floor2));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor1);
      assertNotSame(floor0, floor2);
      assertEquals(1, floor0.getFloorID());
      
      floor0.reset();
      assertFalse(floor0.equals((Object)floor1));
      assertFalse(floor0.equals((Object)floor2));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor1);
      assertNotSame(floor0, floor2);
      assertEquals(1, floor0.getFloorID());
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(environment0, environment1);
      assertFalse(boolean2);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      String string0 = elevator0.toString();
      assertSame(environment0, environment1);
      assertEquals("Elevator []  at 0 heading down", string0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertNotNull(string0);
      
      Person person1 = null;
      try {
        person1 = new Person("w]w/3h", (-1156), (-269), 1, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor0));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      Person person0 = new Person("VsYw@R!r.;|K9*EW", 1, 0, 0, environment0);
      assertEquals(0, person0.getDestination());
      assertFalse(person0.isDestinationReached());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertEquals(0, person0.getOrigin());
      assertEquals(1, person0.getWeight());
      assertNotNull(person0);
      
      floor1.addWaitingPerson(person0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertEquals(0, person0.getDestination());
      assertFalse(person0.isDestinationReached());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertEquals(0, person0.getOrigin());
      assertEquals(1, person0.getWeight());
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(1, int0);
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      floor0.reset();
      assertFalse(floor0.equals((Object)floor1));
      assertFalse(floor0.equals((Object)floor2));
      assertNotSame(floor0, floor1);
      assertNotSame(floor0, floor2);
      assertEquals(1, floor0.getFloorID());
      
      elevator0.timeShift();
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      
      boolean boolean1 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      boolean boolean2 = elevator0.isBlocked();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      
      boolean boolean3 = floor1.hasCall();
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertFalse(boolean3);
      assertEquals(0, floor1.getFloorID());
      
      String string0 = elevator0.toString();
      assertEquals("Elevator []  at 0 heading down", string0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertNotNull(string0);
      
      Person person1 = null;
      try {
        person1 = new Person("VsYw@R!r.;|K9*EW", (-1156), (-269), 1, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Environment environment0 = new Environment(5616);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      elevator0.weight = (-1122);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      elevator0.env = environment0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      elevator0.weight = 5616;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Environment environment0 = new Environment(5616);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      elevator0.weight = (-1121);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      elevator0.weight = 5616;
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      elevator0.timeShift();
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(environment1);
      
      boolean boolean0 = elevator0.isBlocked();
      assertSame(environment0, environment1);
      assertTrue(boolean0);
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction1.equals((Object)elevator_Direction0));
      assertSame(environment0, environment1);
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Environment environment0 = new Environment(5616);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      elevator0.weight = (-1121);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      elevator0.weight = 5616;
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      elevator0.timeShift();
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertNotNull(environment1);
      
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("ElevatorSystem.Environment");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.ElevatorSystem.Environment
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Environment environment0 = new Environment(5998);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      Person person0 = new Person("", 5998, 1276, 376, environment0);
      assertEquals(376, person0.getDestination());
      assertFalse(person0.isDestinationReached());
      assertEquals(5998, person0.getWeight());
      assertEquals(1276, person0.getOrigin());
      assertEquals("", person0.getName());
      assertNotNull(person0);
      
      Floor[] floorArray0 = new Floor[7];
      Floor floor0 = new Floor(environment0, 1276);
      assertEquals(1276, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 1276);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(1276, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      Floor floor2 = new Floor(environment0, 2870);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(2870, floor2.getFloorID());
      assertNotNull(floor2);
      
      floorArray0[2] = floor2;
      boolean boolean0 = floor2.hasCall();
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertNotSame(floor2, floor0);
      assertNotSame(floor2, floor1);
      assertFalse(boolean0);
      assertEquals(2870, floor2.getFloorID());
      
      Floor floor3 = environment0.getFloor(2870);
      assertFalse(floor3.equals((Object)floor1));
      assertFalse(floor3.equals((Object)floor0));
      assertFalse(floor3.equals((Object)floor2));
      assertNotSame(floor3, floor1);
      assertNotSame(floor3, floor0);
      assertNotSame(floor3, floor2);
      assertEquals(2870, floor3.getFloorID());
      assertNotNull(floor3);
      
      floorArray0[3] = floor3;
      Floor floor4 = environment0.getFloor(0);
      assertFalse(floor4.equals((Object)floor3));
      assertFalse(floor4.equals((Object)floor0));
      assertFalse(floor4.equals((Object)floor1));
      assertFalse(floor4.equals((Object)floor2));
      assertNotSame(floor4, floor3);
      assertNotSame(floor4, floor0);
      assertNotSame(floor4, floor1);
      assertNotSame(floor4, floor2);
      assertEquals(0, floor4.getFloorID());
      assertNotNull(floor4);
      
      floor2.processWaitingPersons(elevator0);
      assertFalse(floor2.equals((Object)floor4));
      assertFalse(floor2.equals((Object)floor3));
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertNotSame(floor2, floor4);
      assertNotSame(floor2, floor3);
      assertNotSame(floor2, floor0);
      assertNotSame(floor2, floor1);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(2870, floor2.getFloorID());
      
      floorArray0[4] = floor4;
      floor4.reset();
      assertFalse(floor4.equals((Object)floor3));
      assertFalse(floor4.equals((Object)floor0));
      assertFalse(floor4.equals((Object)floor1));
      assertFalse(floor4.equals((Object)floor2));
      assertNotSame(floor4, floor3);
      assertNotSame(floor4, floor0);
      assertNotSame(floor4, floor1);
      assertNotSame(floor4, floor2);
      assertEquals(0, floor4.getFloorID());
      
      Floor floor5 = new Floor(environment0, 2870);
      assertFalse(floor5.equals((Object)floor2));
      assertFalse(floor5.equals((Object)floor4));
      assertFalse(floor5.equals((Object)floor3));
      assertFalse(floor5.equals((Object)floor0));
      assertFalse(floor5.equals((Object)floor1));
      assertEquals(2870, floor5.getFloorID());
      assertNotNull(floor5);
      
      floorArray0[5] = floor5;
      Floor floor6 = environment0.getFloor(1);
      assertFalse(floor6.equals((Object)floor4));
      assertFalse(floor6.equals((Object)floor3));
      assertFalse(floor6.equals((Object)floor2));
      assertFalse(floor6.equals((Object)floor1));
      assertFalse(floor6.equals((Object)floor5));
      assertFalse(floor6.equals((Object)floor0));
      assertNotSame(floor6, floor4);
      assertNotSame(floor6, floor3);
      assertNotSame(floor6, floor2);
      assertNotSame(floor6, floor1);
      assertNotSame(floor6, floor5);
      assertNotSame(floor6, floor0);
      assertEquals(1, floor6.getFloorID());
      assertNotNull(floor6);
      
      boolean boolean1 = floor6.hasCall();
      assertFalse(floor6.equals((Object)floor4));
      assertFalse(floor6.equals((Object)floor3));
      assertFalse(floor6.equals((Object)floor2));
      assertFalse(floor6.equals((Object)floor1));
      assertFalse(floor6.equals((Object)floor5));
      assertFalse(floor6.equals((Object)floor0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(floor6, floor4);
      assertNotSame(floor6, floor3);
      assertNotSame(floor6, floor2);
      assertNotSame(floor6, floor1);
      assertNotSame(floor6, floor5);
      assertNotSame(floor6, floor0);
      assertFalse(boolean1);
      assertEquals(1, floor6.getFloorID());
      
      person0.leaveElevator();
      assertEquals(376, person0.getDestination());
      assertEquals(5998, person0.getWeight());
      assertEquals(1276, person0.getOrigin());
      assertEquals("", person0.getName());
      assertTrue(person0.isDestinationReached());
      
      floorArray0[6] = floor6;
      environment0.floors = floorArray0;
      elevator0.enterElevator(person0);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(376, person0.getDestination());
      assertEquals(5998, person0.getWeight());
      assertEquals(1276, person0.getOrigin());
      assertEquals("", person0.getName());
      assertTrue(person0.isDestinationReached());
      
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(0, int0);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean2 = elevator0.isEmpty();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean3 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      int int1 = elevator0.getCurrentFloorID();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean4 = elevator0.leaveElevator(person0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(376, person0.getDestination());
      assertEquals(5998, person0.getWeight());
      assertEquals(1276, person0.getOrigin());
      assertEquals("", person0.getName());
      assertTrue(person0.isDestinationReached());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = environment0.getFloor(0);
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor0));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      Person person0 = new Person("VsYw@R!r.;|K9*EW", 1, 0, 0, environment0);
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertEquals(0, person0.getOrigin());
      assertEquals(0, person0.getDestination());
      assertEquals(1, person0.getWeight());
      assertFalse(person0.isDestinationReached());
      assertNotNull(person0);
      
      floor1.addWaitingPerson(person0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertEquals(0, person0.getOrigin());
      assertEquals(0, person0.getDestination());
      assertEquals(1, person0.getWeight());
      assertFalse(person0.isDestinationReached());
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertNotNull(environment1);
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      
      int int0 = elevator0.getCurrentFloorID();
      assertSame(environment0, environment1);
      assertEquals(0, int0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertTrue(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean1);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      
      floor0.callElevator();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertEquals(1, floor0.getFloorID());
      
      floor0.reset();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertEquals(1, floor0.getFloorID());
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(environment0, environment1);
      assertFalse(boolean2);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      boolean boolean3 = elevator0.isBlocked();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertSame(environment0, environment1);
      assertFalse(boolean3);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      String string0 = elevator0.toString();
      assertSame(environment0, environment1);
      assertEquals("Elevator [_] at 0 heading up", string0);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(string0);
      
      Person person1 = null;
      try {
        person1 = new Person("w]w/3h", (-1156), (-269), 1, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      Person person0 = new Person("VsYw@R!r.;|K9*EW", 1, 0, 0, environment0);
      assertEquals(0, person0.getOrigin());
      assertFalse(person0.isDestinationReached());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertEquals(1, person0.getWeight());
      assertEquals(0, person0.getDestination());
      assertNotNull(person0);
      
      floor1.addWaitingPerson(person0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertEquals(0, person0.getOrigin());
      assertFalse(person0.isDestinationReached());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertEquals(1, person0.getWeight());
      assertEquals(0, person0.getDestination());
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertFalse(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertFalse(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertNotNull(environment1);
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      int int0 = elevator0.getCurrentFloorID();
      assertSame(environment0, environment1);
      assertEquals(0, int0);
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertTrue(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean1);
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      floor0.callElevator();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertEquals(1, floor0.getFloorID());
      
      floor0.reset();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertEquals(1, floor0.getFloorID());
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean2);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      boolean boolean3 = elevator0.isBlocked();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean3);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      
      String string0 = elevator0.toString();
      assertSame(environment0, environment1);
      assertEquals("Elevator [_] at 0 heading up", string0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertNotNull(string0);
      
      Person person1 = null;
      try {
        person1 = new Person("w]w/3h", (-1156), (-269), 1, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor floor0 = new Floor(environment0, 1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      Environment environment1 = new Environment(1);
      assertFalse(environment1.equals((Object)environment0));
      assertNotNull(environment1);
      
      Elevator elevator0 = new Elevator(environment1, true);
      assertFalse(environment1.equals((Object)environment0));
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(environment0.equals((Object)environment1));
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(environment1.equals((Object)environment0));
      assertNotSame(environment0, environment1);
      assertNotSame(floor1, floor0);
      assertNotSame(environment1, environment0);
      assertEquals(0, floor1.getFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      floor1.reset();
      assertFalse(environment0.equals((Object)environment1));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(environment0, environment1);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(environment0.equals((Object)environment1));
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor0));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      Elevator elevator1 = new Elevator(environment0, true);
      assertFalse(environment0.equals((Object)environment1));
      assertFalse(elevator1.equals((Object)elevator0));
      assertTrue(elevator1.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator1.getCurrentDirection());
      assertFalse(elevator1.isBlocked());
      assertEquals(0, elevator1.getCurrentFloorID());
      assertTrue(elevator1.isEmpty());
      assertNotNull(elevator1);
      
      elevator1.env = environment0;
      assertTrue(elevator1.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator1.getCurrentDirection());
      assertFalse(elevator1.isBlocked());
      assertEquals(0, elevator1.getCurrentFloorID());
      assertTrue(elevator1.isEmpty());
      
      Floor[] floorArray0 = new Floor[8];
      floorArray0[0] = floor2;
      floorArray0[1] = floor0;
      Floor floor3 = new Floor(environment1, 1);
      assertFalse(environment1.equals((Object)environment0));
      assertFalse(floor3.equals((Object)floor2));
      assertFalse(floor3.equals((Object)floor1));
      assertFalse(floor3.equals((Object)floor0));
      assertEquals(1, floor3.getFloorID());
      assertNotNull(floor3);
      
      floorArray0[2] = floor3;
      floorArray0[3] = floor2;
      floorArray0[4] = floor2;
      floorArray0[5] = floor1;
      floorArray0[6] = floor2;
      floorArray0[7] = floor1;
      environment0.floors = floorArray0;
      floor1.processWaitingPersons(elevator1);
      assertFalse(environment0.equals((Object)environment1));
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor3));
      assertFalse(elevator1.equals((Object)elevator0));
      assertNotSame(environment0, environment1);
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor3);
      assertNotSame(elevator1, elevator0);
      assertEquals(0, floor1.getFloorID());
      assertTrue(elevator1.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator1.getCurrentDirection());
      assertFalse(elevator1.isBlocked());
      assertEquals(0, elevator1.getCurrentFloorID());
      assertTrue(elevator1.isEmpty());
      
      // Undeclared exception!
      try { 
        elevator1.isIdle();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean0 = elevator0.isIdle();
      assertTrue(boolean0);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      floor2.callElevator();
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertNotSame(floor2, floor0);
      assertNotSame(floor2, floor1);
      assertEquals(0, floor2.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(environment1);
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      int int0 = elevator0.getCurrentFloorID();
      assertSame(environment0, environment1);
      assertEquals(0, int0);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertFalse(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean1);
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      floor0.callElevator();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertEquals(1, floor0.getFloorID());
      
      floor0.reset();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertEquals(1, floor0.getFloorID());
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(environment0, environment1);
      assertFalse(boolean2);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      boolean boolean3 = elevator0.isBlocked();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertSame(environment0, environment1);
      assertFalse(boolean3);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      String string0 = elevator0.toString();
      assertSame(environment0, environment1);
      assertEquals("Elevator []  at 1 heading up", string0);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertNotNull(string0);
      
      Person person0 = null;
      try {
        person0 = new Person("w]w/3h", (-1156), (-269), 1, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Environment environment0 = new Environment(426);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false, 1872, false);
      assertFalse(elevator0.isBlocked());
      assertEquals(1872, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertNotNull(elevator0);
      
      Person person0 = new Person(" > maximumWeight:", 13, 13, 17, environment0);
      assertEquals(13, person0.getOrigin());
      assertEquals(13, person0.getWeight());
      assertEquals(" > maximumWeight:", person0.getName());
      assertFalse(person0.isDestinationReached());
      assertEquals(17, person0.getDestination());
      assertNotNull(person0);
      
      elevator0.enterElevator(person0);
      assertFalse(elevator0.isBlocked());
      assertEquals(1872, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(13, person0.getOrigin());
      assertEquals(13, person0.getWeight());
      assertEquals(" > maximumWeight:", person0.getName());
      assertFalse(person0.isDestinationReached());
      assertEquals(17, person0.getDestination());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1;
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      elevator0.floorButtons = booleanArray0;
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(environment1);
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      int int1 = elevator0.getCurrentFloorID();
      assertFalse(int1 == int0);
      assertSame(environment0, environment1);
      assertEquals(0, int1);
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertTrue(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean1);
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      floor0.callElevator();
      assertFalse(floor0.equals((Object)floor1));
      assertFalse(floor0.equals((Object)floor2));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor1);
      assertNotSame(floor0, floor2);
      assertEquals(1, floor0.getFloorID());
      
      floor0.reset();
      assertFalse(floor0.equals((Object)floor1));
      assertFalse(floor0.equals((Object)floor2));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor1);
      assertNotSame(floor0, floor2);
      assertEquals(1, floor0.getFloorID());
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertSame(environment0, environment1);
      assertTrue(boolean2);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      boolean boolean3 = elevator0.isBlocked();
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertSame(environment0, environment1);
      assertFalse(boolean3);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      String string0 = elevator0.toString();
      assertSame(environment0, environment1);
      assertEquals("Elevator [_] at 0 heading up", string0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(string0);
      
      Person person0 = null;
      try {
        person0 = new Person("w]w/3h", (-1156), (-269), 1, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Environment environment0 = new Environment(27);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false, 25, false);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(25, elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      elevator0.timeShift();
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(24, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      boolean boolean0 = elevator0.isBlocked();
      assertFalse(boolean0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(24, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      String string0 = elevator0.toString();
      assertEquals("Elevator []  at 24 heading down", string0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(24, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(string0);
      
      Person person0 = new Person((String) null, 2091, 0, (-268), environment0);
      assertEquals(2091, person0.getWeight());
      assertEquals(0, person0.getOrigin());
      assertEquals((-268), person0.getDestination());
      assertFalse(person0.isDestinationReached());
      assertNull(person0.getName());
      assertNotNull(person0);
      
      boolean boolean1 = elevator0.leaveElevator(person0);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(24, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(2091, person0.getWeight());
      assertEquals(0, person0.getOrigin());
      assertEquals((-268), person0.getDestination());
      assertFalse(person0.isDestinationReached());
      assertNull(person0.getName());
      
      elevator0.env = environment0;
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(24, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      Person person1 = null;
      try {
        person1 = new Person("Kke", 2091, (-1035), 0, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1035
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Environment environment0 = new Environment(3);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[5];
      Floor floor0 = new Floor(environment0, 3);
      assertEquals(3, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Environment environment0 = new Environment(2);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true, 0, false);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      elevator0.timeShift();
      assertTrue(elevator0.isEmpty());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Environment environment0 = new Environment(5998);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      Person person0 = new Person("", 5998, 1276, (-2306), environment0);
      assertEquals(1276, person0.getOrigin());
      assertEquals("", person0.getName());
      assertEquals(5998, person0.getWeight());
      assertFalse(person0.isDestinationReached());
      assertEquals((-2306), person0.getDestination());
      assertNotNull(person0);
      
      Floor[] floorArray0 = new Floor[7];
      Floor floor0 = new Floor(environment0, 1276);
      assertEquals(1276, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 1276);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(1276, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      Floor floor2 = new Floor(environment0, 2870);
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor0));
      assertEquals(2870, floor2.getFloorID());
      assertNotNull(floor2);
      
      floorArray0[2] = floor2;
      boolean boolean0 = floor0.hasCall();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertFalse(boolean0);
      assertEquals(1276, floor0.getFloorID());
      
      Floor floor3 = environment0.getFloor(2870);
      assertFalse(floor3.equals((Object)floor2));
      assertFalse(floor3.equals((Object)floor0));
      assertFalse(floor3.equals((Object)floor1));
      assertNotSame(floor3, floor2);
      assertNotSame(floor3, floor0);
      assertNotSame(floor3, floor1);
      assertEquals(2870, floor3.getFloorID());
      assertNotNull(floor3);
      
      floorArray0[3] = floor3;
      Floor floor4 = environment0.getFloor(0);
      assertFalse(floor4.equals((Object)floor2));
      assertFalse(floor4.equals((Object)floor1));
      assertFalse(floor4.equals((Object)floor0));
      assertFalse(floor4.equals((Object)floor3));
      assertNotSame(floor4, floor2);
      assertNotSame(floor4, floor1);
      assertNotSame(floor4, floor0);
      assertNotSame(floor4, floor3);
      assertEquals(0, floor4.getFloorID());
      assertNotNull(floor4);
      
      floor2.processWaitingPersons(elevator0);
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor4));
      assertFalse(floor2.equals((Object)floor3));
      assertFalse(floor2.equals((Object)floor0));
      assertNotSame(floor2, floor1);
      assertNotSame(floor2, floor4);
      assertNotSame(floor2, floor3);
      assertNotSame(floor2, floor0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(2870, floor2.getFloorID());
      
      floorArray0[4] = floor4;
      floor4.reset();
      assertFalse(floor4.equals((Object)floor2));
      assertFalse(floor4.equals((Object)floor1));
      assertFalse(floor4.equals((Object)floor0));
      assertFalse(floor4.equals((Object)floor3));
      assertNotSame(floor4, floor2);
      assertNotSame(floor4, floor1);
      assertNotSame(floor4, floor0);
      assertNotSame(floor4, floor3);
      assertEquals(0, floor4.getFloorID());
      
      Floor floor5 = new Floor(environment0, 2870);
      assertFalse(floor5.equals((Object)floor3));
      assertFalse(floor5.equals((Object)floor2));
      assertFalse(floor5.equals((Object)floor1));
      assertFalse(floor5.equals((Object)floor0));
      assertFalse(floor5.equals((Object)floor4));
      assertEquals(2870, floor5.getFloorID());
      assertNotNull(floor5);
      
      floorArray0[5] = floor5;
      Floor floor6 = environment0.getFloor(1);
      assertFalse(floor6.equals((Object)floor4));
      assertFalse(floor6.equals((Object)floor5));
      assertFalse(floor6.equals((Object)floor0));
      assertFalse(floor6.equals((Object)floor3));
      assertFalse(floor6.equals((Object)floor1));
      assertFalse(floor6.equals((Object)floor2));
      assertNotSame(floor6, floor4);
      assertNotSame(floor6, floor5);
      assertNotSame(floor6, floor0);
      assertNotSame(floor6, floor3);
      assertNotSame(floor6, floor1);
      assertNotSame(floor6, floor2);
      assertEquals(1, floor6.getFloorID());
      assertNotNull(floor6);
      
      person0.leaveElevator();
      assertEquals(1276, person0.getOrigin());
      assertTrue(person0.isDestinationReached());
      assertEquals("", person0.getName());
      assertEquals(5998, person0.getWeight());
      assertEquals((-2306), person0.getDestination());
      
      floorArray0[6] = floor6;
      environment0.floors = floorArray0;
      // Undeclared exception!
      try { 
        elevator0.enterElevator((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      assertEquals((-1435), floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean0 = elevator0.isIdle();
      assertTrue(boolean0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(environment1);
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      int int0 = elevator0.getCurrentFloorID();
      assertSame(environment0, environment1);
      assertEquals(0, int0);
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertFalse(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean1);
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      floor0.callElevator();
      assertFalse(floor0.equals((Object)floor1));
      assertFalse(floor0.equals((Object)floor2));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor1);
      assertNotSame(floor0, floor2);
      assertEquals((-1435), floor0.getFloorID());
      
      floor0.reset();
      assertFalse(floor0.equals((Object)floor1));
      assertFalse(floor0.equals((Object)floor2));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor1);
      assertNotSame(floor0, floor2);
      assertEquals((-1435), floor0.getFloorID());
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean2);
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      boolean boolean3 = elevator0.isBlocked();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertSame(environment0, environment1);
      assertFalse(boolean3);
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      String string0 = elevator0.toString();
      assertSame(environment0, environment1);
      assertEquals("Elevator []  at 1 heading up", string0);
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertNotNull(string0);
      
      Person person0 = null;
      try {
        person0 = new Person("w]w/3h", (-1156), (-269), (-1435), environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1;
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      int int1 = (-1435);
      Floor floor0 = new Floor(environment0, (-1435));
      assertEquals((-1435), floor0.getFloorID());
      assertNotNull(floor0);
      
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      // Undeclared exception!
      try { 
        elevator0.isIdle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Environment environment0 = new Environment(66);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      boolean boolean0 = elevator0.isBlocked();
      assertFalse(boolean0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      boolean boolean1 = elevator0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      elevator0.timeShift();
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      elevator0.floorButtons = booleanArray0;
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(0);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      
      elevator0.getCurrentDirection();
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 1551;
      Environment environment0 = new Environment(1551);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true, 1551, true);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(1551, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertNotNull(elevator0);
      
      boolean boolean0 = elevator0.leaveElevator((Person) null);
      assertFalse(boolean0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(1551, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      
      int int1 = 3334;
      int int2 = (-1881);
      Person person0 = null;
      try {
        person0 = new Person("p%z:D( M);t", 1551, 3334, (-1881), environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3334
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Environment environment0 = new Environment(3);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 3);
      assertEquals(3, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      elevator0.timeShift();
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals((-1), elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction1.equals((Object)elevator_Direction0));
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, (-1435));
      assertEquals((-1435), floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean0 = elevator0.isIdle();
      assertTrue(boolean0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(environment1);
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      int int0 = elevator0.getCurrentFloorID();
      assertSame(environment0, environment1);
      assertEquals(0, int0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertFalse(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean1);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      floor0.callElevator();
      assertFalse(floor0.equals((Object)floor1));
      assertFalse(floor0.equals((Object)floor2));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor1);
      assertNotSame(floor0, floor2);
      assertEquals((-1435), floor0.getFloorID());
      
      boolean boolean2 = elevator0.isBlocked();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean2);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean3 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean3);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      boolean boolean4 = elevator0.isBlocked();
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertSame(environment0, environment1);
      assertFalse(boolean4);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      Person person0 = null;
      try {
        person0 = new Person("w]w/3h", (-1156), (-269), (-1435), environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertNotNull(environment1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Environment environment0 = new Environment(3196);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, 3196);
      assertEquals(3196, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      int int0 = 100;
      Floor floor1 = new Floor(environment0, 100);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(100, floor1.getFloorID());
      assertNotNull(floor1);
      
      boolean boolean0 = floor0.hasCall();
      assertFalse(floor0.equals((Object)floor1));
      assertNotSame(floor0, floor1);
      assertFalse(boolean0);
      assertEquals(3196, floor0.getFloorID());
      
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      Environment environment1 = new Environment(0);
      assertFalse(environment1.equals((Object)environment0));
      assertNotNull(environment1);
      
      floor1.callElevator();
      assertFalse(environment0.equals((Object)environment1));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(environment0, environment1);
      assertNotSame(floor1, floor0);
      assertEquals(100, floor1.getFloorID());
      
      environment0.floors = floorArray0;
      elevator0.env = environment1;
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean1 = elevator0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertFalse(environment0.equals((Object)environment1));
      assertNotSame(environment0, environment1);
      assertTrue(boolean1);
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean2 = elevator0.areDoorsOpen();
      assertFalse(environment0.equals((Object)environment1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertNotSame(environment0, environment1);
      assertFalse(boolean2);
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean3 = elevator0.isEmpty();
      assertFalse(environment0.equals((Object)environment1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertNotSame(environment0, environment1);
      assertTrue(boolean3);
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      
      Person person0 = null;
      try {
        person0 = new Person("?o`75[}@n!X8W[Zq]", 0, (-2478), (-489), environment1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2478
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Environment environment0 = new Environment(100);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = environment0.getFloor(1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      boolean boolean0 = floor0.hasCall();
      assertFalse(boolean0);
      assertEquals(1, floor0.getFloorID());
      
      Elevator elevator0 = new Elevator(environment0, false, 431, true);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(431, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      String string0 = elevator0.toString();
      assertEquals("Elevator [_] at 431 heading up", string0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(431, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertNotNull(string0);
      
      floor0.callElevator();
      assertEquals(1, floor0.getFloorID());
      
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      elevator0.floorButtons = booleanArray0;
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(431, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean1 = elevator0.isIdle();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(431, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      String string1 = elevator0.toString();
      assertTrue(string1.equals((Object)string0));
      assertEquals("Elevator [_] at 431 heading up", string1);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(431, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertNotNull(string1);
      
      String string2 = elevator0.toString();
      assertTrue(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("Elevator [_] at 431 heading up", string2);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(431, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertNotNull(string2);
      
      String string3 = elevator0.toString();
      assertTrue(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertEquals("Elevator [_] at 431 heading up", string3);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(431, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertNotNull(string3);
      
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction1.equals((Object)elevator_Direction0));
      
      Elevator.Direction elevator_Direction2 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction0.equals((Object)elevator_Direction1));
      assertFalse(elevator_Direction2.equals((Object)elevator_Direction0));
      assertSame(elevator_Direction2, elevator_Direction1);
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("(Zny;$IO?q$/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.(Zny;$IO?q$/
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      boolean boolean0 = elevator0.areDoorsOpen();
      assertTrue(boolean0);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      elevator0.currentHeading = elevator_Direction0;
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      String string0 = "mZdE.>$JBe,^88h";
      Person person0 = null;
      try {
        person0 = new Person("mZdE.>$JBe,^88h", 1088, 1088, 1088, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1088
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 1;
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, (-793), false);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals((-793), elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertEquals((-793), elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -793
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true, (-3188), true);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals((-3188), elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      int int0 = elevator0.getCurrentFloorID();
      assertEquals((-3188), int0);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals((-3188), elevator0.getCurrentFloorID());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      elevator0.doors = elevator_DoorState0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      Elevator.Direction elevator_Direction0 = elevator0.getCurrentDirection();
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction1.equals((Object)elevator_Direction0));
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      Elevator.Direction elevator_Direction2 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction0.equals((Object)elevator_Direction1));
      assertFalse(elevator_Direction2.equals((Object)elevator_Direction0));
      assertSame(elevator_Direction2, elevator_Direction1);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      Elevator.Direction elevator_Direction3 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction0.equals((Object)elevator_Direction1));
      assertFalse(elevator_Direction0.equals((Object)elevator_Direction2));
      assertFalse(elevator_Direction3.equals((Object)elevator_Direction0));
      assertSame(elevator_Direction3, elevator_Direction2);
      assertSame(elevator_Direction3, elevator_Direction1);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      
      Person person0 = null;
      try {
        person0 = new Person("", (-1351), (-1), 0, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Environment environment0 = new Environment(392);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      boolean boolean0 = elevator0.isIdle();
      assertTrue(boolean0);
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      String string0 = elevator0.toString();
      assertEquals("Elevator [_] at 0 heading up", string0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      int int0 = 1237;
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      elevator0.floorButtons = booleanArray0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.open;
      elevator0.doors = elevator_DoorState0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(1237);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1237
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(0, int0);
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction1.equals((Object)elevator_Direction0));
      
      Elevator.Direction elevator_Direction2 = elevator_Direction1.reverse();
      assertFalse(elevator_Direction0.equals((Object)elevator_Direction1));
      assertFalse(elevator_Direction1.equals((Object)elevator_Direction0));
      assertFalse(elevator_Direction2.equals((Object)elevator_Direction1));
      assertSame(elevator_Direction0, elevator_Direction2);
      assertSame(elevator_Direction2, elevator_Direction0);
      
      Environment environment0 = new Environment(0);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Environment environment0 = new Environment(2);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false, 2, true);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(2, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertNotNull(elevator0);
      
      elevator0.pressInLiftFloorButton(0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(2, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf(" at ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState. at 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      Elevator.Direction elevator_Direction1 = elevator_Direction0.reverse();
      assertFalse(elevator_Direction1.equals((Object)elevator_Direction0));
      
      Environment environment0 = null;
      try {
        environment0 = new Environment((-532));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Environment environment0 = new Environment(988);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false, 988, false);
      assertEquals(988, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      // Undeclared exception!
      try { 
        elevator0.pressInLiftFloorButton(988);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 988
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Environment environment0 = new Environment(2);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, true, 2, true);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(2, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(2, int0);
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertEquals(2, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator((Environment) null, false, 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Environment environment0 = new Environment(66);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      boolean boolean0 = elevator0.isBlocked();
      assertFalse(boolean0);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean1 = elevator0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Environment environment0 = new Environment(5998);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      Person person0 = new Person("", 5998, 1276, (-2306), environment0);
      assertEquals((-2306), person0.getDestination());
      assertEquals("", person0.getName());
      assertEquals(5998, person0.getWeight());
      assertEquals(1276, person0.getOrigin());
      assertFalse(person0.isDestinationReached());
      assertNotNull(person0);
      
      Floor[] floorArray0 = new Floor[7];
      Floor floor0 = new Floor(environment0, 1276);
      assertEquals(1276, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 1276);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(1276, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      Floor floor2 = new Floor(environment0, 2870);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(2870, floor2.getFloorID());
      assertNotNull(floor2);
      
      floorArray0[2] = floor2;
      boolean boolean0 = floor0.hasCall();
      assertFalse(floor0.equals((Object)floor1));
      assertFalse(floor0.equals((Object)floor2));
      assertNotSame(floor0, floor1);
      assertNotSame(floor0, floor2);
      assertFalse(boolean0);
      assertEquals(1276, floor0.getFloorID());
      
      Floor floor3 = environment0.getFloor(2870);
      assertFalse(floor3.equals((Object)floor2));
      assertFalse(floor3.equals((Object)floor1));
      assertFalse(floor3.equals((Object)floor0));
      assertNotSame(floor3, floor2);
      assertNotSame(floor3, floor1);
      assertNotSame(floor3, floor0);
      assertEquals(2870, floor3.getFloorID());
      assertNotNull(floor3);
      
      floorArray0[3] = floor3;
      Floor floor4 = environment0.getFloor(0);
      assertFalse(floor4.equals((Object)floor3));
      assertFalse(floor4.equals((Object)floor2));
      assertFalse(floor4.equals((Object)floor1));
      assertFalse(floor4.equals((Object)floor0));
      assertNotSame(floor4, floor3);
      assertNotSame(floor4, floor2);
      assertNotSame(floor4, floor1);
      assertNotSame(floor4, floor0);
      assertEquals(0, floor4.getFloorID());
      assertNotNull(floor4);
      
      floor2.processWaitingPersons(elevator0);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor4));
      assertFalse(floor2.equals((Object)floor3));
      assertNotSame(floor2, floor0);
      assertNotSame(floor2, floor1);
      assertNotSame(floor2, floor4);
      assertNotSame(floor2, floor3);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(2870, floor2.getFloorID());
      
      floorArray0[4] = floor4;
      floor4.reset();
      assertFalse(floor4.equals((Object)floor3));
      assertFalse(floor4.equals((Object)floor2));
      assertFalse(floor4.equals((Object)floor1));
      assertFalse(floor4.equals((Object)floor0));
      assertNotSame(floor4, floor3);
      assertNotSame(floor4, floor2);
      assertNotSame(floor4, floor1);
      assertNotSame(floor4, floor0);
      assertEquals(0, floor4.getFloorID());
      
      Floor floor5 = new Floor(environment0, 2870);
      assertFalse(floor5.equals((Object)floor2));
      assertFalse(floor5.equals((Object)floor4));
      assertFalse(floor5.equals((Object)floor3));
      assertFalse(floor5.equals((Object)floor0));
      assertFalse(floor5.equals((Object)floor1));
      assertEquals(2870, floor5.getFloorID());
      assertNotNull(floor5);
      
      floorArray0[5] = floor5;
      Floor floor6 = environment0.getFloor(1);
      assertFalse(floor6.equals((Object)floor3));
      assertFalse(floor6.equals((Object)floor0));
      assertFalse(floor6.equals((Object)floor1));
      assertFalse(floor6.equals((Object)floor5));
      assertFalse(floor6.equals((Object)floor2));
      assertFalse(floor6.equals((Object)floor4));
      assertNotSame(floor6, floor3);
      assertNotSame(floor6, floor0);
      assertNotSame(floor6, floor1);
      assertNotSame(floor6, floor5);
      assertNotSame(floor6, floor2);
      assertNotSame(floor6, floor4);
      assertEquals(1, floor6.getFloorID());
      assertNotNull(floor6);
      
      boolean boolean1 = floor6.hasCall();
      assertFalse(floor6.equals((Object)floor3));
      assertFalse(floor6.equals((Object)floor0));
      assertFalse(floor6.equals((Object)floor1));
      assertFalse(floor6.equals((Object)floor5));
      assertFalse(floor6.equals((Object)floor2));
      assertFalse(floor6.equals((Object)floor4));
      assertTrue(boolean1 == boolean0);
      assertNotSame(floor6, floor3);
      assertNotSame(floor6, floor0);
      assertNotSame(floor6, floor1);
      assertNotSame(floor6, floor5);
      assertNotSame(floor6, floor2);
      assertNotSame(floor6, floor4);
      assertFalse(boolean1);
      assertEquals(1, floor6.getFloorID());
      
      person0.leaveElevator();
      assertEquals((-2306), person0.getDestination());
      assertEquals("", person0.getName());
      assertEquals(5998, person0.getWeight());
      assertEquals(1276, person0.getOrigin());
      assertTrue(person0.isDestinationReached());
      
      floorArray0[6] = floor6;
      environment0.floors = floorArray0;
      // Undeclared exception!
      try { 
        elevator0.enterElevator(person0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2306
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Environment environment0 = new Environment(2306);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = null;
      environment0.floors = null;
      environment0.floors = null;
      environment0.floors = null;
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator(environment0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator((Environment) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Environment environment0 = new Environment(5616);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertNotNull(elevator0);
      
      elevator0.weight = (-1122);
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      elevator0.env = environment0;
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      elevator0.weight = 5616;
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      elevator0.floorButtons = booleanArray0;
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      environment0.floors = floorArray0;
      elevator0.timeShift();
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertNotNull(environment1);
      
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      Person person0 = new Person("VsYw@R!r.;|K9*EW", 1, 0, 0, environment0);
      assertEquals(1, person0.getWeight());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertEquals(0, person0.getDestination());
      assertEquals(0, person0.getOrigin());
      assertFalse(person0.isDestinationReached());
      assertNotNull(person0);
      
      floor1.addWaitingPerson(person0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertEquals(1, person0.getWeight());
      assertEquals("VsYw@R!r.;|K9*EW", person0.getName());
      assertEquals(0, person0.getDestination());
      assertEquals(0, person0.getOrigin());
      assertFalse(person0.isDestinationReached());
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertNotNull(elevator0);
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      elevator0.floorButtons = booleanArray0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      elevator0.env = environment0;
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      boolean boolean0 = elevator0.isIdle();
      assertFalse(boolean0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor0));
      assertFalse(floor1.equals((Object)floor2));
      assertNotSame(floor1, floor0);
      assertNotSame(floor1, floor2);
      assertEquals(0, floor1.getFloorID());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertNotNull(environment1);
      
      int int0 = elevator0.getCurrentFloorID();
      assertSame(environment0, environment1);
      assertEquals(1, int0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertFalse(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertTrue(boolean1);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      floor0.callElevator();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertEquals(1, floor0.getFloorID());
      
      floor0.reset();
      assertFalse(floor0.equals((Object)floor2));
      assertFalse(floor0.equals((Object)floor1));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor2);
      assertNotSame(floor0, floor1);
      assertEquals(1, floor0.getFloorID());
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertSame(environment0, environment1);
      assertFalse(boolean2);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      boolean boolean3 = elevator0.isBlocked();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean3);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      
      String string0 = elevator0.toString();
      assertSame(environment0, environment1);
      assertEquals("Elevator [_] at 1 heading up", string0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.isEmpty());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertNotNull(string0);
      
      Person person1 = null;
      try {
        person1 = new Person("w]w/3h", (-1156), (-269), 1, environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -269
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Environment environment0 = new Environment(5616);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      elevator0.weight = (-1121);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      elevator0.currentHeading = elevator_Direction0;
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      elevator0.weight = 5616;
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      
      elevator0.timeShift();
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isBlocked());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isBlocked());
      assertNotNull(environment1);
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertTrue(elevator0.isEmpty());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.areDoorsOpen());
      assertTrue(elevator0.isBlocked());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1);
      assertEquals(1, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 0);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(0, floor1.getFloorID());
      assertNotNull(floor1);
      
      floorArray0[1] = floor1;
      floor1.reset();
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      Floor floor2 = new Floor(environment0, 0);
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor0));
      assertEquals(0, floor2.getFloorID());
      assertNotNull(floor2);
      
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      elevator0.env = environment0;
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      boolean boolean0 = elevator0.isIdle();
      assertTrue(boolean0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      
      floor2.callElevator();
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor0));
      assertNotSame(floor2, floor1);
      assertNotSame(floor2, floor0);
      assertEquals(0, floor2.getFloorID());
      
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
      assertNotNull(elevator_DoorStateArray0);
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(0, floor1.getFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(environment1);
      
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      int int0 = elevator0.getCurrentFloorID();
      assertSame(environment0, environment1);
      assertEquals(0, int0);
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      Elevator.Direction[] elevator_DirectionArray0 = Elevator.Direction.values();
      assertEquals(2, elevator_DirectionArray0.length);
      assertNotNull(elevator_DirectionArray0);
      
      boolean boolean1 = elevator0.areDoorsOpen();
      assertFalse(boolean1 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean1);
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      floor0.reset();
      assertFalse(floor0.equals((Object)floor1));
      assertFalse(floor0.equals((Object)floor2));
      assertSame(environment0, environment1);
      assertNotSame(floor0, floor1);
      assertNotSame(floor0, floor2);
      assertEquals(1, floor0.getFloorID());
      
      elevator0.weight = 3515;
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      elevator0.timeShift();
      assertSame(environment0, environment1);
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(environment0, environment1);
      assertFalse(boolean2);
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      Elevator.DoorState[] elevator_DoorStateArray1 = Elevator.DoorState.values();
      assertFalse(elevator_DoorStateArray1.equals((Object)elevator_DoorStateArray0));
      assertNotSame(elevator_DoorStateArray1, elevator_DoorStateArray0);
      assertEquals(2, elevator_DoorStateArray1.length);
      assertNotNull(elevator_DoorStateArray1);
      
      boolean boolean3 = elevator0.isBlocked();
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertSame(environment0, environment1);
      assertFalse(boolean3);
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      String string0 = elevator0.toString();
      assertSame(environment0, environment1);
      assertEquals("Elevator []  at 1 heading up", string0);
      assertFalse(elevator0.isBlocked());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Environment environment0 = new Environment(3);
      assertNotNull(environment0);
      
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 3);
      assertEquals(3, floor0.getFloorID());
      assertNotNull(floor0);
      
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      elevator0.timeShift();
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals((-1), elevator0.getCurrentFloorID());
      
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      environment0.floors = floorArray0;
      Elevator.Direction elevator_Direction1 = elevator0.getCurrentDirection();
      assertSame(elevator_Direction1, elevator_Direction0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals((-1), elevator0.getCurrentFloorID());
      
      String string0 = elevator0.toString();
      assertEquals("Elevator []  at -1 heading down", string0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals((-1), elevator0.getCurrentFloorID());
      assertNotNull(string0);
      
      Elevator.Direction elevator_Direction2 = elevator0.getCurrentDirection();
      assertSame(elevator_Direction2, elevator_Direction1);
      assertSame(elevator_Direction2, elevator_Direction0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals((-1), elevator0.getCurrentFloorID());
      
      Environment environment1 = elevator0.getEnv();
      assertSame(environment0, environment1);
      assertSame(environment1, environment0);
      assertEquals(Elevator.Direction.down, elevator0.getCurrentDirection());
      assertFalse(elevator0.areDoorsOpen());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.isEmpty());
      assertEquals((-1), elevator0.getCurrentFloorID());
      assertNotNull(environment1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Environment environment0 = new Environment(5998);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertNotNull(elevator0);
      
      Person person0 = new Person("", 5998, 1276, 376, environment0);
      assertEquals(1276, person0.getOrigin());
      assertEquals(376, person0.getDestination());
      assertFalse(person0.isDestinationReached());
      assertEquals(5998, person0.getWeight());
      assertEquals("", person0.getName());
      assertNotNull(person0);
      
      Floor floor0 = new Floor(environment0, 1276);
      assertEquals(1276, floor0.getFloorID());
      assertNotNull(floor0);
      
      Floor floor1 = new Floor(environment0, 1276);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(1276, floor1.getFloorID());
      assertNotNull(floor1);
      
      Floor floor2 = new Floor(environment0, 2870);
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor0));
      assertEquals(2870, floor2.getFloorID());
      assertNotNull(floor2);
      
      floor2.processWaitingPersons(elevator0);
      assertFalse(floor2.equals((Object)floor1));
      assertFalse(floor2.equals((Object)floor0));
      assertNotSame(floor2, floor1);
      assertNotSame(floor2, floor0);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(2870, floor2.getFloorID());
      
      floor1.reset();
      assertFalse(floor1.equals((Object)floor2));
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor2);
      assertNotSame(floor1, floor0);
      assertEquals(1276, floor1.getFloorID());
      
      Floor floor3 = new Floor(environment0, 2870);
      assertFalse(floor3.equals((Object)floor1));
      assertFalse(floor3.equals((Object)floor0));
      assertFalse(floor3.equals((Object)floor2));
      assertEquals(2870, floor3.getFloorID());
      assertNotNull(floor3);
      
      Floor floor4 = environment0.getFloor(1);
      assertFalse(floor4.equals((Object)floor3));
      assertFalse(floor4.equals((Object)floor2));
      assertFalse(floor4.equals((Object)floor1));
      assertFalse(floor4.equals((Object)floor0));
      assertNotSame(floor4, floor3);
      assertNotSame(floor4, floor2);
      assertNotSame(floor4, floor1);
      assertNotSame(floor4, floor0);
      assertEquals(1, floor4.getFloorID());
      assertNotNull(floor4);
      
      boolean boolean0 = floor4.hasCall();
      assertFalse(floor4.equals((Object)floor3));
      assertFalse(floor4.equals((Object)floor2));
      assertFalse(floor4.equals((Object)floor1));
      assertFalse(floor4.equals((Object)floor0));
      assertNotSame(floor4, floor3);
      assertNotSame(floor4, floor2);
      assertNotSame(floor4, floor1);
      assertNotSame(floor4, floor0);
      assertFalse(boolean0);
      assertEquals(1, floor4.getFloorID());
      
      person0.leaveElevator();
      assertEquals(1276, person0.getOrigin());
      assertTrue(person0.isDestinationReached());
      assertEquals(376, person0.getDestination());
      assertEquals(5998, person0.getWeight());
      assertEquals("", person0.getName());
      
      elevator0.enterElevator(person0);
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertEquals(1276, person0.getOrigin());
      assertTrue(person0.isDestinationReached());
      assertEquals(376, person0.getDestination());
      assertEquals(5998, person0.getWeight());
      assertEquals("", person0.getName());
      
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(0, int0);
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean1 = elevator0.isEmpty();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      int int1 = elevator0.getCurrentFloorID();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      
      boolean boolean3 = elevator0.leaveElevator(person0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertEquals(1276, person0.getOrigin());
      assertTrue(person0.isDestinationReached());
      assertEquals(376, person0.getDestination());
      assertEquals(5998, person0.getWeight());
      assertEquals("", person0.getName());
      
      boolean boolean4 = elevator0.isEmpty();
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertFalse(elevator0.isBlocked());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      
      elevator0.timeShift();
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
      
      elevator0.timeShift();
      assertFalse(elevator0.areDoorsOpen());
      assertEquals(2, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isBlocked());
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Environment environment0 = new Environment(5998);
      assertNotNull(environment0);
      
      Elevator elevator0 = new Elevator(environment0, false);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertNotNull(elevator0);
      
      Person person0 = new Person("", 5998, 1276, 376, environment0);
      assertEquals("", person0.getName());
      assertEquals(1276, person0.getOrigin());
      assertEquals(376, person0.getDestination());
      assertFalse(person0.isDestinationReached());
      assertEquals(5998, person0.getWeight());
      assertNotNull(person0);
      
      Floor floor0 = new Floor(environment0, 1276);
      assertEquals(1276, floor0.getFloorID());
      assertNotNull(floor0);
      
      Floor floor1 = new Floor(environment0, 2870);
      assertFalse(floor1.equals((Object)floor0));
      assertEquals(2870, floor1.getFloorID());
      assertNotNull(floor1);
      
      floor0.callElevator();
      assertFalse(floor0.equals((Object)floor1));
      assertNotSame(floor0, floor1);
      assertEquals(1276, floor0.getFloorID());
      
      floor1.processWaitingPersons(elevator0);
      assertFalse(floor1.equals((Object)floor0));
      assertNotSame(floor1, floor0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals(2870, floor1.getFloorID());
      
      floor0.reset();
      assertFalse(floor0.equals((Object)floor1));
      assertNotSame(floor0, floor1);
      assertEquals(1276, floor0.getFloorID());
      
      Floor floor2 = new Floor(environment0, 2870);
      assertFalse(floor2.equals((Object)floor0));
      assertFalse(floor2.equals((Object)floor1));
      assertEquals(2870, floor2.getFloorID());
      assertNotNull(floor2);
      
      Floor floor3 = environment0.getFloor(1);
      assertFalse(floor3.equals((Object)floor2));
      assertFalse(floor3.equals((Object)floor1));
      assertFalse(floor3.equals((Object)floor0));
      assertNotSame(floor3, floor2);
      assertNotSame(floor3, floor1);
      assertNotSame(floor3, floor0);
      assertEquals(1, floor3.getFloorID());
      assertNotNull(floor3);
      
      floor3.callElevator();
      assertFalse(floor3.equals((Object)floor2));
      assertFalse(floor3.equals((Object)floor1));
      assertFalse(floor3.equals((Object)floor0));
      assertNotSame(floor3, floor2);
      assertNotSame(floor3, floor1);
      assertNotSame(floor3, floor0);
      assertEquals(1, floor3.getFloorID());
      
      boolean boolean0 = floor3.hasCall();
      assertFalse(floor3.equals((Object)floor2));
      assertFalse(floor3.equals((Object)floor1));
      assertFalse(floor3.equals((Object)floor0));
      assertNotSame(floor3, floor2);
      assertNotSame(floor3, floor1);
      assertNotSame(floor3, floor0);
      assertTrue(boolean0);
      assertEquals(1, floor3.getFloorID());
      
      person0.leaveElevator();
      assertEquals("", person0.getName());
      assertEquals(1276, person0.getOrigin());
      assertEquals(376, person0.getDestination());
      assertEquals(5998, person0.getWeight());
      assertTrue(person0.isDestinationReached());
      
      elevator0.enterElevator(person0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals("", person0.getName());
      assertEquals(1276, person0.getOrigin());
      assertEquals(376, person0.getDestination());
      assertEquals(5998, person0.getWeight());
      assertTrue(person0.isDestinationReached());
      
      int int0 = elevator0.getCurrentFloorID();
      assertEquals(0, int0);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean1 = elevator0.isEmpty();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean2 = elevator0.buttonForFloorIsPressed(1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      int int1 = elevator0.getCurrentFloorID();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertFalse(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      boolean boolean3 = elevator0.leaveElevator(person0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertEquals("", person0.getName());
      assertEquals(1276, person0.getOrigin());
      assertEquals(376, person0.getDestination());
      assertEquals(5998, person0.getWeight());
      assertTrue(person0.isDestinationReached());
      
      boolean boolean4 = elevator0.isEmpty();
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4);
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(0, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      
      elevator0.timeShift();
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
      assertFalse(elevator0.areDoorsOpen());
      
      elevator0.timeShift();
      assertEquals(Elevator.Direction.up, elevator0.getCurrentDirection());
      assertTrue(elevator0.areDoorsOpen());
      assertEquals(1, elevator0.getCurrentFloorID());
      assertTrue(elevator0.isEmpty());
      assertFalse(elevator0.isBlocked());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Environment environment0 = new Environment(27);
      Elevator elevator0 = new Elevator(environment0, false, 11, false);
      elevator0.timeShift();
      Elevator.DoorState.values();
      elevator0.isBlocked();
      elevator0.toString();
      Person person0 = new Person((String) null, 2091, 0, (-268), environment0);
      elevator0.leaveElevator(person0);
      elevator0.env = environment0;
      // Undeclared exception!
      try { 
        elevator0.enterElevator(person0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -268
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Environment environment0 = new Environment(27);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.timeShift();
      elevator0.isBlocked();
      elevator0.toString();
      Person person0 = new Person("Elevator []  at 1 heading up", 27, 0, 27, environment0);
      person0.leaveElevator();
      elevator0.isEmpty();
      elevator0.isBlocked();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator_Direction0.reverse();
      elevator0.timeShift();
      Elevator.DoorState[] elevator_DoorStateArray0 = Elevator.DoorState.values();
      assertEquals(2, elevator_DoorStateArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Environment environment0 = new Environment(1);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 1);
      floorArray0[0] = floor0;
      Floor floor1 = environment0.getFloor(0);
      floorArray0[1] = floor1;
      floor1.reset();
      Floor floor2 = new Floor(environment0, 0);
      Person person0 = new Person("VsYw@R!r.;|K9*EW", 1, 0, 0, environment0);
      person0.leaveElevator();
      floor1.addWaitingPerson(person0);
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.env = environment0;
      elevator0.isIdle();
      floor1.reset();
      Elevator.DoorState.values();
      floor1.addWaitingPerson(person0);
      floor1.processWaitingPersons(elevator0);
      elevator0.getEnv();
      Elevator.Direction.values();
      elevator0.areDoorsOpen();
      floor0.callElevator();
      floor0.reset();
      elevator0.timeShift();
      elevator0.buttonForFloorIsPressed(1);
      Elevator.DoorState.values();
      elevator0.isBlocked();
      elevator0.toString();
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("Elevator [_] at 0 heading up");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.Elevator [_] at 0 heading up
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
