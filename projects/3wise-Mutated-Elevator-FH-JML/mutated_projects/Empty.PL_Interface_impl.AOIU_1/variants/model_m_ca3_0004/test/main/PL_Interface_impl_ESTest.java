/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 07:54:56 GMT 2020
 */

package main;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Environment;
import java.util.List;
import main.PL_Interface_impl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PL_Interface_impl_ESTest extends PL_Interface_impl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Random.setNextRandom(3);
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      int int0 = 1930;
      String[] stringArray0 = null;
      pL_Interface_impl0.checkOnlySpecification((-386));
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.randomSequenceOfActions(1930);
      pL_Interface_impl0.isAbortedRun();
      Random.setNextRandom(3);
      pL_Interface_impl0.start(3, (-1));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      PL_Interface_impl.actionHistory = null;
      PL_Interface_impl.executedUnimplementedAction = false;
      pL_Interface_impl0.getExecutedActions();
      // Undeclared exception!
      try { 
        PL_Interface_impl.listToString((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      Environment environment0 = pL_Interface_impl0.env;
      pL_Interface_impl0.env = null;
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.start(3, (-1));
      Random.setNextRandom(357913942);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.isAbortedRun();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-3487));
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.test((-3487), (-3487));
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.getExecutedActions();
      PL_Interface_impl.getIntegerMinMax(0, 1120);
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.Specification13();
      PL_Interface_impl.getIntegerMinMax((-3487), 0);
      pL_Interface_impl0.start(6, 159);
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-3487));
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification3();
      PL_Interface_impl.getIntegerMinMax((-1743), 6);
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.randomSequenceOfActions((-1568));
      pL_Interface_impl0.randomSequenceOfActions(6);
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.test(6, (-1));
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "G%?n#MD^rM7";
      stringArray0[1] = "V.plLXhuo>1a";
      stringArray0[2] = "g!@`eOh]vP*XKJi;F&";
      PL_Interface_impl.main(stringArray0);
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.test(5, (-1));
      pL_Interface_impl0.test((-1), 5);
      pL_Interface_impl0.randomSequenceOfActions(3449);
      String[] stringArray1 = new String[4];
      pL_Interface_impl0.modifiedrandomSequenceOfActions(757);
      pL_Interface_impl0.env = null;
      stringArray1[0] = "BigMac";
      stringArray1[1] = "";
      stringArray1[2] = "oR&Xh;D";
      stringArray1[3] = "close";
      PL_Interface_impl.main(stringArray1);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.Specification9();
      PL_Interface_impl.listToString(list0);
      pL_Interface_impl0.Specification2();
      int int0 = 6;
      pL_Interface_impl0.randomSequenceOfActions(6);
      pL_Interface_impl0.randomSequenceOfActions((-193));
      pL_Interface_impl0.test(6, 456);
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.checkOnlySpecification((-193));
      List<String> list1 = null;
      // Undeclared exception!
      try { 
        PL_Interface_impl.listToString((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-2218));
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.getIntegerMinMax((-2989), 6);
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      PL_Interface_impl.getIntegerMinMax(1913, 1549);
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification9();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(25);
      pL_Interface_impl0.isAbortedRun();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.getIntegerMinMax(878, 1);
      pL_Interface_impl0.modifiedrandomSequenceOfActions(878);
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.randomSequenceOfActions(1);
      pL_Interface_impl0.Specification13();
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.start(0, 1782);
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.checkOnlySpecification(0);
      // Undeclared exception!
      pL_Interface_impl0.Specification3();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.start((-1), 6);
      pL_Interface_impl0.test((-651), (-651));
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification3();
      PL_Interface_impl.getIntegerMinMax((-4185), (-4185));
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1743);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification9();
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.test((-246), (-246));
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(731);
      pL_Interface_impl0.checkOnlySpecification((-1));
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification9();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.env = null;
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.start(1638, 1638);
      pL_Interface_impl0.env = null;
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.getExecutedActions();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.Specification2();
      // Undeclared exception!
      pL_Interface_impl0.Specification13();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.getIntegerMinMax(0, 0);
      pL_Interface_impl0.modifiedrandomSequenceOfActions(967);
      pL_Interface_impl0.checkOnlySpecification(0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "(U%5HL|";
      PL_Interface_impl.main(stringArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification9();
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      PL_Interface_impl.listToString(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification9();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.test(0, 0);
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.getIntegerMinMax(0, 0);
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      pL_Interface_impl0.checkOnlySpecification(364);
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification2();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification9();
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      pL_Interface_impl0.start((-1150), 5);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.Specification1();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PL_Interface_impl.getIntegerMinMax(3, 3);
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      Environment environment0 = pL_Interface_impl0.env;
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.env = null;
      pL_Interface_impl0.start(3, 0);
      pL_Interface_impl0.randomSequenceOfActions(3);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.checkOnlySpecification(1019);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.checkOnlySpecification(0);
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.start(0, 0);
      pL_Interface_impl0.Specification1();
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      pL_Interface_impl0.randomSequenceOfActions(6);
      pL_Interface_impl0.Specification9();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1560));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(4);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(1276);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      // Undeclared exception!
      pL_Interface_impl0.Specification3();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[0];
      PL_Interface_impl.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      pL_Interface_impl0.start(1868, 1868);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-3));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax(1970, 1156);
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-4676), 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(3, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(list0.contains(string0));
      assertEquals(" StartFromTop StartFromTop StartFromTop", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.randomSequenceOfActions((-1603));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-1704));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(3550, 3550);
      assertEquals(3550, int0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      
      pL_Interface_impl0.randomSequenceOfActions((-3546));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      PL_Interface_impl.executedUnimplementedAction = true;
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start((-257), 1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop bobCall", string0);
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), 1);
      assertEquals((-1), int0);
      
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.test((-1), (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      List<String> list0 = PL_Interface_impl.actionHistory;
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(string0));
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start((-4676), 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(1, 1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean1 = PL_Interface_impl.getBoolean();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(139, 139);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification14();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start((-611), (-611));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.checkOnlySpecification((-2152));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.main((String[]) null);
      int int0 = PL_Interface_impl.getIntegerMinMax(24, 24);
      assertEquals(24, int0);
      
      pL_Interface_impl0.randomSequenceOfActions((-2370));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      Environment environment0 = pL_Interface_impl0.env;
      assertNull(environment0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.start(15, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals("", string0);
      assertNotNull(string0);
      
      Random.setNextRandom(2398);
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals("", string2);
      assertNotNull(string2);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray0 = new String[3];
      int int0 = PL_Interface_impl.getIntegerMinMax(5, (-1));
      assertEquals(1, int0);
      
      stringArray0[0] = "G%?n#MD^rM7";
      stringArray0[1] = "V.plLXhuo>1a";
      stringArray0[2] = "g!@`eOh]vP*XKJi;F&";
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test(5, (-1));
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.test((-1), 5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.randomSequenceOfActions(5);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(757);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      stringArray1[0] = "BigMac";
      stringArray1[1] = "";
      stringArray1[2] = "oR&Xh;D";
      PL_Interface_impl.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS StartFromTop bobCall aliceCall angelinaCall chuckCall StartFromBottom bobCall aliceCall angelinaCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall StartFromBottom bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS StartFromBottom 3TS bobCall bobCall aliceCall", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.start(0, 0);
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.checkOnlySpecification((-2920));
      pL_Interface_impl0.test(2477, 0);
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(571);
      pL_Interface_impl0.Specification1();
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertEquals(43, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.test(0, (-42));
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop StartFromTop StartFromTop aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS StartFromBottom StartFromBottom", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.checkOnlySpecification((-1));
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      pL_Interface_impl0.Specification1();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "EdB,je-ra";
      stringArray0[1] = "aliceCall";
      stringArray0[2] = "";
      PL_Interface_impl.main(stringArray0);
      Environment environment0 = pL_Interface_impl0.env;
      pL_Interface_impl0.env = environment0;
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification13();
      PL_Interface_impl.getIntegerMinMax((-1), (-1));
      pL_Interface_impl0.test(0, (-1));
      PL_Interface_impl.getBoolean();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.randomSequenceOfActions(0);
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification1();
      PL_Interface_impl.main(stringArray0);
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification1();
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.getExecutedActions();
      PL_Interface_impl.getIntegerMinMax(0, 1120);
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.start(1505, 159);
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.randomSequenceOfActions(0);
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.test(1505, (-1));
      pL_Interface_impl0.test(159, 0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }
}
