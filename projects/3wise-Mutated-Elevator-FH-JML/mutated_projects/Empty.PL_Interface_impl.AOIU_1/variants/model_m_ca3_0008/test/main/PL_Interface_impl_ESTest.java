/*
 * This file was automatically generated by EvoSuite
 * Mon May 25 08:13:05 GMT 2020
 */

package main;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Environment;
import java.util.List;
import main.PL_Interface_impl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PL_Interface_impl_ESTest extends PL_Interface_impl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5";
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      PL_Interface_impl.main(stringArray0);
      PL_Interface_impl.getIntegerMinMax(0, 0);
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.start(24, (-1));
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      pL_Interface_impl0.checkOnlySpecification((-1));
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.start(370, 24);
      PL_Interface_impl.getIntegerMinMax(12, 0);
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.start(5, (-1));
      PL_Interface_impl.actionHistory = list0;
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.test(24, (-1));
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      Random.setNextRandom(0);
      PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      String[] stringArray0 = new String[3];
      stringArray0[1] = "5";
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      PL_Interface_impl.main(stringArray0);
      PL_Interface_impl.getIntegerMinMax(0, 0);
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.start(24, (-1));
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.start(370, 24);
      PL_Interface_impl.getIntegerMinMax(12, 0);
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.start(5, (-1));
      PL_Interface_impl.actionHistory = list0;
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.test(24, (-1));
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      Random.setNextRandom(0);
      PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      PL_Interface_impl.getIntegerMinMax(0, 0);
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.start(8, (-1));
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      pL_Interface_impl0.checkOnlySpecification((-1));
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.start(370, 8);
      PL_Interface_impl.getIntegerMinMax(0, 0);
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      PL_Interface_impl.actionHistory = list0;
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.test(8, (-1));
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      pL_Interface_impl0.Specification3();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), (-3057));
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        PL_Interface_impl.listToString((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.randomSequenceOfActions(2);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertTrue(boolean0);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(4, 7);
      assertEquals(7, int0);
      
      pL_Interface_impl0.start(4, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertNotNull(list0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertSame(list1, list0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list1.isEmpty());
      assertEquals(8, list1.size());
      assertNotNull(list1);
      
      List<String> list2 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertSame(list2, list1);
      assertSame(list2, list0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list2.isEmpty());
      assertEquals(8, list2.size());
      assertNotNull(list2);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1285);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.test(1, 1);
      PL_Interface_impl.getIntegerMinMax(2630, 2630);
      pL_Interface_impl0.randomSequenceOfActions(1);
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification1();
      PL_Interface_impl.getIntegerMinMax((-113), 2630);
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.randomSequenceOfActions(2630);
      PL_Interface_impl.getIntegerMinMax(2630, (-1011));
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.isAbortedRun();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.start(1, 2630);
      // Undeclared exception!
      pL_Interface_impl0.Specification13();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.randomSequenceOfActions((-1060));
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      pL_Interface_impl0.Specification3();
      PL_Interface_impl.getIntegerMinMax(0, 0);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.randomSequenceOfActions(4848);
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      pL_Interface_impl0.test((-224), 0);
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification13();
      // Undeclared exception!
      pL_Interface_impl0.test(0, 4848);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.getIntegerMinMax(878, 1);
      pL_Interface_impl0.modifiedrandomSequenceOfActions(878);
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.randomSequenceOfActions(1);
      pL_Interface_impl0.Specification13();
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.start(0, 1782);
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.checkOnlySpecification(0);
      // Undeclared exception!
      pL_Interface_impl0.Specification3();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification9();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.test(0, 0);
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.getIntegerMinMax(0, 0);
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      pL_Interface_impl0.checkOnlySpecification(364);
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.Specification2();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.test((-246), (-246));
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(731);
      pL_Interface_impl0.checkOnlySpecification((-1));
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification9();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      Environment environment0 = null;
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(1638, 1638);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(557);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax(3, 3);
      assertEquals(3, int0);
      
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      Environment environment0 = pL_Interface_impl0.env;
      assertNull(environment0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(3, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(3);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop StartFromTop angelinaCall chuckCall monicaCall", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.checkOnlySpecification(1019);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax(1970, 1156);
      assertEquals(1970, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(list0.contains(string0));
      assertEquals("", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax((-1678), (-1678));
      assertEquals((-1678), int0);
      
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1678));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-1678), 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop StartFromTop", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(0, 0);
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      //  // Unstable assertion: assertEquals(54, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.randomSequenceOfActions(6);
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(20, list0.size());
      assertNotNull(list0);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(list0.contains(string0));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(20, list0.size());
      assertNotNull(string0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(40);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "";
      stringArray0[2] = "ElevatorSystem.Floor";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "F;;wTH";
      stringArray0[7] = "_GlAs}DId~^Dfu>";
      PL_Interface_impl.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      pL_Interface_impl0.randomSequenceOfActions(1505);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.main((String[]) null);
      int int0 = PL_Interface_impl.getIntegerMinMax(24, 24);
      assertEquals(24, int0);
      
      pL_Interface_impl0.randomSequenceOfActions((-2370));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[0];
      PL_Interface_impl.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      pL_Interface_impl0.start(1868, 1868);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-3));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      PL_Interface_impl.main(stringArray1);
      assertEquals(0, stringArray1.length);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.randomSequenceOfActions((-1603));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      
      PL_Interface_impl.executedUnimplementedAction = false;
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals("", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(0, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-4676));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start((-4676), 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(list0.contains(string0));
      assertEquals(" StartFromTop StartFromTop StartFromTop", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(1, 1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean1 = PL_Interface_impl.getBoolean();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.checkOnlySpecification((-2152));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.executedUnimplementedAction = false;
      int int0 = 1;
      int int1 = 950;
      pL_Interface_impl0.start((-2675), (-2675));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.randomSequenceOfActions(1023);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(8, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS", string0);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(boolean0);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(370, 8);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      int int1 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(list0.contains(string0));
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      assertNotNull(list0);
      
      PL_Interface_impl.actionHistory = list0;
      assertEquals(19, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(19, list0.size());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(boolean1);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(8);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(string1.equals((Object)string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom monicaCall bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall", string1);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      
      pL_Interface_impl0.test(8, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom monicaCall bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall", string2);
      assertTrue(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string2);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS StartFromBottom StartFromBottom monicaCall bigMacCall 1TS bobCall 1TS StartFromBottom monicaCall bigMacCall 1TS 3TS StartFromTop angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall", string3);
      assertNotNull(string3);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertTrue(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = 0;
      int int1 = PL_Interface_impl.getIntegerMinMax((-195225787), 290);
      assertFalse(int1 == int0);
      assertEquals((-195225787), int1);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int2 = 666;
      // Undeclared exception!
      pL_Interface_impl0.randomSequenceOfActions(2451);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.test(3, 3);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start(0, (-828));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(1, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.checkOnlySpecification((-2920));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(571);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertTrue(boolean1 == boolean0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray0 = new String[2];
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop StartFromTop StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      stringArray0[0] = "";
      stringArray0[1] = "ElevatorSystem.Environment";
      String string1 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertTrue(string1.equals((Object)string0));
      assertEquals(" StartFromTop StartFromTop StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS bobCall 1TS bobCall aliceCall angelinaCall bobCall aliceCall angelinaCall chuckCall bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall 1TS monicaCall bigMacCall 1TS", string1);
      assertNotNull(string1);
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(2, stringArray0.length);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(547);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean2 = pL_Interface_impl0.isAbortedRun();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(boolean2);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop bobCall", string0);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertTrue(string1.equals((Object)string0));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(" StartFromTop bobCall", string1);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string1);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-4));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax((-4), (-4));
      assertEquals((-4), int0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(150, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start((-1818), 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-620), 2209);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      PL_Interface_impl.getIntegerMinMax((-1), (-148));
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), 1172);
      assertEquals(116, int0);
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-92));
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.test(1172, (-92));
      boolean boolean0 = PL_Interface_impl.getBoolean();
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification2();
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertEquals(" StartFromTop StartFromTop", string1);
      
      boolean boolean1 = PL_Interface_impl.getBoolean();
      assertFalse(boolean1 == boolean0);
      
      pL_Interface_impl0.env = null;
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification3();
      String[] stringArray0 = new String[0];
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      PL_Interface_impl.main(stringArray0);
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.getExecutedActions();
      PL_Interface_impl.main(stringArray0);
      PL_Interface_impl.main(stringArray0);
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(list0.contains(string0));
      assertEquals(18, list0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.start((-1), (-1));
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      pL_Interface_impl0.checkOnlySpecification((-1));
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.executedUnimplementedAction = false;
      PL_Interface_impl.getIntegerMinMax((-1), (-1));
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.checkOnlySpecification(1);
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.test(1, (-1));
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.env = null;
      pL_Interface_impl0.Specification14();
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.checkOnlySpecification((-1));
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.randomSequenceOfActions((-2733));
      pL_Interface_impl0.Specification13();
      PL_Interface_impl.main((String[]) null);
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification1();
      PL_Interface_impl.getIntegerMinMax((-1), (-1));
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.getBoolean();
      String string0 = PL_Interface_impl.listToString(list0);
      assertEquals(7, list0.size());
      assertEquals(" StartFromTop StartFromTop StartFromTop monicaCall monicaCall bigMacCall 1TS", string0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-3487));
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.test((-3487), (-3487));
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.getExecutedActions();
      PL_Interface_impl.getIntegerMinMax(8, 1120);
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.Specification13();
      PL_Interface_impl.getIntegerMinMax((-3487), 0);
      int int0 = 1505;
      pL_Interface_impl0.start(1505, 159);
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-3487));
      pL_Interface_impl0.Specification14();
      // Undeclared exception!
      pL_Interface_impl0.Specification3();
  }
}
