/*
 * This file was automatically generated by EvoSuite
 * Sat May 09 18:28:28 GMT 2020
 */

package main;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Environment;
import java.util.List;
import main.PL_Interface_impl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PL_Interface_impl_ESTest extends PL_Interface_impl_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start((-1), (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.executedUnimplementedAction = false;
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), (-1));
      assertEquals((-1), int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(1, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      Random.setNextRandom((-1));
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(list0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-2733));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main((String[]) null);
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = PL_Interface_impl.getIntegerMinMax((-1), (-1));
      assertTrue(int1 == int0);
      assertEquals((-1), int1);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean2 = PL_Interface_impl.getBoolean();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      String string0 = PL_Interface_impl.listToString(list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertEquals(7, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertEquals(" StartFromTop StartFromTop StartFromTop chuckCall monicaCall monicaCall bigMacCall", string0);
      assertFalse(list0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "StartFromBottom";
      Environment environment0 = new Environment(1);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(2, stringArray0.length);
      
      pL_Interface_impl0.randomSequenceOfActions(1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(2, stringArray0.length);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(1, 271);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.Specification1();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      List<String> list0 = null;
      // Undeclared exception!
      try { 
        PL_Interface_impl.listToString((List<String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("main.PL_Interface_impl", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PL_Interface_impl.main((String[]) null);
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = 517;
      pL_Interface_impl0.test(517, 517);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = PL_Interface_impl.getIntegerMinMax(24, 24);
      assertFalse(int1 == int0);
      assertEquals(24, int1);
      
      // Undeclared exception!
      pL_Interface_impl0.Specification2();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(24, 24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertEquals(" StartFromTop aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall", string0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.Specification13();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-3487));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-3487), (-3487));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 1120);
      assertEquals(336, int0);
      
      boolean boolean2 = PL_Interface_impl.getBoolean();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = PL_Interface_impl.getIntegerMinMax((-3487), 0);
      assertFalse(int1 == int0);
      assertEquals((-1743), int1);
      
      int int2 = 1505;
      pL_Interface_impl0.start(1505, 159);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-3487));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.Specification14();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(boolean0);
      
      pL_Interface_impl0.test((-1), (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      
      PL_Interface_impl.executedUnimplementedAction = false;
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = 24;
      pL_Interface_impl0.start(0, 24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list1 = pL_Interface_impl0.getExecutedActions();
      assertSame(list1, list0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(25, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      int int1 = 716;
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int2 = PL_Interface_impl.getIntegerMinMax(716, 716);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(716, int2);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean1 = PL_Interface_impl.getBoolean();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int3 = PL_Interface_impl.getIntegerMinMax(0, 716);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(501, int3);
      
      pL_Interface_impl0.test(0, 24);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.Specification3();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      int int0 = 0;
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = (-987);
      pL_Interface_impl0.test(5, (-987));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int2 = 1;
      pL_Interface_impl0.test((-987), 1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(574);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      pL_Interface_impl0.test(0, 574);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean1 = PL_Interface_impl.getBoolean();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = PL_Interface_impl.getBoolean();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1034));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.executedUnimplementedAction = false;
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions(6);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test(6, 6);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean3 = PL_Interface_impl.getBoolean();
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-246), (-246));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(731);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      Environment environment0 = null;
      pL_Interface_impl0.env = null;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(1638, 1638);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      pL_Interface_impl0.randomSequenceOfActions(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      stringArray0[1] = "r_hD_gi|d8S";
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertEquals(" StartFromTop", string0);
      
      stringArray0[2] = "l':WdOLj#4c&_g,=";
      stringArray0[3] = "lSZ#0";
      stringArray0[4] = "";
      stringArray0[5] = "";
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      stringArray0[6] = "ElevatorSystem.Environment";
      stringArray0[7] = "jld%wIqW*MX";
      PL_Interface_impl.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      // Undeclared exception!
      pL_Interface_impl0.modifiedrandomSequenceOfActions(2395);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax((-1), (-3057));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PL_Interface_impl.main((String[]) null);
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1172));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(6, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-1172), (-2907));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-1704));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(3550, 3550);
      assertEquals(3550, int0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(boolean0);
      
      pL_Interface_impl0.randomSequenceOfActions((-3546));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.randomSequenceOfActions((-782));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.randomSequenceOfActions((-782));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.executedUnimplementedAction = true;
      pL_Interface_impl0.modifiedrandomSequenceOfActions(5);
      assertTrue(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax((-1678), (-1678));
      assertEquals((-1678), int0);
      
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1678));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.test((-1678), 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertEquals(" StartFromTop StartFromTop", string0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax(1, 1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.test(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(1, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      pL_Interface_impl0.checkOnlySpecification((-710));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-710));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      Environment environment0 = new Environment(1780);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      
      pL_Interface_impl0.randomSequenceOfActions(170);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(171, PL_Interface_impl.actionHistory.size());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertNotNull(string0);
      assertFalse(PL_Interface_impl.actionHistory.contains(string0));
      
      // Undeclared exception!
      pL_Interface_impl0.Specification9();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[0];
      PL_Interface_impl.main(stringArray0);
      assertEquals(0, stringArray0.length);
      
      pL_Interface_impl0.start(1868, 1868);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start((-257), 1);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertEquals(" StartFromTop bobCall", string0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, (-370));
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      boolean boolean0 = PL_Interface_impl.getBoolean();
      assertFalse(boolean0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(0, PL_Interface_impl.actionHistory.size());
      assertTrue(PL_Interface_impl.actionHistory.isEmpty());
      
      Environment environment0 = new Environment(4532);
      assertNotNull(environment0);
      
      pL_Interface_impl0.env = environment0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.randomSequenceOfActions((-1603));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification2();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification(1271);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertNotNull(pL_Interface_impl0);
      
      PL_Interface_impl.actionHistory = pL_Interface_impl0.actionHistory;
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      //  // Unstable assertion: assertEquals(12, PL_Interface_impl.actionHistory.size());
      
      PL_Interface_impl.executedUnimplementedAction = false;
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall", string0);
      
      pL_Interface_impl0.Specification1();
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(0, 0);
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification3();
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(0, (-1));
      //  // Unstable assertion: assertFalse(PL_Interface_impl.executedUnimplementedAction);
      //  // Unstable assertion: assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      List<String> list0 = PL_Interface_impl.actionHistory;
      //  // Unstable assertion: assertEquals(12, list0.size());
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertNotNull(list0);
      
      String string0 = PL_Interface_impl.listToString(list0);
      //  // Unstable assertion: assertEquals(12, list0.size());
      //  // Unstable assertion: assertFalse(list0.isEmpty());
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall", string0);
      //  // Unstable assertion: assertFalse(list0.contains(string0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(boolean0);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(14);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start((-611), (-611));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.checkOnlySpecification((-2152));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "ElevatorSystem.Floor";
      stringArray0[1] = "";
      stringArray0[2] = "ElevatorSystem.Floor";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "F;;wTH";
      stringArray0[7] = "_GlAs}DId~^Dfu>";
      PL_Interface_impl.main(stringArray0);
      assertEquals(8, stringArray0.length);
      
      // Undeclared exception!
      pL_Interface_impl0.randomSequenceOfActions(1505);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "5";
      stringArray0[1] = "no Exception";
      stringArray0[2] = "~K!2d8>P";
      pL_Interface_impl0.modifiedrandomSequenceOfActions(17);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      PL_Interface_impl.main(stringArray0);
      assertEquals(3, stringArray0.length);
      
      int int0 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertEquals(0, int0);
      
      pL_Interface_impl0.Specification3();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(17, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(17);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.checkOnlySpecification((-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string0 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(string0);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall StartFromTop monicaCall monicaCall bigMacCall 1TS StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall", string0);
      
      pL_Interface_impl0.Specification1();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(boolean0);
      
      pL_Interface_impl0.Specification13();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.start(370, 17);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      int int1 = PL_Interface_impl.getIntegerMinMax(0, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(51, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertFalse(list0.contains("~K!2d8>P"));
      
      PL_Interface_impl.actionHistory = list0;
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertEquals(51, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(PL_Interface_impl.actionHistory.isEmpty());
      assertEquals(51, PL_Interface_impl.actionHistory.size());
      
      boolean boolean1 = pL_Interface_impl0.isAbortedRun();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(17);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string1 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall StartFromTop monicaCall monicaCall bigMacCall 1TS StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall", string1);
      
      pL_Interface_impl0.test(17, (-1));
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String string2 = PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall StartFromTop monicaCall monicaCall bigMacCall 1TS StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall", string2);
      
      String string3 = PL_Interface_impl.listToString(PL_Interface_impl.actionHistory);
      assertTrue(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(" StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall StartFromTop monicaCall monicaCall bigMacCall 1TS StartFromTop chuckCall monicaCall bigMacCall 1TS bigMacCall 1TS bobCall aliceCall 3TS bobCall aliceCall angelinaCall bobCall StartFromTop monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall 1TS 3TS bobCall bobCall StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall aliceCall angelinaCall chuckCall monicaCall bigMacCall angelinaCall chuckCall monicaCall bigMacCall", string3);
      
      Random.setNextRandom(1);
      pL_Interface_impl0.Specification9();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = PL_Interface_impl.getIntegerMinMax(271, 271);
      assertEquals(271, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      assertNotNull(pL_Interface_impl0);
      
      pL_Interface_impl0.start(0, 0);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9t9W[lHB_ibw";
      stringArray0[1] = "";
      stringArray0[2] = "f\"c9g[&Way+{k!oq;";
      stringArray0[3] = "efhf;E~J845n";
      stringArray0[4] = "f\"c9g[&Way+{k!oq;";
      PL_Interface_impl.main(stringArray0);
      assertEquals(5, stringArray0.length);
      
      pL_Interface_impl0.modifiedrandomSequenceOfActions(101);
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.test((-1659), 7);
      pL_Interface_impl0.randomSequenceOfActions(7);
      pL_Interface_impl0.randomSequenceOfActions(1);
      pL_Interface_impl0.Specification9();
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      String[] stringArray0 = new String[5];
      pL_Interface_impl0.randomSequenceOfActions(3);
      stringArray0[0] = " StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall StartFromBottom 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall StartFromBottom bigMacCall";
      stringArray0[1] = " StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall StartFromBottom 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall StartFromBottom bigMacCall";
      stringArray0[2] = " StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall StartFromBottom 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall StartFromBottom bigMacCall";
      stringArray0[3] = " StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall StartFromBottom 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall StartFromBottom bigMacCall";
      stringArray0[4] = " StartFromTop bobCall aliceCall angelinaCall chuckCall monicaCall monicaCall bigMacCall StartFromBottom 3TS bobCall bobCall aliceCall angelinaCall chuckCall monicaCall StartFromBottom bigMacCall";
      PL_Interface_impl.main(stringArray0);
      pL_Interface_impl0.test(2453, (-1659));
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.randomSequenceOfActions(7);
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(0);
      pL_Interface_impl0.randomSequenceOfActions(1);
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.checkOnlySpecification((-1659));
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.test(3, 3);
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(7);
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.modifiedrandomSequenceOfActions(7);
      boolean boolean0 = pL_Interface_impl0.isAbortedRun();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      PL_Interface_impl.getIntegerMinMax((-1), (-148));
      PL_Interface_impl.getIntegerMinMax((-1), 1172);
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-92));
      pL_Interface_impl0.Specification1();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      pL_Interface_impl0.test(1172, (-92));
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.Specification2();
      pL_Interface_impl0.Specification2();
      PL_Interface_impl.listToString(pL_Interface_impl0.actionHistory);
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.env = null;
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification14();
      pL_Interface_impl0.Specification3();
      String[] stringArray0 = new String[0];
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      PL_Interface_impl.main(stringArray0);
      pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.getExecutedActions();
      PL_Interface_impl.main(stringArray0);
      PL_Interface_impl.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.start((-1), (-1));
      pL_Interface_impl0.modifiedrandomSequenceOfActions((-1));
      pL_Interface_impl0.checkOnlySpecification((-1));
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.executedUnimplementedAction = false;
      PL_Interface_impl.getIntegerMinMax((-1), (-1));
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.test(1, (-1));
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification14();
      Random.setNextRandom((-1));
      pL_Interface_impl0.env = null;
      pL_Interface_impl0.Specification14();
      List<String> list0 = pL_Interface_impl0.getExecutedActions();
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.getBoolean();
      pL_Interface_impl0.checkOnlySpecification((-1));
      pL_Interface_impl0.Specification9();
      pL_Interface_impl0.randomSequenceOfActions((-2733));
      pL_Interface_impl0.Specification13();
      pL_Interface_impl0.isAbortedRun();
      pL_Interface_impl0.Specification1();
      PL_Interface_impl.getIntegerMinMax((-1), (-1));
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification3();
      pL_Interface_impl0.Specification14();
      PL_Interface_impl.getBoolean();
      PL_Interface_impl.listToString(list0);
      pL_Interface_impl0.Specification14();
      assertFalse(PL_Interface_impl.executedUnimplementedAction);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PL_Interface_impl.getBoolean();
      PL_Interface_impl.getIntegerMinMax((-3487), 1120);
      PL_Interface_impl.getIntegerMinMax((-3487), 0);
      PL_Interface_impl.getIntegerMinMax((-2790), (-3487));
      PL_Interface_impl pL_Interface_impl0 = new PL_Interface_impl();
      pL_Interface_impl0.Specification3();
      assertFalse(pL_Interface_impl0.isAbortedRun());
  }
}
