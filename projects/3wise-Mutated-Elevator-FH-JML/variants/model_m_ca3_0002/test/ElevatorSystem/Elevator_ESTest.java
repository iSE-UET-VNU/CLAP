/*
 * This file was automatically generated by EvoSuite
 * Tue May 05 19:56:02 GMT 2020
 */

package ElevatorSystem;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ElevatorSystem.Elevator;
import ElevatorSystem.Environment;
import ElevatorSystem.Floor;
import ElevatorSystem.Person;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elevator_ESTest extends Elevator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Environment environment0 = new Environment(2580);
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      Elevator.Direction elevator_Direction0 = Elevator.Direction.up;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.timeShift();
      elevator0.areDoorsOpen();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Environment environment0 = new Environment(2580);
      Elevator elevator0 = new Elevator(environment0, true, 1, true);
      elevator0.timeShift();
      Elevator.Direction.values();
      // Undeclared exception!
      elevator0.isExecutiveFloorCalling();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Environment environment0 = new Environment(744);
      Elevator elevator0 = new Elevator(environment0, false, 744, true);
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = new Floor(environment0, 744);
      floor0.callElevator();
      floorArray0[0] = floor0;
      floor0.getFloorID();
      Floor floor1 = new Floor(environment0, 744);
      floorArray0[1] = floor1;
      floor1.reset();
      environment0.floors = floorArray0;
      floor0.getFloorID();
      Floor floor2 = new Floor(environment0, 744);
      floorArray0[2] = floor2;
      environment0.floors = floorArray0;
      elevator0.toString();
      environment0.floors = null;
      environment0.floors = null;
      elevator0.toString();
      elevator0.getCurrentDirection();
      elevator0.getCurrentDirection();
      // Undeclared exception!
      try { 
        elevator0.isExecutiveFloorCalling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.executiveFloor = 0;
      elevator0.weight = 0;
      elevator0.isExecutiveFloor(0);
      Person person0 = null;
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      elevator0.leaveElevator((Person) null);
      elevator0.toString();
      elevator0.getCurrentFloorID();
      environment0.floors = floorArray0;
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Environment environment0 = new Environment(7);
      Elevator elevator0 = new Elevator(environment0, true);
      Person person0 = new Person(" Ymw;.EC?wMnws", 0, 0, 7, environment0);
      elevator0.leaveElevator(person0);
      elevator0.isIdle();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Floor[] floorArray0 = new Floor[5];
      Environment environment0 = new Environment(785);
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      elevator0.pressInLiftFloorButton(634);
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Environment environment0 = new Environment(2580);
      Elevator elevator0 = new Elevator(environment0, false, 26, false);
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Environment environment0 = new Environment(2580);
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Environment environment0 = new Environment(1722);
      Floor[] floorArray0 = new Floor[1];
      environment0.floors = floorArray0;
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      elevator0.isEmpty();
      Elevator.DoorState.values();
      environment0.floors = floorArray0;
      elevator0.getCurrentDirection();
      Person person0 = new Person("rZ@&kSv)jPYq", 1211, 0, 0, environment0);
      elevator0.enterElevator(person0);
      elevator0.isBlocked();
      elevator0.getCurrentFloorID();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 3487;
      Environment environment0 = new Environment(3487);
      Elevator elevator0 = new Elevator(environment0, true);
      // Undeclared exception!
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Environment environment0 = new Environment(845);
      Elevator elevator0 = new Elevator(environment0, false, 845, false);
      elevator0.buttonForFloorIsPressed(695);
      Elevator.DoorState.values();
      String string0 = "";
      Floor[] floorArray0 = new Floor[3];
      Floor floor0 = environment0.getFloor(0);
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, 695);
      floorArray0[1] = floor1;
      // Undeclared exception!
      try { 
        environment0.getFloor(845);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 845
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1;
      Environment environment0 = new Environment(1);
      int int1 = 995;
      Elevator elevator0 = new Elevator(environment0, true, 995, false);
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.isIdle();
      elevator0.getCurrentFloorID();
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("e/3r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.e/3r
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Environment environment0 = new Environment(785);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(785);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 785
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1127;
      Environment environment0 = new Environment(1127);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      Elevator.DoorState elevator_DoorState1 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState1;
      Elevator.DoorState elevator_DoorState2 = Elevator.DoorState.open;
      elevator0.toString();
      elevator0.doors = elevator_DoorState2;
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("Elevator []  at 0 heading up");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.Elevator []  at 0 heading up
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      Elevator.DoorState elevator_DoorState0 = Elevator.DoorState.close;
      elevator0.doors = elevator_DoorState0;
      elevator0.weight = 0;
      elevator0.isExecutiveFloor(0);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      elevator0.leaveElevator((Person) null);
      elevator0.toString();
      elevator0.getCurrentFloorID();
      environment0.floors = floorArray0;
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator_Direction0.reverse();
      elevator0.leaveElevator((Person) null);
      elevator0.isEmpty();
      elevator0.isExecutiveFloor(1166);
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("Elevator []  at 0 heading up");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.Elevator []  at 0 heading up
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Elevator.Direction.values();
      int int0 = 0;
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      floor0.reset();
      Floor floor1 = new Floor(environment0, 0);
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      elevator0.areDoorsOpen();
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.areDoorsOpen();
      Elevator.DoorState.values();
      elevator0.floorButtons = null;
      elevator0.areDoorsOpen();
      // Undeclared exception!
      try { 
        elevator0.isIdle();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Elevator.Direction.values();
      Environment environment0 = new Environment(1862);
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator0.toString();
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      elevator0.floorButtons = booleanArray0;
      // Undeclared exception!
      try { 
        elevator0.enterElevator((Person) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Environment environment0 = new Environment(559);
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      Person person0 = new Person("", 722, 1, 2728, environment0);
      // Undeclared exception!
      try { 
        elevator0.enterElevator(person0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2728
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Elevator.Direction.values();
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Environment environment0 = new Environment(176);
      Elevator elevator0 = new Elevator(environment0, false);
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      elevator0.floorButtons = booleanArray0;
      elevator0.isExecutiveFloorCalling();
      // Undeclared exception!
      try { 
        elevator0.pressInLiftFloorButton(176);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 176
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, true);
      elevator0.isIdle();
      elevator0.timeShift();
      environment0.floors = floorArray0;
      elevator0.isExecutiveFloorCalling();
      elevator0.isEmpty();
      // Undeclared exception!
      try { 
        Elevator.Direction.valueOf("MS%;=y%$twk^NZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.Direction.MS%;=y%$twk^NZ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Environment environment0 = new Environment(2580);
      Elevator elevator0 = new Elevator(environment0, false);
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = environment0.getFloor(1576);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      elevator0.timeShift();
      elevator0.getCurrentFloorID();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Environment environment0 = new Environment(1403);
      Floor[] floorArray0 = new Floor[1];
      Floor floor0 = new Floor(environment0, 1403);
      floorArray0[0] = floor0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false);
      Elevator.Direction elevator_Direction0 = Elevator.Direction.down;
      elevator0.currentHeading = elevator_Direction0;
      elevator0.getCurrentDirection();
      elevator0.isExecutiveFloorCalling();
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Environment environment0 = new Environment(2266);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.getCurrentDirection();
      elevator0.isIdle();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 3391;
      Environment environment0 = new Environment(3391);
      Elevator elevator0 = new Elevator(environment0, true, 3391, false);
      // Undeclared exception!
      try { 
        elevator0.pressInLiftFloorButton(3391);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3391
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Environment environment0 = new Environment(2580);
      Elevator elevator0 = new Elevator(environment0, false, 0, false);
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Environment environment0 = new Environment(513);
      Elevator elevator0 = new Elevator(environment0, true, 513, false);
      elevator0.getEnv();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.weight = 0;
      elevator0.isExecutiveFloor(0);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      elevator0.leaveElevator((Person) null);
      elevator0.toString();
      elevator0.getCurrentFloorID();
      environment0.floors = floorArray0;
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator_Direction0.reverse();
      elevator0.leaveElevator((Person) null);
      elevator0.isEmpty();
      elevator0.isExecutiveFloor(1166);
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("Elevator [_] at 0 heading up");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.Elevator [_] at 0 heading up
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.weight = 0;
      elevator0.executiveFloor = (-706);
      elevator0.isExecutiveFloor(0);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      elevator0.leaveElevator((Person) null);
      elevator0.toString();
      elevator0.getCurrentFloorID();
      Elevator.Direction elevator_Direction0 = elevator0.currentHeading;
      elevator_Direction0.reverse();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.isExecutiveFloorCalling();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false, (-52), false);
      elevator0.isIdle();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Environment environment0 = null;
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator((Environment) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Environment environment0 = null;
      int int0 = 0;
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator((Environment) null, true, 0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Environment environment0 = new Environment(0);
      Floor[] floorArray0 = new Floor[0];
      environment0.floors = floorArray0;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, true, 0, false);
      elevator0.env = environment0;
      // Undeclared exception!
      try { 
        elevator0.timeShift();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Environment environment0 = new Environment(2604);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.currentFloorID = 656;
      Environment environment1 = elevator0.getEnv();
      Environment environment2 = elevator0.getEnv();
      elevator0.timeShift();
      Floor[] floorArray0 = new Floor[9];
      Floor floor0 = new Floor(environment0, 0);
      floorArray0[0] = floor0;
      Floor floor1 = environment0.getFloor(656);
      floorArray0[1] = floor1;
      Floor floor2 = environment2.getFloor(657);
      floorArray0[2] = floor2;
      // Undeclared exception!
      try { 
        environment1.getFloor(2847);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2847
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Environment environment0 = new Environment(2549);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.toString();
      elevator0.isBlocked();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Environment environment0 = new Environment(202);
      Elevator elevator0 = new Elevator(environment0, true, 202, true);
      Person person0 = new Person("lA& 44EZ^9I_j", 0, 187, (-634), environment0);
      elevator0.leaveElevator(person0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Environment environment0 = new Environment(2580);
      Elevator elevator0 = new Elevator(environment0, false);
      elevator0.getEnv();
      elevator0.isBlocked();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Environment environment0 = new Environment(2580);
      Floor[] floorArray0 = new Floor[2];
      Floor floor0 = new Floor(environment0, 2550);
      floorArray0[0] = floor0;
      Floor floor1 = new Floor(environment0, (-5171));
      floorArray0[1] = floor1;
      environment0.floors = floorArray0;
      Elevator elevator0 = new Elevator(environment0, false, 1, false);
      elevator0.timeShift();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      Environment environment0 = new Environment(0);
      Elevator elevator0 = new Elevator(environment0, false);
      // Undeclared exception!
      try { 
        elevator0.pressInLiftFloorButton(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Elevator.DoorState.values();
      int int0 = 1403;
      Environment environment0 = new Environment(1403);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.isExecutiveFloorCalling();
      elevator0.verbose = false;
      elevator0.toString();
      elevator0.isIdle();
      Elevator.DoorState.values();
      Floor[] floorArray0 = new Floor[5];
      environment0.floors = floorArray0;
      int int1 = 0;
      environment0.getFloor(0);
      floorArray0[0] = null;
      Floor floor0 = new Floor(environment0, (-1218));
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Environment environment0 = new Environment(0);
      boolean boolean0 = false;
      Elevator elevator0 = new Elevator(environment0, false);
      Person person0 = null;
      try {
        person0 = new Person("nS.]R4 bDLn]Wrw'pp+", 0, (-1), (-1940), environment0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("ElevatorSystem.Environment", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Environment environment0 = new Environment(785);
      Elevator elevator0 = new Elevator(environment0, true);
      elevator0.weight = 785;
      elevator0.timeShift();
      // Undeclared exception!
      try { 
        elevator0.buttonForFloorIsPressed(785);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 785
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Elevator elevator0 = null;
      try {
        elevator0 = new Elevator((Environment) null, false, (-343), true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ElevatorSystem.Elevator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Environment environment0 = new Environment(2);
      Floor[] floorArray0 = new Floor[1];
      environment0.floors = floorArray0;
      // Undeclared exception!
      try { 
        Elevator.DoorState.valueOf("G89WwRo,");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant ElevatorSystem.Elevator.DoorState.G89WwRo,
         //
         verifyException("java.lang.Enum", e);
      }
  }
}
