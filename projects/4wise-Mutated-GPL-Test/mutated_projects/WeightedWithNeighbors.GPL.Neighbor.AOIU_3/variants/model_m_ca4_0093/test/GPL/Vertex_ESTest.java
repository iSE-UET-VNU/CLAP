/*
 * This file was automatically generated by EvoSuite
 * Wed May 06 13:18:10 GMT 2020
 */

package GPL;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import GPL.Edge;
import GPL.EdgeIter;
import GPL.GlobalVarsWrapper;
import GPL.Neighbor;
import GPL.Vertex;
import GPL.VertexIter;
import GPL.WorkSpace;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Vertex_ESTest extends Vertex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      vertex0.neighbors = null;
      vertex0.getNeighborsObj();
      assertFalse(vertex0.visited);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor(vertex0, edge0);
      vertex0.addNeighbor(neighbor0);
      neighbor0.end.getNeighborsObj();
      assertFalse(vertex0.visited);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      vertex0.assignName("D<2q|c48G/4#]c+,0");
      vertex0.getName();
      assertFalse(vertex0.visited);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Vertex vertex1 = vertex0.assignName("");
      vertex1.getName();
      assertFalse(vertex1.visited);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      GlobalVarsWrapper.Queue = vertex0.neighbors;
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor(vertex0, edge0);
      Vertex vertex1 = new Vertex();
      neighbor0.end = vertex1;
      vertex0.addNeighbor(neighbor0);
      WorkSpace workSpace0 = new WorkSpace();
      // Undeclared exception!
      try { 
        vertex0.nodeSearch(workSpace0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      GlobalVarsWrapper.Queue = vertex0.neighbors;
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor(vertex0, edge0);
      vertex0.addNeighbor(neighbor0);
      edge0.EdgeConstructor(neighbor0.end, neighbor0.end);
      WorkSpace workSpace0 = new WorkSpace();
      // Undeclared exception!
      try { 
        edge0.start.nodeSearch(workSpace0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // GPL.Neighbor cannot be cast to GPL.Vertex
         //
         verifyException("GPL.Vertex", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      // Undeclared exception!
      try { 
        vertex0.init_vertex((WorkSpace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("GPL.Vertex", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor(vertex0, edge0);
      edge0.EdgeConstructor(neighbor0.end, neighbor0.end);
      edge0.start.neighbors = null;
      // Undeclared exception!
      try { 
        neighbor0.end.getNeighbors();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("GPL.Vertex$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      vertex0.neighbors = null;
      // Undeclared exception!
      try { 
        vertex0.getEdges();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("GPL.Vertex$2", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      vertex0.neighbors = null;
      // Undeclared exception!
      try { 
        vertex0.display();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("GPL.Vertex$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor(vertex0, edge0);
      neighbor0.end.neighbors = null;
      // Undeclared exception!
      try { 
        neighbor0.end.addNeighbor(edge0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("GPL.Vertex", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Neighbor neighbor0 = new Neighbor();
      neighbor0.end = vertex0;
      neighbor0.end.VertexConstructor();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor();
      Vertex vertex0 = new Vertex();
      neighbor0.end = vertex0;
      edge0.EdgeConstructor(neighbor0.end, neighbor0.end);
      VertexIter vertexIter0 = edge0.end.getNeighbors();
      assertNotNull(vertexIter0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor(vertex0, edge0);
      edge0.EdgeConstructor(neighbor0.end, neighbor0.end);
      WorkSpace workSpace0 = new WorkSpace();
      edge0.end.nodeSearch(workSpace0);
      edge0.start.display();
      assertEquals(0, edge0.getWeight());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor(vertex0, edge0);
      Vertex vertex1 = new Vertex();
      neighbor0.end = vertex1;
      vertex0.addNeighbor(neighbor0);
      assertFalse(vertex0.visited);
      
      WorkSpace workSpace0 = new WorkSpace();
      vertex0.nodeSearch(workSpace0);
      assertTrue(vertex0.visited);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor(vertex0, edge0);
      assertFalse(vertex0.visited);
      
      WorkSpace workSpace0 = new WorkSpace();
      neighbor0.end.nodeSearch(workSpace0);
      neighbor0.end.nodeSearch(workSpace0);
      assertTrue(vertex0.visited);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor(vertex0, edge0);
      edge0.EdgeConstructor(neighbor0.end, neighbor0.end);
      neighbor0.end.representative = vertex0;
      edge0.start.display();
      assertEquals(0, edge0.getWeight());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor(vertex0, edge0);
      vertex0.addNeighbor(neighbor0);
      edge0.EdgeConstructor(neighbor0.end, neighbor0.end);
      edge0.start.display();
      assertEquals(0, edge0.getWeight());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor(vertex0, edge0);
      edge0.EdgeConstructor(neighbor0.end, neighbor0.end);
      String string0 = edge0.end.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge();
      vertex0.addNeighbor(edge0);
      WorkSpace workSpace0 = new WorkSpace();
      // Undeclared exception!
      try { 
        vertex0.nodeSearch(workSpace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("GPL.Vertex", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor();
      Vertex vertex0 = new Vertex();
      neighbor0.end = vertex0;
      edge0.EdgeConstructor(neighbor0.end, neighbor0.end);
      LinkedList linkedList0 = edge0.start.getNeighborsObj();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Neighbor neighbor0 = new Neighbor();
      neighbor0.end = vertex0;
      WorkSpace workSpace0 = new WorkSpace();
      neighbor0.end.init_vertex(workSpace0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Vertex vertex0 = new Vertex();
      Edge edge0 = new Edge();
      Neighbor neighbor0 = new Neighbor();
      neighbor0.end = vertex0;
      edge0.EdgeConstructor(neighbor0.end, neighbor0.end);
      EdgeIter edgeIter0 = edge0.end.getEdges();
      assertNotNull(edgeIter0);
  }
}
