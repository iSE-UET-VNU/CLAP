import MutantManager
import ConfigManager
import TestManager
import VariantComposer

from FileManager import get_project_dir, get_all_variant_dirs

if __name__ == "__main__":
    # ------ START CONFIG ------
    base_dir = "/home/hieuvd/spl_dataset_generation/InputPreparation/new_projects"
    project_name = "4wise-GPL-NOB3"
    num_of_seeding_bugs = 1
    case_limit = 10000
    bug_ids = None
    bug_tuples = [('BFS.GPL.Graph.ROR_1', 'Cycle.GPL.Graph.ODL_1', 'Cycle.GPL.Vertex.AOIS_1'), ('BFS.GPL.Graph.ROR_1', 'Cycle.GPL.Vertex.AOIS_1', 'DirectedWithNeighbors.GPL.Neighbor.ODL_2'), ('BFS.GPL.Graph.ROR_1', 'Cycle.GPL.Vertex.AOIS_1', 'Number.GPL.NumberWorkSpace.AORS_2'), ('BFS.GPL.Graph.ROR_1', 'Cycle.GPL.Vertex.AOIS_1', 'StronglyConnected.GPL.WorkSpaceTranspose.AOIS_1'), ('BFS.GPL.Graph.ROR_1', 'Cycle.GPL.Vertex.AOIS_1', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2'), ('BFS.GPL.Graph.ROR_1', 'Cycle.GPL.Vertex.AOIS_1', 'WeightedOnlyVertices.GPL.Vertex.LOI_2'), ('BFS.GPL.Graph.ROR_1', 'Cycle.GPL.Vertex.AOIS_1', 'WeightedWithNeighbors.GPL.Graph.ROR_1'), ('BFS.GPL.Graph.ROR_1', 'Cycle.GPL.Vertex.AOIS_1', 'WeightedWithNeighbors.GPL.Vertex.AOIS_1'), ('BFS.GPL.Graph.ROR_1', 'DFS.GPL.Graph.COD_1', 'DirectedWithNeighbors.GPL.Neighbor.ODL_2'), ('BFS.GPL.Graph.ROR_1', 'DFS.GPL.Graph.COD_1', 'Number.GPL.NumberWorkSpace.AORS_2'), ('BFS.GPL.Graph.ROR_1', 'DFS.GPL.Graph.COD_1', 'StronglyConnected.GPL.WorkSpaceTranspose.AOIS_1'), ('BFS.GPL.Graph.ROR_1', 'DFS.GPL.Graph.COD_1', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2'), ('BFS.GPL.Graph.ROR_1', 'DFS.GPL.Graph.COD_1', 'WeightedOnlyVertices.GPL.Vertex.LOI_2'), ('BFS.GPL.Graph.ROR_1', 'DFS.GPL.Graph.COD_1', 'WeightedWithNeighbors.GPL.Graph.ROR_1'), ('BFS.GPL.Graph.ROR_1', 'DFS.GPL.Graph.COD_1', 'WeightedWithNeighbors.GPL.Vertex.AOIS_1'), ('BFS.GPL.Graph.ROR_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'StronglyConnected.GPL.WorkSpaceTranspose.AOIS_1'), ('BFS.GPL.Graph.ROR_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2'), ('BFS.GPL.Graph.ROR_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'WeightedOnlyVertices.GPL.Vertex.LOI_2'), ('BFS.GPL.Graph.ROR_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'WeightedWithNeighbors.GPL.Graph.ROR_1'), ('BFS.GPL.Graph.ROR_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'WeightedWithNeighbors.GPL.Vertex.AOIS_1'), ('BFS.GPL.Graph.ROR_1', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2', 'WeightedOnlyVertices.GPL.Vertex.LOI_2'), ('BFS.GPL.Graph.ROR_1', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2', 'WeightedWithNeighbors.GPL.Graph.ROR_1'), ('BFS.GPL.Graph.ROR_1', 'WeightedWithNeighbors.GPL.Graph.ROR_1', 'WeightedWithNeighbors.GPL.Vertex.AOIS_1'), ('Cycle.GPL.Graph.ODL_1', 'DirectedWithEdges.GPL.Edge.ROR_2', 'MSTKruskal.GPL.Vertex.ROR_1'), ('Cycle.GPL.Graph.ODL_1', 'DirectedWithEdges.GPL.Edge.ROR_2', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2'), ('Cycle.GPL.Graph.ODL_1', 'DirectedWithEdges.GPL.Edge.ROR_2', 'UndirectedWithEdges.GPL.Edge.ROR_1'), ('Cycle.GPL.Graph.ODL_1', 'DirectedWithEdges.GPL.Edge.ROR_2', 'WeightedWithEdges.GPL.Edge.AOIU_1'), ('Cycle.GPL.Graph.ODL_1', 'DirectedWithEdges.GPL.Edge.ROR_2', 'WeightedWithNeighbors.GPL.Neighbor.AOIU_4'), ('Cycle.GPL.Graph.ODL_1', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'UndirectedWithEdges.GPL.Edge.ROR_1'), ('Cycle.GPL.Graph.ODL_1', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedOnlyVertices.GPL.Graph.ROR_1'), ('Cycle.GPL.Graph.ODL_1', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedWithEdges.GPL.Edge.AOIU_1'), ('Cycle.GPL.Graph.ODL_1', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedWithNeighbors.GPL.Neighbor.AOIU_4'), ('Cycle.GPL.Graph.ODL_1', 'WeightedOnlyVertices.GPL.Graph.ROR_1', 'WeightedWithEdges.GPL.Edge.AOIU_1'), ('Cycle.GPL.Graph.ODL_1', 'WeightedOnlyVertices.GPL.Graph.ROR_1', 'WeightedWithNeighbors.GPL.Neighbor.AOIU_4'), ('Cycle.GPL.Vertex.AOIS_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'StronglyConnected.GPL.WorkSpaceTranspose.AOIS_1'), ('Cycle.GPL.Vertex.AOIS_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2'), ('Cycle.GPL.Vertex.AOIS_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'WeightedOnlyVertices.GPL.Vertex.LOI_2'), ('Cycle.GPL.Vertex.AOIS_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'WeightedWithNeighbors.GPL.Graph.ROR_1'), ('Cycle.GPL.Vertex.AOIS_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'WeightedWithNeighbors.GPL.Vertex.AOIS_1'), ('Cycle.GPL.Vertex.AOIS_1', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2', 'WeightedOnlyVertices.GPL.Vertex.LOI_2'), ('Cycle.GPL.Vertex.AOIS_1', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2', 'WeightedWithNeighbors.GPL.Graph.ROR_1'), ('Cycle.GPL.Vertex.AOIS_1', 'WeightedWithNeighbors.GPL.Graph.ROR_1', 'WeightedWithNeighbors.GPL.Vertex.AOIS_1'), ('DFS.GPL.Graph.COD_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'StronglyConnected.GPL.WorkSpaceTranspose.AOIS_1'), ('DFS.GPL.Graph.COD_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2'), ('DFS.GPL.Graph.COD_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'WeightedOnlyVertices.GPL.Vertex.LOI_2'), ('DFS.GPL.Graph.COD_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'WeightedWithNeighbors.GPL.Graph.ROR_1'), ('DFS.GPL.Graph.COD_1', 'Number.GPL.NumberWorkSpace.AORS_2', 'WeightedWithNeighbors.GPL.Vertex.AOIS_1'), ('DFS.GPL.Graph.COD_1', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2', 'WeightedOnlyVertices.GPL.Vertex.LOI_2'), ('DFS.GPL.Graph.COD_1', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2', 'WeightedWithNeighbors.GPL.Graph.ROR_1'), ('DFS.GPL.Graph.COD_1', 'WeightedWithNeighbors.GPL.Graph.ROR_1', 'WeightedWithNeighbors.GPL.Vertex.AOIS_1'), ('DirectedWithNeighbors.GPL.Neighbor.ODL_2', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'UndirectedWithEdges.GPL.Edge.ROR_1'), ('DirectedWithNeighbors.GPL.Neighbor.ODL_2', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedOnlyVertices.GPL.Graph.ROR_1'), ('DirectedWithNeighbors.GPL.Neighbor.ODL_2', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedWithEdges.GPL.Edge.AOIU_1'), ('DirectedWithNeighbors.GPL.Neighbor.ODL_2', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedWithNeighbors.GPL.Neighbor.AOIU_4'), ('DirectedWithNeighbors.GPL.Neighbor.ODL_2', 'WeightedOnlyVertices.GPL.Graph.ROR_1', 'WeightedWithEdges.GPL.Edge.AOIU_1'), ('DirectedWithNeighbors.GPL.Neighbor.ODL_2', 'WeightedOnlyVertices.GPL.Graph.ROR_1', 'WeightedWithNeighbors.GPL.Neighbor.AOIU_4'), ('Number.GPL.NumberWorkSpace.AORS_2', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2', 'WeightedOnlyVertices.GPL.Vertex.LOI_2'), ('Number.GPL.NumberWorkSpace.AORS_2', 'UndirectedWithNeighbors.GPL.Neighbor.ODL_2', 'WeightedWithNeighbors.GPL.Graph.ROR_1'), ('Number.GPL.NumberWorkSpace.AORS_2', 'WeightedWithNeighbors.GPL.Graph.ROR_1', 'WeightedWithNeighbors.GPL.Vertex.AOIS_1'), ('StronglyConnected.GPL.WorkSpaceTranspose.AOIS_1', 'WeightedOnlyVertices.GPL.Graph.ROR_1', 'WeightedWithEdges.GPL.Edge.AOIU_1'), ('StronglyConnected.GPL.WorkSpaceTranspose.AOIS_1', 'WeightedOnlyVertices.GPL.Graph.ROR_1', 'WeightedWithNeighbors.GPL.Neighbor.AOIU_4'), ('Cycle.GPL.CycleWorkSpace.AOIU_4', 'DirectedWithEdges.GPL.Edge.ROR_2', 'MSTKruskal.GPL.Vertex.ROR_1'), ('Cycle.GPL.CycleWorkSpace.AOIU_4', 'DirectedWithEdges.GPL.Edge.ROR_2', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2'), ('Cycle.GPL.CycleWorkSpace.AOIU_4', 'DirectedWithEdges.GPL.Edge.ROR_2', 'UndirectedWithEdges.GPL.Edge.ROR_1'), ('Cycle.GPL.CycleWorkSpace.AOIU_4', 'DirectedWithEdges.GPL.Edge.ROR_2', 'WeightedWithEdges.GPL.Edge.AOIU_1'), ('Cycle.GPL.CycleWorkSpace.AOIU_4', 'DirectedWithEdges.GPL.Edge.ROR_2', 'WeightedWithNeighbors.GPL.Neighbor.AOIU_4'), ('Cycle.GPL.CycleWorkSpace.AOIU_4', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'UndirectedWithEdges.GPL.Edge.ROR_1'), ('Cycle.GPL.CycleWorkSpace.AOIU_4', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedOnlyVertices.GPL.Graph.ROR_1'), ('Cycle.GPL.CycleWorkSpace.AOIU_4', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedWithEdges.GPL.Edge.AOIU_1'), ('Cycle.GPL.CycleWorkSpace.AOIU_4', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedWithNeighbors.GPL.Neighbor.AOIU_4'), ('Cycle.GPL.CycleWorkSpace.AOIU_4', 'WeightedOnlyVertices.GPL.Graph.ROR_1', 'WeightedWithEdges.GPL.Edge.AOIU_1'), ('Cycle.GPL.CycleWorkSpace.AOIU_4', 'WeightedOnlyVertices.GPL.Graph.ROR_1', 'WeightedWithNeighbors.GPL.Neighbor.AOIU_4'), ('DirectedWithEdges.GPL.Edge.ROR_2', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'UndirectedWithEdges.GPL.Edge.ROR_1'), ('DirectedWithEdges.GPL.Edge.ROR_2', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedWithEdges.GPL.Edge.AOIU_1'), ('DirectedWithEdges.GPL.Edge.ROR_2', 'StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedWithNeighbors.GPL.Neighbor.AOIU_4'), ('StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedOnlyVertices.GPL.Graph.ROR_1', 'WeightedWithEdges.GPL.Edge.AOIU_1'), ('StronglyConnected.GPL.FinishTimeWorkSpace.AODS_2', 'WeightedOnlyVertices.GPL.Graph.ROR_1', 'WeightedWithNeighbors.GPL.Neighbor.AOIU_4')]
    # ------ END CONFIG ------

    project_dir = get_project_dir(project_name, base_dir)
    config_output_paths = ConfigManager.get_config_paths(project_dir, sort=True)
    variant_dirs = get_all_variant_dirs(project_dir, sort=True)
    # generate mutants and inject them to "optional" features
    if bug_ids:
        mutated_project_dirs = MutantManager.regenerate_filtered_mutants_from_bug_ids(project_dir, bug_ids,
                                                                                      num_of_bugs=num_of_seeding_bugs,
                                                                                      case_limit=case_limit)
    elif bug_tuples:
        mutated_project_dirs = MutantManager.regenerate_filtered_mutants_from_bug_tuples(project_dir, bug_tuples)
    else:
        raise Exception("Invalid bug input options")

    # compile mutated feature's source code
    for mutated_project_dir in mutated_project_dirs:
        for config_path, variant_dir in zip(config_output_paths, variant_dirs):
            mutated_variant_dir = VariantComposer.compose_by_config(mutated_project_dir, config_path)
            TestManager.link_generated_junit_test_cases(variant_dir, mutated_variant_dir)

        ConfigManager.copy_configs_report(project_dir, mutated_project_dir)
